module sidero.base.internal.unicode.emoji_data;
// Generated do not modify
import sidero.base.containers.set.interval;

static immutable dchar[] Table_sidero_utf_lut_isMemberOfEmoji = cast(dchar[])x

export extern(C) bool sidero_utf_lut_isMemberOfEmoji(dchar against) @trusted nothrow @nogc pure {
    ptrdiff_t low, high = Table_sidero_utf_lut_isMemberOfEmoji.length / 2;

    while(low < high) {
        const mid = low + (high - low) / 2;
        const start = Table_sidero_utf_lut_isMemberOfEmoji[mid << 1], end = Table_sidero_utf_lut_isMemberOfEmoji[(mid << 1) | 1];

        if (against >= start && against <= end)
            return true;
        else if (against > end)
            low = mid + 1;
        else if (against < start)
            high = mid;
    }

    return false;
}
export extern(C) IntervalSet!dchar sidero_utf_lut_isMemberOfEmoji_Set() @trusted nothrow @nogc {
    static IntervalSet!dchar Set = IntervalSet!dchar.constructCTFE(cast(dstring)Table_sidero_utf_lut_isMemberOfEmoji);
    return cast(IntervalSet!dchar)Set;
}
static immutable dchar[] Table_sidero_utf_lut_isMemberOfEmoji_Presentation = cast(dchar[])x

export extern(C) bool sidero_utf_lut_isMemberOfEmoji_Presentation(dchar against) @trusted nothrow @nogc pure {
    ptrdiff_t low, high = Table_sidero_utf_lut_isMemberOfEmoji_Presentation.length / 2;

    while(low < high) {
        const mid = low + (high - low) / 2;
        const start = Table_sidero_utf_lut_isMemberOfEmoji_Presentation[mid << 1], end = Table_sidero_utf_lut_isMemberOfEmoji_Presentation[(mid << 1) | 1];

        if (against >= start && against <= end)
            return true;
        else if (against > end)
            low = mid + 1;
        else if (against < start)
            high = mid;
    }

    return false;
}
export extern(C) IntervalSet!dchar sidero_utf_lut_isMemberOfEmoji_Presentation_Set() @trusted nothrow @nogc {
    static IntervalSet!dchar Set = IntervalSet!dchar.constructCTFE(cast(dstring)Table_sidero_utf_lut_isMemberOfEmoji_Presentation);
    return cast(IntervalSet!dchar)Set;
}
static immutable dchar[] Table_sidero_utf_lut_isMemberOfEmoji_Modifier = cast(dchar[])x"0001F3FB0001F3FF";

export extern(C) bool sidero_utf_lut_isMemberOfEmoji_Modifier(dchar against) @trusted nothrow @nogc pure {
    ptrdiff_t low, high = Table_sidero_utf_lut_isMemberOfEmoji_Modifier.length / 2;

    while(low < high) {
        const mid = low + (high - low) / 2;
        const start = Table_sidero_utf_lut_isMemberOfEmoji_Modifier[mid << 1], end = Table_sidero_utf_lut_isMemberOfEmoji_Modifier[(mid << 1) | 1];

        if (against >= start && against <= end)
            return true;
        else if (against > end)
            low = mid + 1;
        else if (against < start)
            high = mid;
    }

    return false;
}
export extern(C) IntervalSet!dchar sidero_utf_lut_isMemberOfEmoji_Modifier_Set() @trusted nothrow @nogc {
    static IntervalSet!dchar Set = IntervalSet!dchar.constructCTFE(cast(dstring)Table_sidero_utf_lut_isMemberOfEmoji_Modifier);
    return cast(IntervalSet!dchar)Set;
}
static immutable dchar[] Table_sidero_utf_lut_isMemberOfEmoji_Modifier_Base = cast(dchar[])x

export extern(C) bool sidero_utf_lut_isMemberOfEmoji_Modifier_Base(dchar against) @trusted nothrow @nogc pure {
    ptrdiff_t low, high = Table_sidero_utf_lut_isMemberOfEmoji_Modifier_Base.length / 2;

    while(low < high) {
        const mid = low + (high - low) / 2;
        const start = Table_sidero_utf_lut_isMemberOfEmoji_Modifier_Base[mid << 1], end = Table_sidero_utf_lut_isMemberOfEmoji_Modifier_Base[(mid << 1) | 1];

        if (against >= start && against <= end)
            return true;
        else if (against > end)
            low = mid + 1;
        else if (against < start)
            high = mid;
    }

    return false;
}
export extern(C) IntervalSet!dchar sidero_utf_lut_isMemberOfEmoji_Modifier_Base_Set() @trusted nothrow @nogc {
    static IntervalSet!dchar Set = IntervalSet!dchar.constructCTFE(cast(dstring)Table_sidero_utf_lut_isMemberOfEmoji_Modifier_Base);
    return cast(IntervalSet!dchar)Set;
}
static immutable dchar[] Table_sidero_utf_lut_isMemberOfEmoji_Component = cast(dchar[])x"00000023000000230000002A0000002A00000030000000390000200D0000200D000020E3000020E30000FE0F0000FE0F0001F1E60001F1FF0001F3FB0001F3FF0001F9B00001F9B3000E0020000E007F";

export extern(C) bool sidero_utf_lut_isMemberOfEmoji_Component(dchar against) @trusted nothrow @nogc pure {
    ptrdiff_t low, high = Table_sidero_utf_lut_isMemberOfEmoji_Component.length / 2;

    while(low < high) {
        const mid = low + (high - low) / 2;
        const start = Table_sidero_utf_lut_isMemberOfEmoji_Component[mid << 1], end = Table_sidero_utf_lut_isMemberOfEmoji_Component[(mid << 1) | 1];

        if (against >= start && against <= end)
            return true;
        else if (against > end)
            low = mid + 1;
        else if (against < start)
            high = mid;
    }

    return false;
}
export extern(C) IntervalSet!dchar sidero_utf_lut_isMemberOfEmoji_Component_Set() @trusted nothrow @nogc {
    static IntervalSet!dchar Set = IntervalSet!dchar.constructCTFE(cast(dstring)Table_sidero_utf_lut_isMemberOfEmoji_Component);
    return cast(IntervalSet!dchar)Set;
}
static immutable dchar[] Table_sidero_utf_lut_isMemberOfExtended_Pictographic = cast(dchar[])x

export extern(C) bool sidero_utf_lut_isMemberOfExtended_Pictographic(dchar against) @trusted nothrow @nogc pure {
    ptrdiff_t low, high = Table_sidero_utf_lut_isMemberOfExtended_Pictographic.length / 2;

    while(low < high) {
        const mid = low + (high - low) / 2;
        const start = Table_sidero_utf_lut_isMemberOfExtended_Pictographic[mid << 1], end = Table_sidero_utf_lut_isMemberOfExtended_Pictographic[(mid << 1) | 1];

        if (against >= start && against <= end)
            return true;
        else if (against > end)
            low = mid + 1;
        else if (against < start)
            high = mid;
    }

    return false;
}
export extern(C) IntervalSet!dchar sidero_utf_lut_isMemberOfExtended_Pictographic_Set() @trusted nothrow @nogc {
    static IntervalSet!dchar Set = IntervalSet!dchar.constructCTFE(cast(dstring)Table_sidero_utf_lut_isMemberOfExtended_Pictographic);
    return cast(IntervalSet!dchar)Set;
}
