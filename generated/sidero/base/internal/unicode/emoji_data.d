module sidero.base.internal.unicode.emoji_data;

// Generated do not modify
export extern(C) bool sidero_utf_lut_isMemberOfEmoji(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isMemberOfEmoji_Presentation(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isMemberOfEmoji_Modifier(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001F3FB0001F400";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isMemberOfEmoji_Modifier_Base(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000261D0000261E000026F9000026FA0000270A0000270E0001F3850001F3860001F3C20001F3C50001F3C70001F3C80001F3CA0001F3CD0001F4420001F4440001F4460001F4510001F4660001F4790001F47C0001F47D0001F4810001F4840001F4850001F4880001F48F0001F4900001F4910001F4920001F4AA0001F4AB0001F5740001F5760001F57A0001F57B0001F5900001F5910001F5950001F5970001F6450001F6480001F64B0001F6500001F6A30001F6A40001F6B40001F6B70001F6C00001F6C10001F6CC0001F6CD0001F90C0001F90D0001F90F0001F9100001F9180001F9200001F9260001F9270001F9300001F93A0001F93C0001F93F0001F9770001F9780001F9B50001F9B70001F9B80001F9BA0001F9BB0001F9BC0001F9CD0001F9D00001F9D10001F9DE0001FAC30001FAC60001FAF00001FAF9";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isMemberOfEmoji_Component(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000023000000240000002A0000002B000000300000003A0000200D0000200E000020E3000020E40000FE0F0000FE100001F1E60001F2000001F3FB0001F4000001F9B00001F9B4000E0020000E0080";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isMemberOfExtended_Pictographic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
