module sidero.base.internal.unicode.proplist;

// Generated do not modify

export extern(C) bool sidero_utf_lut_isMemberOfWhite_Space(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000000090000000E00000020000000210000008500000086000000A0000000A10000168000001681000020000000200B000020280000202A0000202F000020300000205F000020600000300000003001";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfBidi_Control(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000061C0000061D0000200E000020100000202A0000202F000020660000206A";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfJoin_Control(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000200C0000200E";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfDash(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000002D0000002E0000058A0000058B000005BE000005BF00001400000014010000180600001807000020100000201600002053000020540000207B0000207C0000208B0000208C000022120000221300002E1700002E1800002E1A00002E1B00002E3A00002E3C00002E4000002E4100002E5D00002E5E0000301C0000301D0000303000003031000030A0000030A10000FE310000FE330000FE580000FE590000FE630000FE640000FF0D0000FF0E00010D6E00010D6F00010EAD00010EAE";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfHyphen(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000002D0000002E000000AD000000AE0000058A0000058B0000180600001807000020100000201200002E1700002E18000030FB000030FC0000FE630000FE640000FF0D0000FF0E0000FF650000FF66";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfQuotation_Mark(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000022000000230000002700000028000000AB000000AC000000BB000000BC0000201800002020000020390000203B00002E4200002E430000300C000030100000301D000030200000FE410000FE450000FF020000FF030000FF070000FF080000FF620000FF64";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfTerminal_Punctuation(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfOther_Math(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfHex_Digit(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000000300000003A000000410000004700000061000000670000FF100000FF1A0000FF210000FF270000FF410000FF47";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfASCII_Hex_Digit(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000000300000003A00000041000000470000006100000067";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfOther_Alphabetic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfIdeographic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000300600003008000030210000302A000030380000303B0000340000004DC000004E000000A0000000F9000000FA6E0000FA700000FADA00016FE400016FE500017000000187F80001880000018CD600018CFF00018D090001B1700001B2FC000200000002A6E00002A7000002B73A0002B7400002B81E0002B8200002CEA20002CEB00002EBE10002EBF00002EE5E0002F8000002FA1E000300000003134B00031350000323B0";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfDiacritic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfExtender(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfOther_Lowercase(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000000AA000000AB000000BA000000BB000002B0000002B9000002C0000002C2000002E0000002E500000345000003460000037A0000037B000010FC000010FD00001D2C00001D6B00001D7800001D7900001D9B00001DC000002071000020720000207F00002080000020900000209D0000217000002180000024D0000024EA00002C7C00002C7E0000A69C0000A69E0000A7700000A7710000A7F20000A7F50000A7F80000A7FA0000AB5C0000AB600000AB690000AB6A0001078000010781000107830001078600010787000107B1000107B2000107BB0001E0300001E06E";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfOther_Uppercase(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000216000002170000024B6000024D00001F1300001F14A0001F1500001F16A0001F1700001F18A";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfNoncharacter_Code_Point(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000FDD00000FDF00000FFFE000100000001FFFE000200000002FFFE000300000003FFFE000400000004FFFE000500000005FFFE000600000006FFFE000700000007FFFE000800000008FFFE000900000009FFFE000A0000000AFFFE000B0000000BFFFE000C0000000CFFFE000D0000000DFFFE000E0000000EFFFE000F0000000FFFFE001000000010FFFE00110000";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfOther_Grapheme_Extend(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfIDS_Binary_Operator(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00002FF000002FF200002FF400002FFE000031EF000031F0";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfIDS_Trinary_Operator(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00002FF200002FF4";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfIDS_Unary_Operator(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00002FFE00003000";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfRadical(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00002E8000002E9A00002E9B00002EF400002F0000002FD6";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfUnified_Ideograph(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000340000004DC000004E000000A0000000FA0E0000FA100000FA110000FA120000FA130000FA150000FA1F0000FA200000FA210000FA220000FA230000FA250000FA270000FA2A000200000002A6E00002A7000002B73A0002B7400002B81E0002B8200002CEA20002CEB00002EBE10002EBF00002EE5E000300000003134B00031350000323B0";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfOther_Default_Ignorable_Code_Point(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000034F000003500000115F00001161000017B4000017B6000020650000206600003164000031650000FFA00000FFA10000FFF00000FFF9000E0000000E0001000E0002000E0020000E0080000E0100000E01F0000E1000";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfDeprecated(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000001490000014A000006730000067400000F7700000F7800000F7900000F7A000017A3000017A50000206A00002070000023290000232B000E0001000E0002";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfSoft_Dotted(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfLogical_Order_Exception(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000E4000000E4500000EC000000EC5000019B5000019B8000019BA000019BB0000AAB50000AAB70000AAB90000AABA0000AABB0000AABD";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfOther_ID_Start(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000018850000188700002118000021190000212E0000212F0000309B0000309D";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfOther_ID_Continue(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000000B7000000B800000387000003880000136900001372000019DA000019DB0000200C0000200E000030FB000030FC0000FF650000FF66";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfSentence_Terminal(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfVariation_Selector(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000180B0000180E0000180F000018100000FE000000FE10000E0100000E01F0";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfPattern_White_Space(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000000090000000E000000200000002100000085000000860000200E00002010000020280000202A";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfPattern_Syntax(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000021000000300000003A000000410000005B0000005F00000060000000610000007B0000007F000000A1000000A8000000A9000000AA000000AB000000AD000000AE000000AF000000B0000000B2000000B6000000B7000000BB000000BC000000BF000000C0000000D7000000D8000000F7000000F80000201000002028000020300000203F0000204100002054000020550000205F000021900000246000002500000027760000279400002C0000002E0000002E800000300100003004000030080000302100003030000030310000FD3E0000FD400000FE450000FE47";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfPrepended_Concatenation_Mark(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000060000000606000006DD000006DE0000070F000007100000089000000892000008E2000008E3000110BD000110BE000110CD000110CE";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfRegional_Indicator(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001F1E60001F200";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfID_Compat_Math_Start(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000022020000220300002207000022080000221E0000221F0001D6C10001D6C20001D6DB0001D6DC0001D6FB0001D6FC0001D7150001D7160001D7350001D7360001D74F0001D7500001D76F0001D7700001D7890001D78A0001D7A90001D7AA0001D7C30001D7C4";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfID_Compat_Math_Continue(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000000B2000000B4000000B9000000BA0000207000002071000020740000207F000020800000208F000022020000220300002207000022080000221E0000221F0001D6C10001D6C20001D6DB0001D6DC0001D6FB0001D6FC0001D7150001D7160001D7350001D7360001D74F0001D7500001D76F0001D7700001D7890001D78A0001D7A90001D7AA0001D7C30001D7C4";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}

export extern(C) bool sidero_utf_lut_isMemberOfModifier_Combining_Mark(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000654000006560000065800000659000006DC000006DD000006E3000006E4000006E7000006E9000008CA000008CC000008CD000008D0000008D3000008D4000008F3000008F4";

    size_t low, high = Table.length;

    while(low < high) {
        size_t mid = (low + high) / 2;

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
