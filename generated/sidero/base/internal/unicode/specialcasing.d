module sidero.base.internal.unicode.specialcasing;

// Generated do not modify
export extern(C) bool sidero_utf_lut_getSpecialCasing2None(dchar input, void* outputPtr) @trusted nothrow @nogc pure {
    Casing* output = cast(Casing*)outputPtr;
    auto sliced = cast(DicedCasing*)sidero_utf_lut_getSpecialCasing3None(input);
    if (sliced is null)
        return false;
    output.condition = sliced.condition;
    output.lowercase = LUT_SpecialCasingDString[sliced.lowerCaseOffset .. sliced.lowerCaseEnd];
    output.titlecase = LUT_SpecialCasingDString[sliced.titleCaseOffset .. sliced.titleCaseEnd];
    output.uppercase = LUT_SpecialCasingDString[sliced.upperCaseOffset .. sliced.upperCaseEnd];
    if (output.lowercase.length == 0)
        output.lowercase = null;
    if (output.titlecase.length == 0)
        output.titlecase = null;
    if (output.uppercase.length == 0)
        output.uppercase = null;
    return true;}
immutable(DicedCasing)* sidero_utf_lut_getSpecialCasing3None(dchar against) @trusted nothrow @nogc pure {
    static immutable Table = cast(immutable(dchar[]))x
    static immutable ReturnValues = x
    immutable(DicedCasing[]) ReturnValues2 = (cast(immutable(DicedCasing*))ReturnValues.ptr)[0 .. ReturnValues.length / 14];
    immutable(dchar[2][]) Table2 = (cast(immutable(dchar[2])*)Table.ptr)[0 .. Table.length / 2];
    ptrdiff_t low, high = Table2.length - 1;

    while(low <= high) {
        const mid = low + ((high - low) / 2);

        if (Table2[mid][0] <= against && against <= Table2[mid][1])
            return &ReturnValues2[mid];

        if (Table2[mid][1] < against)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return null;
}
export extern(C) bool sidero_utf_lut_getSpecialCasing2Lithuanian(dchar input, void* outputPtr) @trusted nothrow @nogc pure {
    Casing* output = cast(Casing*)outputPtr;
    auto sliced = cast(DicedCasing*)sidero_utf_lut_getSpecialCasing3Lithuanian(input);
    if (sliced is null)
        return false;
    output.condition = sliced.condition;
    output.lowercase = LUT_SpecialCasingDString[sliced.lowerCaseOffset .. sliced.lowerCaseEnd];
    output.titlecase = LUT_SpecialCasingDString[sliced.titleCaseOffset .. sliced.titleCaseEnd];
    output.uppercase = LUT_SpecialCasingDString[sliced.upperCaseOffset .. sliced.upperCaseEnd];
    if (output.lowercase.length == 0)
        output.lowercase = null;
    if (output.titlecase.length == 0)
        output.titlecase = null;
    if (output.uppercase.length == 0)
        output.uppercase = null;
    return true;}
immutable(DicedCasing)* sidero_utf_lut_getSpecialCasing3Lithuanian(dchar against) @trusted nothrow @nogc pure {
    static immutable Table = cast(immutable(dchar[]))x"00000049000000490000004A0000004A000000CC000000CC000000CD000000CD00000128000001280000012E0000012E0000030700000307";
    static immutable ReturnValues = x"070000003A013B013A013B0104003D0100003D013E013D013E010400410100004101420141014201000045010000450146014501460100004901000049014A0149014A0100004C0100004C014D014C014D0104004E0100004E014E014E014E010300";
    immutable(DicedCasing[]) ReturnValues2 = (cast(immutable(DicedCasing*))ReturnValues.ptr)[0 .. ReturnValues.length / 14];
    immutable(dchar[2][]) Table2 = (cast(immutable(dchar[2])*)Table.ptr)[0 .. Table.length / 2];
    ptrdiff_t low, high = Table2.length - 1;

    while(low <= high) {
        const mid = low + ((high - low) / 2);

        if (Table2[mid][0] <= against && against <= Table2[mid][1])
            return &ReturnValues2[mid];

        if (Table2[mid][1] < against)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return null;
}
export extern(C) bool sidero_utf_lut_getSpecialCasing2Turkish(dchar input, void* outputPtr) @trusted nothrow @nogc pure {
    Casing* output = cast(Casing*)outputPtr;
    auto sliced = cast(DicedCasing*)sidero_utf_lut_getSpecialCasing3Turkish(input);
    if (sliced is null)
        return false;
    output.condition = sliced.condition;
    output.lowercase = LUT_SpecialCasingDString[sliced.lowerCaseOffset .. sliced.lowerCaseEnd];
    output.titlecase = LUT_SpecialCasingDString[sliced.titleCaseOffset .. sliced.titleCaseEnd];
    output.uppercase = LUT_SpecialCasingDString[sliced.upperCaseOffset .. sliced.upperCaseEnd];
    if (output.lowercase.length == 0)
        output.lowercase = null;
    if (output.titlecase.length == 0)
        output.titlecase = null;
    if (output.uppercase.length == 0)
        output.uppercase = null;
    return true;}
immutable(DicedCasing)* sidero_utf_lut_getSpecialCasing3Turkish(dchar against) @trusted nothrow @nogc pure {
    static immutable Table = cast(immutable(dchar[]))x"0000004900000049000000690000006900000130000001300000030700000307";
    static immutable ReturnValues = x"4F0100003A013B013A013B010600500100000700080007000800000050010000070008000700080000004E0100004D014E014D014E010500";
    immutable(DicedCasing[]) ReturnValues2 = (cast(immutable(DicedCasing*))ReturnValues.ptr)[0 .. ReturnValues.length / 14];
    immutable(dchar[2][]) Table2 = (cast(immutable(dchar[2])*)Table.ptr)[0 .. Table.length / 2];
    ptrdiff_t low, high = Table2.length - 1;

    while(low <= high) {
        const mid = low + ((high - low) / 2);

        if (Table2[mid][0] <= against && against <= Table2[mid][1])
            return &ReturnValues2[mid];

        if (Table2[mid][1] < against)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return null;
}
export extern(C) bool sidero_utf_lut_getSpecialCasing2Azeri(dchar input, void* outputPtr) @trusted nothrow @nogc pure {
    Casing* output = cast(Casing*)outputPtr;
    auto sliced = cast(DicedCasing*)sidero_utf_lut_getSpecialCasing3Azeri(input);
    if (sliced is null)
        return false;
    output.condition = sliced.condition;
    output.lowercase = LUT_SpecialCasingDString[sliced.lowerCaseOffset .. sliced.lowerCaseEnd];
    output.titlecase = LUT_SpecialCasingDString[sliced.titleCaseOffset .. sliced.titleCaseEnd];
    output.uppercase = LUT_SpecialCasingDString[sliced.upperCaseOffset .. sliced.upperCaseEnd];
    if (output.lowercase.length == 0)
        output.lowercase = null;
    if (output.titlecase.length == 0)
        output.titlecase = null;
    if (output.uppercase.length == 0)
        output.uppercase = null;
    return true;}
immutable(DicedCasing)* sidero_utf_lut_getSpecialCasing3Azeri(dchar against) @trusted nothrow @nogc pure {
    static immutable Table = cast(immutable(dchar[]))x"0000004900000049000000690000006900000130000001300000030700000307";
    static immutable ReturnValues = x"4F0100003A013B013A013B010600500100000700080007000800000050010000070008000700080000004E0100004D014E014D014E010500";
    immutable(DicedCasing[]) ReturnValues2 = (cast(immutable(DicedCasing*))ReturnValues.ptr)[0 .. ReturnValues.length / 14];
    immutable(dchar[2][]) Table2 = (cast(immutable(dchar[2])*)Table.ptr)[0 .. Table.length / 2];
    ptrdiff_t low, high = Table2.length - 1;

    while(low <= high) {
        const mid = low + ((high - low) / 2);

        if (Table2[mid][0] <= against && against <= Table2[mid][1])
            return &ReturnValues2[mid];

        if (Table2[mid][1] < against)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return null;
}
static immutable LUT_SpecialCasingDString = cast(dstring)x


struct DicedCasing {
    ushort lowerCaseOffset, lowerCaseEnd;
    ushort titleCaseOffset, titleCaseEnd;
    ushort upperCaseOffset, upperCaseEnd;
    ubyte condition;
}

struct Casing {
    dstring lowercase, titlecase, uppercase;
    ubyte condition;
}
