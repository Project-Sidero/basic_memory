module sidero.base.internal.unicode.scripts;

// Generated do not modify
export extern(C) ubyte sidero_utf_lut_getScript(dchar against) @trusted nothrow @nogc pure {
    static immutable Table = cast(immutable(dchar[]))x
    static immutable ubyte[] ReturnValues = cast(ubyte[])x

    immutable(dchar[2][]) Table2 = (cast(immutable(dchar[2])*)Table.ptr)[0 .. Table.length / 2];
    ptrdiff_t low, high = Table2.length - 1;

    while(low <= high) {
        const mid = low + ((high - low) / 2);

        if (Table2[mid][0] <= against && against <= Table2[mid][1])
            return ReturnValues[mid];

        if (Table2[mid][1] < against)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return 0;
}
export extern(C) bool sidero_utf_lut_isScriptUnkown(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) != 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_Hungarian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010C8000010CB300010CC000010CF300010CFA00010D00";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCoptic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000003E2000003F000002C8000002CF400002CF900002D00";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOl_Chiki(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001C5000001C80";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCyrillic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000040000000485000004870000053000001C8000001C8B00001D2B00001D2C00001D7800001D7900002DE000002E000000A6400000A6A00000FE2E0000FE300001E0300001E06E0001E08F0001E090";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptThaana(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000780000007B2";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptInscriptional_Parthian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010B4000010B5600010B5800010B60";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptNabataean(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000108800001089F000108A7000108B0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOgham(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000016800000169D";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMeroitic_Hieroglyphs(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010980000109A0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMakasar(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011EE000011EF9";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSiddham(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011580000115B6000115B8000115DE";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_Persian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000103A0000103C4000103C8000103D6";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptImperial_Aramaic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010840000108560001085700010860";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMyanmar(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001000000010A00000A9E00000A9FF0000AA600000AA80000116D0000116E4";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptDeseret(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001040000010450";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKaithi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011080000110C3000110CD000110CE";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMedefaidrin(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016E4000016E9B";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKayah_Li(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A9000000A92E0000A92F0000A930";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptHiragana(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00003041000030970000309D000030A00001B0010001B1200001B1320001B1330001B1500001B1530001F2000001F201";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptAhom(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000117000001171B0001171D0001172C0001173000011747";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptDevanagari(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000090000000951000009550000096400000966000009800000A8E00000A90000011B0000011B0A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTibetan(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000F0000000F4800000F4900000F6D00000F7100000F9800000F9900000FBD00000FBE00000FCD00000FCE00000FD500000FD900000FDB";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptNko(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000007C0000007FB000007FD00000800";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBrahmi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000110000001104E00011052000110760001107F00011080";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOsage(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000104B0000104D4000104D8000104FC";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptNushu(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016FE100016FE20001B1700001B2FC";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCuneiform(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000120000001239A000124000001246F00012470000124750001248000012544";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTakri(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011680000116BA000116C0000116CA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptToto(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001E2900001E2AF";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLatin(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptHanunoo(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000172000001735";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLimbu(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000019000000191F000019200000192C000019300000193C00001940000019410000194400001950";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSaurashtra(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A8800000A8C60000A8CE0000A8DA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLisu(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A4D00000A50000011FB000011FB1";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptEgyptian_Hieroglyphs(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000130000001345600013460000143FB";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptElbasan(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001050000010528";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptPalmyrene(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001086000010880";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTagbanwa(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000017600000176D0000176E000017710000177200001774";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_Italic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010300000103240001032D00010330";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCaucasian_Albanian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010530000105640001056F00010570";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMalayalam(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000D0000000D0D00000D0E00000D1100000D1200000D4500000D4600000D4900000D4A00000D5000000D5400000D6400000D6600000D80";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptInherited(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000003000000037000000485000004870000064B000006560000067000000671000009510000095500001AB000001ACF00001CD000001CD300001CD400001CE100001CE200001CE900001CED00001CEE00001CF400001CF500001CF800001CFA00001DC000001E000000200C0000200E000020D0000020F10000302A0000302E000030990000309B0000FE000000FE100000FE200000FE2E000101FD000101FE000102E0000102E10001133B0001133C0001CF000001CF2E0001CF300001CF470001D1670001D16A0001D17B0001D1830001D1850001D18C0001D1AA0001D1AE000E0100000E01F0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSora_Sompeng(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000110D0000110E9000110F0000110FA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLinear_B(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000100000001000C0001000D00010027000100280001003B0001003C0001003E0001003F0001004E000100500001005E00010080000100FB";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptNyiakeng_Puachue_Hmong(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001E1000001E12D0001E1300001E13E0001E1400001E14A0001E14E0001E150";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMeroitic_Cursive(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000109A0000109B8000109BC000109D0000109D200010A00";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptThai(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000E0100000E3B00000E4000000E5C";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMende_Kikakui(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001E8000001E8C50001E8C70001E8D7";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_Sogdian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010F0000010F28";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_Turkic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010C0000010C49";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSamaritan(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000008000000082E000008300000083F";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_South_Arabian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010A6000010A80";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptHanifi_Rohingya(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010D0000010D2800010D3000010D3A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBalinese(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001B0000001B4D00001B4E00001B80";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMandaic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000008400000085C0000085E0000085F";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSignWriting(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001D8000001DA8C0001DA9B0001DAA00001DAA10001DAB0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTifinagh(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00002D3000002D6800002D6F00002D7100002D7F00002D80";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTai_Viet(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000AA800000AAC30000AADB0000AAE0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSyriac(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000007000000070E0000070F0000074B0000074D00000750000008600000086B";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSoyombo(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011A5000011AA3";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptElymaic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010FE000010FF7";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptHatran(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000108E0000108F3000108F4000108F6000108FB00010900";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptChorasmian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010FB000010FCC";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGlagolitic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00002C0000002C600001E0000001E0070001E0080001E0190001E01B0001E0220001E0230001E0250001E0260001E02B";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOsmanya(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000104800001049E000104A0000104AA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLinear_A(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000106000001073700010740000107560001076000010768";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMro(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016A4000016A5F00016A6000016A6A00016A6E00016A70";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptChakma(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011100000111350001113600011148";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptModi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001160000011645000116500001165A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBassa_Vah(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016AD000016AEE00016AF000016AF6";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptHan(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00002E8000002E9A00002E9B00002EF400002F0000002FD600003005000030060000300700003008000030210000302A000030380000303C0000340000004DC000004E000000A0000000F9000000FA6E0000FA700000FADA00016FE200016FE400016FF000016FF2000200000002A6E00002A7000002B73A0002B7400002B81E0002B8200002CEA20002CEB00002EBE10002EBF00002EE5E0002F8000002FA1E000300000003134B00031350000323B0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMultani(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000112800001128700011288000112890001128A0001128E0001128F0001129E0001129F000112AA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBopomofo(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000002EA000002EC0000310500003130000031A0000031C0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptAdlam(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001E9000001E94C0001E9500001E95A0001E95E0001E960";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKhitan_Small_Script(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016FE400016FE500018B0000018CD600018CFF00018D00";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLao(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000E8100000E8300000E8400000E8500000E8600000E8B00000E8C00000EA400000EA500000EA600000EA700000EBE00000EC000000EC500000EC600000EC700000EC800000ECF00000ED000000EDA00000EDC00000EE0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptPsalter_Pahlavi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010B8000010B9200010B9900010B9D00010BA900010BB0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptAnatolian_Hieroglyphs(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001440000014647";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCanadian_Aboriginal(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000140000001680000018B0000018F600011AB000011AC0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCommon(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGothic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000103300001034B";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptYi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A0000000A48D0000A4900000A4C7";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSinhala(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000D8100000D8400000D8500000D9700000D9A00000DB200000DB300000DBC00000DBD00000DBE00000DC000000DC700000DCA00000DCB00000DCF00000DD500000DD600000DD700000DD800000DE000000DE600000DF000000DF200000DF5000111E1000111F5";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptRejang(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A9300000A9540000A95F0000A960";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLepcha(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001C0000001C3800001C3B00001C4A00001C4D00001C50";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTai_Tham(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001A2000001A5F00001A6000001A7D00001A7F00001A8A00001A9000001A9A00001AA000001AAE";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptDives_Akuru(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001190000011907000119090001190A0001190C000119140001191500011917000119180001193600011937000119390001193B00011947000119500001195A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMeetei_Mayek(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000AAE00000AAF70000ABC00000ABEE0000ABF00000ABFA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTirhuta(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011480000114C8000114D0000114DA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMarchen(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011C7000011C9000011C9200011CA800011CA900011CB7";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptWancho(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001E2C00001E2FA0001E2FF0001E300";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptPhoenician(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000109000001091C0001091F00010920";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGurmukhi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000A0100000A0400000A0500000A0B00000A0F00000A1100000A1300000A2900000A2A00000A3100000A3200000A3400000A3500000A3700000A3800000A3A00000A3C00000A3D00000A3E00000A4300000A4700000A4900000A4B00000A4E00000A5100000A5200000A5900000A5D00000A5E00000A5F00000A6600000A77";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKhudawadi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000112B0000112EB000112F0000112FA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKhojki(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011200000112120001121300011242";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptNewa(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000114000001145C0001145D00011462";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptDogra(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000118000001183C";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOriya(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000B0100000B0400000B0500000B0D00000B0F00000B1100000B1300000B2900000B2A00000B3100000B3200000B3400000B3500000B3A00000B3C00000B4500000B4700000B4900000B4B00000B4E00000B5500000B5800000B5C00000B5E00000B5F00000B6400000B6600000B78";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTagalog(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001700000017160000171F00001720";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSundanese(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001B8000001BC000001CC000001CC8";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_Permic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000103500001037B";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptShavian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001045000010480";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLycian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000102800001029D";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMiao(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016F0000016F4B00016F4F00016F8800016F8F00016FA0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTangut(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016FE000016FE100017000000187F80001880000018B0000018D0000018D09";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBengali(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000098000000984000009850000098D0000098F0000099100000993000009A9000009AA000009B1000009B2000009B3000009B6000009BA000009BC000009C5000009C7000009C9000009CB000009CF000009D7000009D8000009DC000009DE000009DF000009E4000009E6000009FF";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptInscriptional_Pahlavi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010B6000010B7300010B7800010B80";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptVithkuqi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000105700001057B0001057C0001058B0001058C00010593000105940001059600010597000105A2000105A3000105B2000105B3000105BA000105BB000105BD";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptArmenian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000053100000557000005590000058B0000058D000005900000FB130000FB18";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptNew_Tai_Lue(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001980000019AC000019B0000019CA000019D0000019DB000019DE000019E0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSogdian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010F3000010F5A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBuhid(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000174000001754";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptManichaean(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010AC000010AE700010AEB00010AF7";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGreek(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBraille(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000280000002900";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptAvestan(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010B0000010B3600010B3900010B40";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptArabic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptJavanese(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A9800000A9CE0000A9D00000A9DA0000A9DE0000A9E0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptLydian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000109200001093A0001093F00010940";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptPau_Cin_Hau(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011AC000011AF9";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCypro_Minoan(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00012F9000012FF3";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBuginese(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001A0000001A1C00001A1E00001A20";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBatak(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001BC000001BF400001BFC00001C00";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptNandinagari(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000119A0000119A8000119AA000119D8000119DA000119E5";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCham(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000AA000000AA370000AA400000AA4E0000AA500000AA5A0000AA5C0000AA60";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGunjala_Gondi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011D6000011D6600011D6700011D6900011D6A00011D8F00011D9000011D9200011D9300011D9900011DA000011DAA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCypriot(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000108000001080600010808000108090001080A0001083600010837000108390001083C0001083D0001083F00010840";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptUgaritic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000103800001039E0001039F000103A0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGeorgian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000010A0000010C6000010C7000010C8000010CD000010CE000010D0000010FB000010FC0000110000001C9000001CBB00001CBD00001CC000002D0000002D2600002D2700002D2800002D2D00002D2E";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSharada(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011180000111E0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTamil(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000B8200000B8400000B8500000B8B00000B8E00000B9100000B9200000B9600000B9900000B9B00000B9C00000B9D00000B9E00000BA000000BA300000BA500000BA800000BAB00000BAE00000BBA00000BBE00000BC300000BC600000BC900000BCA00000BCE00000BD000000BD100000BD700000BD800000BE600000BFB00011FC000011FF200011FFF00012000";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCherokee(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000013A0000013F6000013F8000013FE0000AB700000ABC0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptPahawh_Hmong(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016B0000016B4600016B5000016B5A00016B5B00016B6200016B6300016B7800016B7D00016B90";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSyloti_Nagri(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A8000000A82D";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKharoshthi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010A0000010A0400010A0500010A0700010A0C00010A1400010A1500010A1800010A1900010A3600010A3800010A3B00010A3F00010A4900010A5000010A59";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptZanabazar_Square(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011A0000011A48";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKatakana(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000030A1000030FB000030FD00003100000031F000003200000032D0000032FF00003300000033580000FF660000FF700000FF710000FF9E0001AFF00001AFF40001AFF50001AFFC0001AFFD0001AFFF0001B0000001B0010001B1200001B1230001B1550001B1560001B1640001B168";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTelugu(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000C0000000C0D00000C0E00000C1100000C1200000C2900000C2A00000C3A00000C3C00000C4500000C4600000C4900000C4A00000C4E00000C5500000C5700000C5800000C5B00000C5D00000C5E00000C6000000C6400000C6600000C7000000C7700000C80";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptEthiopic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptVai(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A5000000A62C";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBamum(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A6A00000A6F80001680000016A39";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptHangul(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001100000012000000302E00003030000031310000318F000032000000321F000032600000327F0000A9600000A97D0000AC000000D7A40000D7B00000D7C70000D7CB0000D7FC0000FFA00000FFBF0000FFC20000FFC80000FFCA0000FFD00000FFD20000FFD80000FFDA0000FFDD";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMongolian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001800000018020000180400001805000018060000181A000018200000187900001880000018AB000116600001166D";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_Uyghur(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010F7000010F8A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMahajani(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001115000011177";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKhmer(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00001780000017DE000017E0000017EA000017F0000017FA000019E000001A00";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGrantha(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001130000011304000113050001130D0001130F0001131100011313000113290001132A000113310001133200011334000113350001133A0001133C0001134500011347000113490001134B0001134E000113500001135100011357000113580001135D00011364000113660001136D0001137000011375";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKannada(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000C8000000C8D00000C8E00000C9100000C9200000CA900000CAA00000CB400000CB500000CBA00000CBC00000CC500000CC600000CC900000CCA00000CCE00000CD500000CD700000CDD00000CDF00000CE000000CE400000CE600000CF000000CF100000CF4";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptYezidi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010E8000010EAA00010EAB00010EAE00010EB000010EB2";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOld_North_Arabian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010A8000010AA0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTai_Le(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000019500000196E0000197000001975";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptHebrew(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000591000005C8000005D0000005EB000005EF000005F50000FB1D0000FB370000FB380000FB3D0000FB3E0000FB3F0000FB400000FB420000FB430000FB450000FB460000FB50";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGujarati(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00000A8100000A8400000A8500000A8E00000A8F00000A9200000A9300000AA900000AAA00000AB100000AB200000AB400000AB500000ABA00000ABC00000AC600000AC700000ACA00000ACB00000ACE00000AD000000AD100000AE000000AE400000AE600000AF200000AF900000B00";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTangsa(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016A7000016ABF00016AC000016ACA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptCarian(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000102A0000102D1";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptBhaiksuki(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011C0000011C0900011C0A00011C3700011C3800011C4600011C5000011C6D";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptMasaram_Gondi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011D0000011D0700011D0800011D0A00011D0B00011D3700011D3A00011D3B00011D3C00011D3E00011D3F00011D4800011D5000011D5A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptRunic(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000016A0000016EB000016EE000016F9";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptDuployan(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001BC000001BC6B0001BC700001BC7D0001BC800001BC890001BC900001BC9A0001BC9C0001BCA0";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptWarang_Citi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000118A0000118F3000118FF00011900";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptPhags_Pa(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0000A8400000A878";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKawi(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011F0000011F1100011F1200011F3B00011F3E00011F5B";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptNag_Mundari(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001E4D00001E4FA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGaray(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00010D4000010D6600010D6900010D8600010D8E00010D90";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptGurung_Khema(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000161000001613A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptKirat_Rai(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00016D4000016D7A";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptOl_Onal(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"0001E5D00001E5FB0001E5FF0001E600";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptSunuwar(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"00011BC000011BE200011BF000011BFA";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTodhri(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000105C0000105F4";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
export extern(C) bool sidero_utf_lut_isScriptTulu_Tigalari(dchar against) @trusted nothrow @nogc pure {
    static immutable dchar[] Table = cast(dchar[])x"000113800001138A0001138B0001138C0001138E0001138F00011390000113B6000113B7000113C1000113C2000113C3000113C5000113C6000113C7000113CB000113CC000113D6000113D7000113D9000113E1000113E3";

    ptrdiff_t low, high = Table.length;

    while(low < high) {
        const mid = low + ((high - low) / 2);

        if (against >= Table[mid])
            low = mid + 1;
        else if (against < Table[mid])
            high = mid;
    }

    const pos = high - 1;
    return (pos & 1) == 0;
}
