module sidero.base.internal.unicode.unicodedataCF;

// Generated do not modify
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2None(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xC0 && input <= 0xFB4E) {
        if (input <= 0x30FE) {
            if (input <= 0x233)
                return cast(void*)&LUT_A5591382[cast(size_t)(0 + (input - 0xC0))];
            else if (input >= 0x340 && input <= 0x477)
                return cast(void*)&LUT_A5591382[cast(size_t)(372 + (input - 0x340))];
            else if (input >= 0x4C1 && input <= 0x4F9)
                return cast(void*)&LUT_A5591382[cast(size_t)(684 + (input - 0x4C1))];
            else if (input >= 0x622 && input <= 0x626)
                return cast(void*)&LUT_A5591382[cast(size_t)(741 + (input - 0x622))];
            else if (input >= 0x6C0 && input <= 0x6D3)
                return cast(void*)&LUT_A5591382[cast(size_t)(746 + (input - 0x6C0))];
            else if (input >= 0x929 && input <= 0x95F)
                return cast(void*)&LUT_A5591382[cast(size_t)(766 + (input - 0x929))];
            else if (input >= 0x9CB && input <= 0x9DF)
                return cast(void*)&LUT_A5591382[cast(size_t)(821 + (input - 0x9CB))];
            else if (input >= 0xA33 && input <= 0xA5E)
                return cast(void*)&LUT_A5591382[cast(size_t)(842 + (input - 0xA33))];
            else if (input >= 0xB48 && input <= 0xBCC)
                return cast(void*)&LUT_A5591382[cast(size_t)(886 + (input - 0xB48))];
            else if (input == 0xC48)
                return cast(void*)&LUT_A5591382[cast(size_t)(1019 + (input - 0xC48))];
            else if (input >= 0xCC0 && input <= 0xCCB)
                return cast(void*)&LUT_A5591382[cast(size_t)(1020 + (input - 0xCC0))];
            else if (input >= 0xD4A && input <= 0xD4C)
                return cast(void*)&LUT_A5591382[cast(size_t)(1032 + (input - 0xD4A))];
            else if (input >= 0xDDA && input <= 0xDDE)
                return cast(void*)&LUT_A5591382[cast(size_t)(1035 + (input - 0xDDA))];
            else if (input >= 0xF43 && input <= 0xFB9)
                return cast(void*)&LUT_A5591382[cast(size_t)(1040 + (input - 0xF43))];
            else if (input == 0x1026)
                return cast(void*)&LUT_A5591382[cast(size_t)(1159 + (input - 0x1026))];
            else if (input >= 0x1B06 && input <= 0x1B43)
                return cast(void*)&LUT_A5591382[cast(size_t)(1160 + (input - 0x1B06))];
            else if (input >= 0x1E00 && input <= 0x2001)
                return cast(void*)&LUT_A5591382[cast(size_t)(1222 + (input - 0x1E00))];
            else if (input >= 0x2126 && input <= 0x212B)
                return cast(void*)&LUT_A5591382[cast(size_t)(1736 + (input - 0x2126))];
            else if (input >= 0x219A && input <= 0x232A)
                return cast(void*)&LUT_A5591382[cast(size_t)(1742 + (input - 0x219A))];
            else if (input == 0x2ADC)
                return cast(void*)&LUT_A5591382[cast(size_t)(2143 + (input - 0x2ADC))];
            else if (input >= 0x304C)
                return cast(void*)&LUT_A5591382[cast(size_t)(2144 + (input - 0x304C))];
        } else if (input >= 0xF900) {
            if (input <= 0xFAD9)
                return cast(void*)&LUT_A5591382[cast(size_t)(2323 + (input - 0xF900))];
            else if (input >= 0xFB1D)
                return cast(void*)&LUT_A5591382[cast(size_t)(2797 + (input - 0xFB1D))];
        }
    } else if (input >= 0x1109A && input <= 0x1D1C0) {
        if (input == 0xFFFF) {
            if (input <= 0x110AB)
                return cast(void*)&LUT_A5591382[cast(size_t)(2847 + (input - 0x1109A))];
            else if (input >= 0x1112E && input <= 0x1112F)
                return cast(void*)&LUT_A5591382[cast(size_t)(2865 + (input - 0x1112E))];
            else if (input >= 0x1134B && input <= 0x1134C)
                return cast(void*)&LUT_A5591382[cast(size_t)(2867 + (input - 0x1134B))];
            else if (input >= 0x114BB && input <= 0x114BE)
                return cast(void*)&LUT_A5591382[cast(size_t)(2869 + (input - 0x114BB))];
            else if (input >= 0x115BA && input <= 0x115BB)
                return cast(void*)&LUT_A5591382[cast(size_t)(2873 + (input - 0x115BA))];
            else if (input == 0x11938)
                return cast(void*)&LUT_A5591382[cast(size_t)(2875 + (input - 0x11938))];
        } else if (input >= 0x1D15E) {
            if (input <= 0x1D164)
                return cast(void*)&LUT_A5591382[cast(size_t)(2876 + (input - 0x1D15E))];
            else if (input >= 0x1D1BB)
                return cast(void*)&LUT_A5591382[cast(size_t)(2883 + (input - 0x1D1BB))];
        }
    } else if (input >= 0x2F800 && input <= 0x2FA1D) {
        return cast(void*)&LUT_A5591382[cast(size_t)(2889 + (input - 0x2F800))];
    }
    return null;
}
private {
    static immutable LUT_A5591382 = [SD(24, 26), SD(26, 28), SD(28, 30), SD(30, 32), SD(32, 34), SD(34, 36), SD(0, 0), SD(36, 38), SD(38, 40), SD(40, 42), SD(42, 44), SD(44, 46), SD(46, 48), SD(48, 50), SD(50, 52), SD(52, 54), SD(0, 0), SD(54, 56), SD(56, 58), SD(58, 60), SD(60, 62), SD(62, 64), SD(64, 66), SD(0, 0), SD(0, 0), SD(66, 68), SD(68, 70), SD(70, 72), SD(72, 74), SD(74, 76), SD(0, 0), SD(0, 0), SD(76, 78), SD(78, 80), SD(80, 82), SD(82, 84), SD(84, 86), SD(86, 88), SD(0, 0), SD(88, 90), SD(90, 92), SD(92, 94), SD(94, 96), SD(96, 98), SD(98, 100), SD(100, 102), SD(102, 104), SD(104, 106), SD(0, 0), SD(106, 108), SD(108, 110), SD(110, 112), SD(112, 114), SD(114, 116), SD(116, 118), SD(0, 0), SD(0, 0), SD(118, 120), SD(120, 122), SD(122, 124), SD(124, 126), SD(126, 128), SD(0, 0), SD(128, 130), SD(130, 132), SD(132, 134), SD(134, 136), SD(136, 138), SD(138, 140), SD(140, 142), SD(142, 144), SD(144, 146), SD(146, 148), SD(148, 150), SD(150, 152), SD(152, 154), SD(154, 156), SD(156, 158), SD(158, 160), SD(160, 162), SD(0, 0), SD(0, 0), SD(162, 164), SD(164, 166), SD(166, 168), SD(168, 170), SD(170, 172), SD(172, 174), SD(174, 176), SD(176, 178), SD(178, 180), SD(180, 182), SD(182, 184), SD(184, 186), SD(186, 188), SD(188, 190), SD(190, 192), SD(192, 194), SD(194, 196), SD(196, 198), SD(198, 200), SD(200, 202), SD(0, 0), SD(0, 0), SD(202, 204), SD(204, 206), SD(206, 208), SD(208, 210), SD(210, 212), SD(212, 214), SD(214, 216), SD(216, 218), SD(218, 220), SD(0, 0), SD(0, 0), SD(0, 0), SD(224, 226), SD(226, 228), SD(228, 230), SD(230, 232), SD(0, 0), SD(232, 234), SD(234, 236), SD(236, 238), SD(238, 240), SD(240, 242), SD(242, 244), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(248, 250), SD(250, 252), SD(252, 254), SD(254, 256), SD(256, 258), SD(258, 260), SD(0, 0), SD(0, 0), SD(0, 0), SD(262, 264), SD(264, 266), SD(266, 268), SD(268, 270), SD(270, 272), SD(272, 274), SD(0, 0), SD(0, 0), SD(274, 276), SD(276, 278), SD(278, 280), SD(280, 282), SD(282, 284), SD(284, 286), SD(286, 288), SD(288, 290), SD(290, 292), SD(292, 294), SD(294, 296), SD(296, 298), SD(298, 300), SD(300, 302), SD(302, 304), SD(304, 306), SD(306, 308), SD(308, 310), SD(0, 0), SD(0, 0), SD(310, 312), SD(312, 314), SD(314, 316), SD(316, 318), SD(318, 320), SD(320, 322), SD(322, 324), SD(324, 326), SD(326, 328), SD(328, 330), SD(330, 332), SD(332, 334), SD(334, 336), SD(336, 338), SD(338, 340), SD(340, 342), SD(342, 344), SD(344, 346), SD(346, 348), SD(348, 350), SD(350, 352), SD(352, 354), SD(354, 356), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(357, 359), SD(359, 361), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(361, 363), SD(363, 365), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(383, 385), SD(385, 387), SD(387, 389), SD(389, 391), SD(391, 393), SD(393, 395), SD(395, 397), SD(397, 399), SD(399, 401), SD(401, 403), SD(403, 405), SD(405, 407), SD(407, 409), SD(409, 411), SD(411, 413), SD(413, 415), SD(0, 0), SD(415, 417), SD(417, 419), SD(419, 421), SD(421, 423), SD(423, 425), SD(425, 427), SD(0, 0), SD(0, 0), SD(427, 429), SD(429, 431), SD(431, 433), SD(433, 435), SD(435, 437), SD(437, 439), SD(439, 441), SD(441, 443), SD(443, 445), SD(445, 447), SD(447, 449), SD(0, 0), SD(0, 0), SD(0, 0), SD(455, 457), SD(457, 459), SD(0, 0), SD(0, 0), SD(459, 461), SD(461, 463), SD(463, 465), SD(465, 467), SD(467, 469), SD(469, 471), SD(471, 473), SD(473, 475), SD(475, 477), SD(477, 479), SD(479, 481), SD(481, 483), SD(483, 485), SD(485, 487), SD(487, 489), SD(489, 491), SD(491, 493), SD(493, 495), SD(495, 497), SD(497, 499), SD(499, 501), SD(501, 503), SD(503, 505), SD(505, 507), SD(507, 509), SD(509, 511), SD(511, 513), SD(513, 515), SD(515, 517), SD(517, 519), SD(519, 521), SD(521, 523), SD(523, 525), SD(525, 527), SD(527, 529), SD(529, 531), SD(0, 0), SD(0, 0), SD(531, 533), SD(533, 535), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(535, 537), SD(537, 539), SD(539, 541), SD(541, 543), SD(543, 545), SD(545, 547), SD(547, 549), SD(549, 551), SD(551, 553), SD(553, 555), SD(555, 557), SD(557, 559), SD(559, 561), SD(561, 563), SD(588, 589), SD(589, 590), SD(0, 0), SD(590, 591), SD(591, 593), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(593, 594), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(596, 597), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(597, 599), SD(599, 601), SD(601, 602), SD(602, 604), SD(604, 606), SD(606, 608), SD(0, 0), SD(608, 610), SD(0, 0), SD(610, 612), SD(612, 614), SD(614, 616), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(616, 618), SD(618, 620), SD(620, 622), SD(622, 624), SD(624, 626), SD(626, 628), SD(628, 630), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(630, 632), SD(632, 634), SD(634, 636), SD(636, 638), SD(638, 640), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(643, 645), SD(645, 647), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(655, 657), SD(657, 659), SD(0, 0), SD(659, 661), SD(0, 0), SD(0, 0), SD(0, 0), SD(661, 663), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(663, 665), SD(665, 667), SD(667, 669), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(669, 671), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(671, 673), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(673, 675), SD(675, 677), SD(0, 0), SD(677, 679), SD(0, 0), SD(0, 0), SD(0, 0), SD(679, 681), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(681, 683), SD(683, 685), SD(685, 687), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(687, 689), SD(689, 691), SD(691, 693), SD(693, 695), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(695, 697), SD(697, 699), SD(699, 701), SD(701, 703), SD(0, 0), SD(0, 0), SD(703, 705), SD(705, 707), SD(0, 0), SD(0, 0), SD(707, 709), SD(709, 711), SD(711, 713), SD(713, 715), SD(715, 717), SD(717, 719), SD(0, 0), SD(0, 0), SD(719, 721), SD(721, 723), SD(723, 725), SD(725, 727), SD(727, 729), SD(729, 731), SD(0, 0), SD(0, 0), SD(731, 733), SD(733, 735), SD(735, 737), SD(737, 739), SD(739, 741), SD(741, 743), SD(743, 745), SD(745, 747), SD(747, 749), SD(749, 751), SD(751, 753), SD(753, 755), SD(0, 0), SD(0, 0), SD(755, 757), SD(757, 759), SD(761, 763), SD(763, 765), SD(765, 767), SD(767, 769), SD(769, 771), SD(779, 781), SD(0, 0), SD(781, 783), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(783, 785), SD(785, 787), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(787, 789), SD(0, 0), SD(0, 0), SD(789, 791), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(791, 793), SD(793, 795), SD(795, 797), SD(797, 799), SD(799, 801), SD(801, 803), SD(803, 805), SD(805, 807), SD(807, 809), SD(809, 811), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(811, 813), SD(813, 815), SD(0, 0), SD(815, 817), SD(817, 819), SD(0, 0), SD(0, 0), SD(819, 821), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(821, 823), SD(823, 825), SD(825, 827), SD(0, 0), SD(0, 0), SD(827, 829), SD(829, 831), SD(0, 0), SD(0, 0), SD(831, 833), SD(833, 835), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(835, 837), SD(837, 839), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(839, 841), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(841, 843), SD(843, 845), SD(845, 847), SD(847, 849), SD(849, 851), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(851, 853), SD(853, 855), SD(0, 0), SD(855, 857), SD(857, 859), SD(859, 861), SD(861, 863), SD(863, 865), SD(865, 867), SD(0, 0), SD(867, 869), SD(869, 871), SD(871, 873), SD(882, 884), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(884, 886), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(886, 888), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(888, 890), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(890, 892), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(892, 894), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(894, 896), SD(0, 0), SD(896, 898), SD(898, 900), SD(0, 0), SD(902, 904), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(906, 908), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(908, 910), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(910, 912), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(912, 914), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(914, 916), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(916, 918), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(918, 920), SD(920, 922), SD(923, 925), SD(0, 0), SD(925, 927), SD(0, 0), SD(927, 929), SD(0, 0), SD(929, 931), SD(0, 0), SD(931, 933), SD(0, 0), SD(0, 0), SD(0, 0), SD(933, 935), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(935, 937), SD(0, 0), SD(937, 939), SD(0, 0), SD(0, 0), SD(939, 941), SD(941, 943), SD(0, 0), SD(943, 945), SD(1029, 1031), SD(1031, 1033), SD(1033, 1035), SD(1035, 1037), SD(1037, 1039), SD(1039, 1041), SD(1041, 1043), SD(1043, 1045), SD(1045, 1047), SD(1047, 1049), SD(1049, 1051), SD(1051, 1053), SD(1053, 1055), SD(1055, 1057), SD(1057, 1059), SD(1059, 1061), SD(1061, 1063), SD(1063, 1065), SD(1065, 1067), SD(1067, 1069), SD(1069, 1071), SD(1071, 1073), SD(1073, 1075), SD(1075, 1077), SD(1077, 1079), SD(1079, 1081), SD(1081, 1083), SD(1083, 1085), SD(1085, 1087), SD(1087, 1089), SD(1089, 1091), SD(1091, 1093), SD(1093, 1095), SD(1095, 1097), SD(1097, 1099), SD(1099, 1101), SD(1101, 1103), SD(1103, 1105), SD(1105, 1107), SD(1107, 1109), SD(1109, 1111), SD(1111, 1113), SD(1113, 1115), SD(1115, 1117), SD(1117, 1119), SD(1119, 1121), SD(1121, 1123), SD(1123, 1125), SD(1125, 1127), SD(1127, 1129), SD(1129, 1131), SD(1131, 1133), SD(1133, 1135), SD(1135, 1137), SD(1137, 1139), SD(1139, 1141), SD(1141, 1143), SD(1143, 1145), SD(1145, 1147), SD(1147, 1149), SD(1149, 1151), SD(1151, 1153), SD(1153, 1155), SD(1155, 1157), SD(1157, 1159), SD(1159, 1161), SD(1161, 1163), SD(1163, 1165), SD(1165, 1167), SD(1167, 1169), SD(1169, 1171), SD(1171, 1173), SD(1173, 1175), SD(1175, 1177), SD(1177, 1179), SD(1179, 1181), SD(1181, 1183), SD(1183, 1185), SD(1185, 1187), SD(1187, 1189), SD(1189, 1191), SD(1191, 1193), SD(1193, 1195), SD(1195, 1197), SD(1197, 1199), SD(1199, 1201), SD(1201, 1203), SD(1203, 1205), SD(1205, 1207), SD(1207, 1209), SD(1209, 1211), SD(1211, 1213), SD(1213, 1215), SD(1215, 1217), SD(1217, 1219), SD(1219, 1221), SD(1221, 1223), SD(1223, 1225), SD(1225, 1227), SD(1227, 1229), SD(1229, 1231), SD(1231, 1233), SD(1233, 1235), SD(1235, 1237), SD(1237, 1239), SD(1239, 1241), SD(1241, 1243), SD(1243, 1245), SD(1245, 1247), SD(1247, 1249), SD(1249, 1251), SD(1251, 1253), SD(1253, 1255), SD(1255, 1257), SD(1257, 1259), SD(1259, 1261), SD(1261, 1263), SD(1263, 1265), SD(1265, 1267), SD(1267, 1269), SD(1269, 1271), SD(1271, 1273), SD(1273, 1275), SD(1275, 1277), SD(1277, 1279), SD(1279, 1281), SD(1281, 1283), SD(1283, 1285), SD(1285, 1287), SD(1287, 1289), SD(1289, 1291), SD(1291, 1293), SD(1293, 1295), SD(1295, 1297), SD(1297, 1299), SD(1299, 1301), SD(1301, 1303), SD(1303, 1305), SD(1305, 1307), SD(1307, 1309), SD(1309, 1311), SD(1311, 1313), SD(1313, 1315), SD(1315, 1317), SD(1317, 1319), SD(1319, 1321), SD(1321, 1323), SD(1323, 1325), SD(1325, 1327), SD(1327, 1329), SD(1329, 1331), SD(1331, 1333), SD(1333, 1335), SD(1335, 1337), SD(0, 0), SD(1339, 1341), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1341, 1343), SD(1343, 1345), SD(1345, 1347), SD(1347, 1349), SD(1349, 1351), SD(1351, 1353), SD(1353, 1355), SD(1355, 1357), SD(1357, 1359), SD(1359, 1361), SD(1361, 1363), SD(1363, 1365), SD(1365, 1367), SD(1367, 1369), SD(1369, 1371), SD(1371, 1373), SD(1373, 1375), SD(1375, 1377), SD(1377, 1379), SD(1379, 1381), SD(1381, 1383), SD(1383, 1385), SD(1385, 1387), SD(1387, 1389), SD(1389, 1391), SD(1391, 1393), SD(1393, 1395), SD(1395, 1397), SD(1397, 1399), SD(1399, 1401), SD(1401, 1403), SD(1403, 1405), SD(1405, 1407), SD(1407, 1409), SD(1409, 1411), SD(1411, 1413), SD(1413, 1415), SD(1415, 1417), SD(1417, 1419), SD(1419, 1421), SD(1421, 1423), SD(1423, 1425), SD(1425, 1427), SD(1427, 1429), SD(1429, 1431), SD(1431, 1433), SD(1433, 1435), SD(1435, 1437), SD(1437, 1439), SD(1439, 1441), SD(1441, 1443), SD(1443, 1445), SD(1445, 1447), SD(1447, 1449), SD(1449, 1451), SD(1451, 1453), SD(1453, 1455), SD(1455, 1457), SD(1457, 1459), SD(1459, 1461), SD(1461, 1463), SD(1463, 1465), SD(1465, 1467), SD(1467, 1469), SD(1469, 1471), SD(1471, 1473), SD(1473, 1475), SD(1475, 1477), SD(1477, 1479), SD(1479, 1481), SD(1481, 1483), SD(1483, 1485), SD(1485, 1487), SD(1487, 1489), SD(1489, 1491), SD(1491, 1493), SD(1493, 1495), SD(1495, 1497), SD(1497, 1499), SD(1499, 1501), SD(1501, 1503), SD(1503, 1505), SD(1505, 1507), SD(1507, 1509), SD(1509, 1511), SD(1511, 1513), SD(1513, 1515), SD(1515, 1517), SD(1517, 1519), SD(1519, 1521), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1521, 1523), SD(1523, 1525), SD(1525, 1527), SD(1527, 1529), SD(1529, 1531), SD(1531, 1533), SD(1533, 1535), SD(1535, 1537), SD(1537, 1539), SD(1539, 1541), SD(1541, 1543), SD(1543, 1545), SD(1545, 1547), SD(1547, 1549), SD(1549, 1551), SD(1551, 1553), SD(1553, 1555), SD(1555, 1557), SD(1557, 1559), SD(1559, 1561), SD(1561, 1563), SD(1563, 1565), SD(0, 0), SD(0, 0), SD(1565, 1567), SD(1567, 1569), SD(1569, 1571), SD(1571, 1573), SD(1573, 1575), SD(1575, 1577), SD(0, 0), SD(0, 0), SD(1577, 1579), SD(1579, 1581), SD(1581, 1583), SD(1583, 1585), SD(1585, 1587), SD(1587, 1589), SD(1589, 1591), SD(1591, 1593), SD(1593, 1595), SD(1595, 1597), SD(1597, 1599), SD(1599, 1601), SD(1601, 1603), SD(1603, 1605), SD(1605, 1607), SD(1607, 1609), SD(1609, 1611), SD(1611, 1613), SD(1613, 1615), SD(1615, 1617), SD(1617, 1619), SD(1619, 1621), SD(1621, 1623), SD(1623, 1625), SD(1625, 1627), SD(1627, 1629), SD(1629, 1631), SD(1631, 1633), SD(1633, 1635), SD(1635, 1637), SD(1637, 1639), SD(1639, 1641), SD(1641, 1643), SD(1643, 1645), SD(1645, 1647), SD(1647, 1649), SD(1649, 1651), SD(1651, 1653), SD(0, 0), SD(0, 0), SD(1653, 1655), SD(1655, 1657), SD(1657, 1659), SD(1659, 1661), SD(1661, 1663), SD(1663, 1665), SD(0, 0), SD(0, 0), SD(1665, 1667), SD(1667, 1669), SD(1669, 1671), SD(1671, 1673), SD(1673, 1675), SD(1675, 1677), SD(1677, 1679), SD(1679, 1681), SD(0, 0), SD(1681, 1683), SD(0, 0), SD(1683, 1685), SD(0, 0), SD(1685, 1687), SD(0, 0), SD(1687, 1689), SD(1689, 1691), SD(1691, 1693), SD(1693, 1695), SD(1695, 1697), SD(1697, 1699), SD(1699, 1701), SD(1701, 1703), SD(1703, 1705), SD(1705, 1707), SD(1707, 1709), SD(1709, 1711), SD(1711, 1713), SD(1713, 1715), SD(1715, 1717), SD(1717, 1719), SD(1719, 1721), SD(1721, 1723), SD(1723, 1724), SD(1724, 1726), SD(1726, 1727), SD(1727, 1729), SD(1729, 1730), SD(1730, 1732), SD(1732, 1733), SD(1733, 1735), SD(1735, 1736), SD(1736, 1738), SD(1738, 1739), SD(1739, 1741), SD(1741, 1742), SD(0, 0), SD(0, 0), SD(1742, 1744), SD(1744, 1746), SD(1746, 1748), SD(1748, 1750), SD(1750, 1752), SD(1752, 1754), SD(1754, 1756), SD(1756, 1758), SD(1758, 1760), SD(1760, 1762), SD(1762, 1764), SD(1764, 1766), SD(1766, 1768), SD(1768, 1770), SD(1770, 1772), SD(1772, 1774), SD(1774, 1776), SD(1776, 1778), SD(1778, 1780), SD(1780, 1782), SD(1782, 1784), SD(1784, 1786), SD(1786, 1788), SD(1788, 1790), SD(1790, 1792), SD(1792, 1794), SD(1794, 1796), SD(1796, 1798), SD(1798, 1800), SD(1800, 1802), SD(1802, 1804), SD(1804, 1806), SD(1806, 1808), SD(1808, 1810), SD(1810, 1812), SD(1812, 1814), SD(1814, 1816), SD(1816, 1818), SD(1818, 1820), SD(1820, 1822), SD(1822, 1824), SD(1824, 1826), SD(1826, 1828), SD(1828, 1830), SD(1830, 1832), SD(1832, 1834), SD(1834, 1836), SD(1836, 1838), SD(1838, 1840), SD(1840, 1842), SD(1842, 1844), SD(1844, 1846), SD(1846, 1848), SD(0, 0), SD(1848, 1850), SD(1850, 1852), SD(1852, 1854), SD(1854, 1856), SD(1856, 1858), SD(1858, 1859), SD(1859, 1861), SD(0, 0), SD(1863, 1864), SD(0, 0), SD(0, 0), SD(1866, 1868), SD(1868, 1870), SD(1870, 1872), SD(1872, 1874), SD(0, 0), SD(1874, 1876), SD(1876, 1878), SD(1878, 1880), SD(1880, 1881), SD(1881, 1883), SD(1883, 1884), SD(1884, 1886), SD(1886, 1888), SD(1888, 1890), SD(1890, 1892), SD(1892, 1894), SD(1894, 1896), SD(1896, 1898), SD(1898, 1899), SD(0, 0), SD(0, 0), SD(1899, 1901), SD(1901, 1903), SD(1903, 1905), SD(1905, 1907), SD(1907, 1909), SD(1909, 1910), SD(0, 0), SD(1910, 1912), SD(1912, 1914), SD(1914, 1916), SD(1916, 1918), SD(1918, 1920), SD(1920, 1922), SD(1922, 1923), SD(1923, 1925), SD(1925, 1927), SD(1927, 1929), SD(1929, 1931), SD(1931, 1933), SD(1933, 1935), SD(1935, 1937), SD(1937, 1938), SD(1938, 1940), SD(1940, 1942), SD(1942, 1943), SD(1943, 1944), SD(0, 0), SD(0, 0), SD(1944, 1946), SD(1946, 1948), SD(1948, 1950), SD(0, 0), SD(1950, 1952), SD(1952, 1954), SD(1954, 1956), SD(1956, 1957), SD(1957, 1959), SD(1959, 1960), SD(1960, 1962), SD(1962, 1963), SD(0, 0), SD(0, 0), SD(1965, 1966), SD(1966, 1967), SD(2045, 2046), SD(0, 0), SD(0, 0), SD(0, 0), SD(955, 956), SD(2046, 2047), SD(2157, 2159), SD(2159, 2161), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2161, 2163), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2163, 2165), SD(2165, 2167), SD(2167, 2169), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2169, 2171), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2171, 2173), SD(0, 0), SD(0, 0), SD(2173, 2175), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2175, 2177), SD(0, 0), SD(2177, 2179), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2189, 2191), SD(0, 0), SD(0, 0), SD(2191, 2193), SD(0, 0), SD(0, 0), SD(2193, 2195), SD(0, 0), SD(2195, 2197), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2197, 2199), SD(0, 0), SD(2199, 2201), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2201, 2203), SD(2203, 2205), SD(2205, 2207), SD(2207, 2209), SD(2209, 2211), SD(0, 0), SD(0, 0), SD(2211, 2213), SD(2213, 2215), SD(0, 0), SD(0, 0), SD(2215, 2217), SD(2217, 2219), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2219, 2221), SD(2221, 2223), SD(0, 0), SD(0, 0), SD(2223, 2225), SD(2225, 2227), SD(0, 0), SD(0, 0), SD(2227, 2229), SD(2229, 2231), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2231, 2233), SD(2233, 2235), SD(2235, 2237), SD(2237, 2239), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2239, 2241), SD(2241, 2243), SD(2243, 2245), SD(2245, 2247), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2247, 2249), SD(2249, 2251), SD(2251, 2253), SD(2253, 2255), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2255, 2256), SD(2256, 2257), SD(2494, 2496), SD(2716, 2718), SD(0, 0), SD(2718, 2720), SD(0, 0), SD(2720, 2722), SD(0, 0), SD(2722, 2724), SD(0, 0), SD(2724, 2726), SD(0, 0), SD(2726, 2728), SD(0, 0), SD(2728, 2730), SD(0, 0), SD(2730, 2732), SD(0, 0), SD(2732, 2734), SD(0, 0), SD(2734, 2736), SD(0, 0), SD(2736, 2738), SD(0, 0), SD(2738, 2740), SD(0, 0), SD(0, 0), SD(2740, 2742), SD(0, 0), SD(2742, 2744), SD(0, 0), SD(2744, 2746), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2746, 2748), SD(2748, 2750), SD(0, 0), SD(2750, 2752), SD(2752, 2754), SD(0, 0), SD(2754, 2756), SD(2756, 2758), SD(0, 0), SD(2758, 2760), SD(2760, 2762), SD(0, 0), SD(2762, 2764), SD(2764, 2766), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2766, 2768), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2772, 2774), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2776, 2778), SD(0, 0), SD(2778, 2780), SD(0, 0), SD(2780, 2782), SD(0, 0), SD(2782, 2784), SD(0, 0), SD(2784, 2786), SD(0, 0), SD(2786, 2788), SD(0, 0), SD(2788, 2790), SD(0, 0), SD(2790, 2792), SD(0, 0), SD(2792, 2794), SD(0, 0), SD(2794, 2796), SD(0, 0), SD(2796, 2798), SD(0, 0), SD(2798, 2800), SD(0, 0), SD(0, 0), SD(2800, 2802), SD(0, 0), SD(2802, 2804), SD(0, 0), SD(2804, 2806), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2806, 2808), SD(2808, 2810), SD(0, 0), SD(2810, 2812), SD(2812, 2814), SD(0, 0), SD(2814, 2816), SD(2816, 2818), SD(0, 0), SD(2818, 2820), SD(2820, 2822), SD(0, 0), SD(2822, 2824), SD(2824, 2826), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2826, 2828), SD(0, 0), SD(0, 0), SD(2828, 2830), SD(2830, 2832), SD(2832, 2834), SD(2834, 2836), SD(0, 0), SD(0, 0), SD(0, 0), SD(2836, 2838), SD(4122, 4123), SD(4123, 4124), SD(2657, 2658), SD(4124, 4125), SD(4125, 4126), SD(4126, 4127), SD(4127, 4128), SD(2711, 2712), SD(2711, 2712), SD(4128, 4129), SD(2665, 2666), SD(4129, 4130), SD(4130, 4131), SD(4131, 4132), SD(4132, 4133), SD(4133, 4134), SD(4134, 4135), SD(4135, 4136), SD(4136, 4137), SD(4137, 4138), SD(4138, 4139), SD(4139, 4140), SD(4140, 4141), SD(4141, 4142), SD(4142, 4143), SD(4143, 4144), SD(4144, 4145), SD(4145, 4146), SD(4146, 4147), SD(4147, 4148), SD(4148, 4149), SD(4149, 4150), SD(4150, 4151), SD(4151, 4152), SD(4152, 4153), SD(4153, 4154), SD(4154, 4155), SD(4155, 4156), SD(4156, 4157), SD(4157, 4158), SD(4158, 4159), SD(4159, 4160), SD(4160, 4161), SD(4161, 4162), SD(4162, 4163), SD(4163, 4164), SD(4164, 4165), SD(4165, 4166), SD(4166, 4167), SD(4167, 4168), SD(4168, 4169), SD(4169, 4170), SD(2623, 2624), SD(4170, 4171), SD(4171, 4172), SD(4172, 4173), SD(4173, 4174), SD(4174, 4175), SD(4175, 4176), SD(4176, 4177), SD(4177, 4178), SD(4178, 4179), SD(4179, 4180), SD(4180, 4181), SD(2696, 2697), SD(4181, 4182), SD(4182, 4183), SD(4183, 4184), SD(4184, 4185), SD(4185, 4186), SD(4186, 4187), SD(4187, 4188), SD(4188, 4189), SD(4189, 4190), SD(4190, 4191), SD(4191, 4192), SD(4192, 4193), SD(4193, 4194), SD(4194, 4195), SD(4195, 4196), SD(4196, 4197), SD(4197, 4198), SD(4198, 4199), SD(4199, 4200), SD(4200, 4201), SD(4201, 4202), SD(4202, 4203), SD(4203, 4204), SD(4204, 4205), SD(4205, 4206), SD(4206, 4207), SD(4207, 4208), SD(4138, 4139), SD(4208, 4209), SD(4209, 4210), SD(4210, 4211), SD(4211, 4212), SD(4212, 4213), SD(4213, 4214), SD(4214, 4215), SD(4215, 4216), SD(4216, 4217), SD(4217, 4218), SD(4218, 4219), SD(4219, 4220), SD(4220, 4221), SD(4221, 4222), SD(4222, 4223), SD(4223, 4224), SD(4224, 4225), SD(4225, 4226), SD(4226, 4227), SD(4227, 4228), SD(2659, 2660), SD(4228, 4229), SD(4229, 4230), SD(4230, 4231), SD(4231, 4232), SD(4232, 4233), SD(4233, 4234), SD(4234, 4235), SD(4235, 4236), SD(4236, 4237), SD(4237, 4238), SD(4238, 4239), SD(4239, 4240), SD(4240, 4241), SD(4241, 4242), SD(4242, 4243), SD(2536, 2537), SD(4243, 4244), SD(4244, 4245), SD(4245, 4246), SD(4246, 4247), SD(4247, 4248), SD(4248, 4249), SD(4249, 4250), SD(4250, 4251), SD(2517, 2518), SD(4251, 4252), SD(4252, 4253), SD(4253, 4254), SD(4254, 4255), SD(4255, 4256), SD(4256, 4257), SD(4257, 4258), SD(4258, 4259), SD(4259, 4260), SD(4260, 4261), SD(4261, 4262), SD(4262, 4263), SD(4263, 4264), SD(4264, 4265), SD(4265, 4266), SD(4266, 4267), SD(4267, 4268), SD(4268, 4269), SD(4269, 4270), SD(4270, 4271), SD(4271, 4272), SD(4272, 4273), SD(4226, 4227), SD(4273, 4274), SD(4274, 4275), SD(4275, 4276), SD(4276, 4277), SD(4277, 4278), SD(4278, 4279), SD(4279, 4280), SD(4280, 4281), SD(4210, 4211), SD(4281, 4282), SD(4282, 4283), SD(4283, 4284), SD(4284, 4285), SD(4285, 4286), SD(4286, 4287), SD(4287, 4288), SD(4288, 4289), SD(4289, 4290), SD(4290, 4291), SD(4291, 4292), SD(4292, 4293), SD(4293, 4294), SD(4294, 4295), SD(4295, 4296), SD(4296, 4297), SD(4297, 4298), SD(4298, 4299), SD(4299, 4300), SD(4300, 4301), SD(4138, 4139), SD(4301, 4302), SD(4302, 4303), SD(4303, 4304), SD(4304, 4305), SD(2710, 2711), SD(4305, 4306), SD(4306, 4307), SD(4307, 4308), SD(4308, 4309), SD(4309, 4310), SD(4310, 4311), SD(4311, 4312), SD(4312, 4313), SD(4313, 4314), SD(4314, 4315), SD(4315, 4316), SD(4316, 4317), SD(3243, 3244), SD(4317, 4318), SD(4318, 4319), SD(4319, 4320), SD(4320, 4321), SD(4321, 4322), SD(4322, 4323), SD(4323, 4324), SD(4324, 4325), SD(4325, 4326), SD(4212, 4213), SD(4326, 4327), SD(4327, 4328), SD(4328, 4329), SD(4329, 4330), SD(4330, 4331), SD(4331, 4332), SD(4332, 4333), SD(4333, 4334), SD(4334, 4335), SD(4335, 4336), SD(4336, 4337), SD(4337, 4338), SD(4338, 4339), SD(2664, 2665), SD(4339, 4340), SD(4340, 4341), SD(4341, 4342), SD(4342, 4343), SD(4343, 4344), SD(4344, 4345), SD(4345, 4346), SD(4346, 4347), SD(4347, 4348), SD(4348, 4349), SD(4349, 4350), SD(4350, 4351), SD(4351, 4352), SD(2615, 2616), SD(4352, 4353), SD(4353, 4354), SD(4354, 4355), SD(4355, 4356), SD(4356, 4357), SD(4357, 4358), SD(4358, 4359), SD(4359, 4360), SD(4360, 4361), SD(4361, 4362), SD(4362, 4363), SD(4363, 4364), SD(4364, 4365), SD(4365, 4366), SD(4366, 4367), SD(4367, 4368), SD(2642, 2643), SD(4368, 4369), SD(2645, 2646), SD(4369, 4370), SD(4370, 4371), SD(4371, 4372), SD(0, 0), SD(0, 0), SD(4372, 4373), SD(0, 0), SD(4373, 4374), SD(0, 0), SD(0, 0), SD(4374, 4375), SD(4375, 4376), SD(4376, 4377), SD(4377, 4378), SD(4378, 4379), SD(4379, 4380), SD(4380, 4381), SD(4381, 4382), SD(4382, 4383), SD(2622, 2623), SD(0, 0), SD(4383, 4384), SD(0, 0), SD(4384, 4385), SD(0, 0), SD(0, 0), SD(4385, 4386), SD(4386, 4387), SD(0, 0), SD(0, 0), SD(0, 0), SD(4387, 4388), SD(4388, 4389), SD(4389, 4390), SD(4390, 4391), SD(4391, 4392), SD(4392, 4393), SD(4393, 4394), SD(4394, 4395), SD(4395, 4396), SD(4396, 4397), SD(4397, 4398), SD(4398, 4399), SD(4399, 4400), SD(4400, 4401), SD(4401, 4402), SD(4402, 4403), SD(4403, 4404), SD(4404, 4405), SD(2543, 2544), SD(4405, 4406), SD(4406, 4407), SD(4407, 4408), SD(4408, 4409), SD(4409, 4410), SD(4410, 4411), SD(4411, 4412), SD(4412, 4413), SD(4413, 4414), SD(4414, 4415), SD(4415, 4416), SD(4416, 4417), SD(4417, 4418), SD(4418, 4419), SD(4419, 4420), SD(3248, 3249), SD(4420, 4421), SD(4421, 4422), SD(4422, 4423), SD(4423, 4424), SD(3252, 3253), SD(4424, 4425), SD(4425, 4426), SD(4426, 4427), SD(4427, 4428), SD(4428, 4429), SD(4262, 4263), SD(4429, 4430), SD(4430, 4431), SD(4431, 4432), SD(4432, 4433), SD(4433, 4434), SD(4434, 4435), SD(4434, 4435), SD(4435, 4436), SD(4436, 4437), SD(4437, 4438), SD(4438, 4439), SD(4439, 4440), SD(4440, 4441), SD(4441, 4442), SD(4442, 4443), SD(4385, 4386), SD(4443, 4444), SD(4444, 4445), SD(4445, 4446), SD(4446, 4447), SD(4447, 4448), SD(4448, 4449), SD(0, 0), SD(0, 0), SD(4449, 4450), SD(4450, 4451), SD(4451, 4452), SD(4452, 4453), SD(4453, 4454), SD(4454, 4455), SD(4455, 4456), SD(4456, 4457), SD(4399, 4400), SD(4457, 4458), SD(4458, 4459), SD(4459, 4460), SD(4372, 4373), SD(4460, 4461), SD(4461, 4462), SD(4462, 4463), SD(4463, 4464), SD(4464, 4465), SD(4465, 4466), SD(4466, 4467), SD(4467, 4468), SD(4468, 4469), SD(4469, 4470), SD(4470, 4471), SD(4471, 4472), SD(4407, 4408), SD(4472, 4473), SD(4408, 4409), SD(4473, 4474), SD(4474, 4475), SD(4475, 4476), SD(4476, 4477), SD(4477, 4478), SD(4373, 4374), SD(4159, 4160), SD(4478, 4479), SD(4479, 4480), SD(2576, 2577), SD(4227, 4228), SD(4310, 4311), SD(4480, 4481), SD(4481, 4482), SD(4415, 4416), SD(4482, 4483), SD(4416, 4417), SD(4483, 4484), SD(4484, 4485), SD(4485, 4486), SD(4375, 4376), SD(4486, 4487), SD(4487, 4488), SD(4488, 4489), SD(4489, 4490), SD(4490, 4491), SD(4376, 4377), SD(4491, 4492), SD(4492, 4493), SD(4493, 4494), SD(4494, 4495), SD(4495, 4496), SD(4496, 4497), SD(4428, 4429), SD(4497, 4498), SD(4498, 4499), SD(4262, 4263), SD(4499, 4500), SD(4432, 4433), SD(4500, 4501), SD(4501, 4502), SD(4502, 4503), SD(4503, 4504), SD(4504, 4505), SD(4437, 4438), SD(4505, 4506), SD(4384, 4385), SD(4506, 4507), SD(4438, 4439), SD(4208, 4209), SD(4507, 4508), SD(4439, 4440), SD(4508, 4509), SD(4441, 4442), SD(4509, 4510), SD(4510, 4511), SD(4511, 4512), SD(4512, 4513), SD(4513, 4514), SD(4443, 4444), SD(4381, 4382), SD(4514, 4515), SD(4444, 4445), SD(4515, 4516), SD(4445, 4446), SD(4516, 4517), SD(2711, 2712), SD(4517, 4518), SD(4518, 4519), SD(4519, 4520), SD(4520, 4521), SD(4521, 4522), SD(4522, 4523), SD(4523, 4524), SD(4524, 4525), SD(4525, 4526), SD(4526, 4527), SD(4527, 4528), SD(4554, 4556), SD(0, 0), SD(4556, 4558), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4565, 4567), SD(4567, 4569), SD(4569, 4571), SD(4571, 4573), SD(4573, 4575), SD(4575, 4577), SD(4577, 4579), SD(4579, 4581), SD(4581, 4583), SD(4583, 4585), SD(4585, 4587), SD(4587, 4589), SD(4589, 4591), SD(0, 0), SD(4591, 4593), SD(4593, 4595), SD(4595, 4597), SD(4597, 4599), SD(4599, 4601), SD(0, 0), SD(4601, 4603), SD(0, 0), SD(4603, 4605), SD(4605, 4607), SD(0, 0), SD(4607, 4609), SD(4609, 4611), SD(0, 0), SD(4611, 4613), SD(4613, 4615), SD(4615, 4617), SD(4617, 4619), SD(4619, 4621), SD(4621, 4623), SD(4623, 4625), SD(4625, 4627), SD(4627, 4629), SD(5621, 5623), SD(0, 0), SD(5623, 5625), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5625, 5627), SD(5627, 5629), SD(5629, 5631), SD(5631, 5633), SD(5633, 5635), SD(5635, 5637), SD(5637, 5639), SD(0, 0), SD(5639, 5641), SD(5641, 5643), SD(5643, 5645), SD(5645, 5647), SD(5647, 5649), SD(5649, 5651), SD(5651, 5653), SD(5653, 5655), SD(5655, 5657), SD(5657, 5659), SD(5659, 5661), SD(5661, 5663), SD(5663, 5665), SD(5665, 5667), SD(5667, 5669), SD(5669, 5671), SD(5671, 5673), SD(5909, 5910), SD(5910, 5911), SD(5911, 5912), SD(5912, 5913), SD(5913, 5914), SD(4393, 4394), SD(5914, 5915), SD(5915, 5916), SD(5916, 5917), SD(5917, 5918), SD(4394, 4395), SD(5918, 5919), SD(5919, 5920), SD(5920, 5921), SD(4395, 4396), SD(5921, 5922), SD(5922, 5923), SD(5923, 5924), SD(5924, 5925), SD(5925, 5926), SD(5926, 5927), SD(5859, 5860), SD(5927, 5928), SD(5928, 5929), SD(5929, 5930), SD(5930, 5931), SD(5931, 5932), SD(4450, 4451), SD(5932, 5933), SD(2515, 2516), SD(5933, 5934), SD(5934, 5935), SD(5935, 5936), SD(5936, 5937), SD(5877, 5878), SD(5937, 5938), SD(5938, 5939), SD(4455, 4456), SD(4396, 4397), SD(4397, 4398), SD(4456, 4457), SD(5939, 5940), SD(5940, 5941), SD(4214, 4215), SD(5941, 5942), SD(4398, 4399), SD(5942, 5943), SD(5943, 5944), SD(5944, 5945), SD(5945, 5946), SD(5945, 5946), SD(5945, 5946), SD(5946, 5947), SD(5947, 5948), SD(5948, 5949), SD(5949, 5950), SD(5950, 5951), SD(5951, 5952), SD(5952, 5953), SD(5953, 5954), SD(5954, 5955), SD(5955, 5956), SD(5956, 5957), SD(5957, 5958), SD(5958, 5959), SD(5959, 5960), SD(5960, 5961), SD(5961, 5962), SD(5962, 5963), SD(5963, 5964), SD(5963, 5964), SD(4458, 4459), SD(5964, 5965), SD(5965, 5966), SD(5966, 5967), SD(5967, 5968), SD(4400, 4401), SD(5968, 5969), SD(5969, 5970), SD(5970, 5971), SD(4360, 4361), SD(5971, 5972), SD(5972, 5973), SD(5973, 5974), SD(5974, 5975), SD(5975, 5976), SD(5976, 5977), SD(5977, 5978), SD(5978, 5979), SD(5979, 5980), SD(5980, 5981), SD(5981, 5982), SD(5982, 5983), SD(5852, 5853), SD(5983, 5984), SD(5984, 5985), SD(5985, 5986), SD(5986, 5987), SD(5987, 5988), SD(5988, 5989), SD(5989, 5990), SD(5990, 5991), SD(5991, 5992), SD(5992, 5993), SD(5993, 5994), SD(5994, 5995), SD(5995, 5996), SD(5995, 5996), SD(5996, 5997), SD(5997, 5998), SD(5998, 5999), SD(4210, 4211), SD(5999, 6000), SD(6000, 6001), SD(6001, 6002), SD(6002, 6003), SD(6003, 6004), SD(2541, 2542), SD(6004, 6005), SD(6005, 6006), SD(2543, 2544), SD(6006, 6007), SD(6007, 6008), SD(6008, 6009), SD(6009, 6010), SD(6010, 6011), SD(6011, 6012), SD(6012, 6013), SD(6013, 6014), SD(6014, 6015), SD(6015, 6016), SD(6016, 6017), SD(6017, 6018), SD(6018, 6019), SD(6019, 6020), SD(6020, 6021), SD(6021, 6022), SD(6022, 6023), SD(6023, 6024), SD(6024, 6025), SD(6025, 6026), SD(6026, 6027), SD(4158, 4159), SD(6027, 6028), SD(2553, 2554), SD(6028, 6029), SD(6028, 6029), SD(6029, 6030), SD(6030, 6031), SD(6030, 6031), SD(6031, 6032), SD(6032, 6033), SD(6033, 6034), SD(6034, 6035), SD(6035, 6036), SD(6036, 6037), SD(6037, 6038), SD(6038, 6039), SD(6039, 6040), SD(6040, 6041), SD(6041, 6042), SD(6042, 6043), SD(6043, 6044), SD(4405, 4406), SD(6044, 6045), SD(6045, 6046), SD(6046, 6047), SD(6047, 6048), SD(4470, 4471), SD(6047, 6048), SD(6048, 6049), SD(4407, 4408), SD(6049, 6050), SD(6050, 6051), SD(6051, 6052), SD(6052, 6053), SD(4408, 4409), SD(4131, 4132), SD(6053, 6054), SD(6054, 6055), SD(6055, 6056), SD(6056, 6057), SD(6057, 6058), SD(6058, 6059), SD(6059, 6060), SD(6060, 6061), SD(6061, 6062), SD(6062, 6063), SD(6063, 6064), SD(6064, 6065), SD(6065, 6066), SD(6066, 6067), SD(6067, 6068), SD(6068, 6069), SD(6069, 6070), SD(6070, 6071), SD(6071, 6072), SD(6072, 6073), SD(6073, 6074), SD(6074, 6075), SD(4409, 4410), SD(6075, 6076), SD(6076, 6077), SD(6077, 6078), SD(6078, 6079), SD(6079, 6080), SD(6080, 6081), SD(4411, 4412), SD(6081, 6082), SD(6082, 6083), SD(6083, 6084), SD(6084, 6085), SD(6085, 6086), SD(6086, 6087), SD(6087, 6088), SD(6088, 6089), SD(4159, 4160), SD(4478, 4479), SD(6089, 6090), SD(6090, 6091), SD(6091, 6092), SD(6092, 6093), SD(6093, 6094), SD(6094, 6095), SD(6095, 6096), SD(6096, 6097), SD(4412, 4413), SD(6097, 6098), SD(6098, 6099), SD(6099, 6100), SD(6100, 6101), SD(4520, 4521), SD(6101, 6102), SD(6102, 6103), SD(6103, 6104), SD(6104, 6105), SD(6105, 6106), SD(6106, 6107), SD(6107, 6108), SD(6108, 6109), SD(6109, 6110), SD(6110, 6111), SD(6111, 6112), SD(6112, 6113), SD(6113, 6114), SD(4227, 4228), SD(6114, 6115), SD(6115, 6116), SD(6116, 6117), SD(6117, 6118), SD(6118, 6119), SD(6119, 6120), SD(6120, 6121), SD(6121, 6122), SD(6122, 6123), SD(6123, 6124), SD(6124, 6125), SD(4413, 4414), SD(4310, 4311), SD(6125, 6126), SD(6126, 6127), SD(6127, 6128), SD(6128, 6129), SD(6129, 6130), SD(6130, 6131), SD(6131, 6132), SD(6132, 6133), SD(4481, 4482), SD(6133, 6134), SD(6134, 6135), SD(6135, 6136), SD(6136, 6137), SD(6137, 6138), SD(6138, 6139), SD(6139, 6140), SD(6140, 6141), SD(4482, 4483), SD(6141, 6142), SD(6142, 6143), SD(6143, 6144), SD(6144, 6145), SD(6145, 6146), SD(6146, 6147), SD(6147, 6148), SD(6148, 6149), SD(6149, 6150), SD(6150, 6151), SD(6151, 6152), SD(6152, 6153), SD(4484, 4485), SD(6153, 6154), SD(6154, 6155), SD(6155, 6156), SD(6156, 6157), SD(6157, 6158), SD(6158, 6159), SD(6159, 6160), SD(6160, 6161), SD(6161, 6162), SD(6162, 6163), SD(6163, 6164), SD(6163, 6164), SD(6164, 6165), SD(6165, 6166), SD(4486, 4487), SD(6166, 6167), SD(6167, 6168), SD(6168, 6169), SD(6169, 6170), SD(6170, 6171), SD(6171, 6172), SD(6172, 6173), SD(4213, 4214), SD(6173, 6174), SD(6174, 6175), SD(6175, 6176), SD(6176, 6177), SD(6177, 6178), SD(6178, 6179), SD(6179, 6180), SD(4492, 4493), SD(6180, 6181), SD(6181, 6182), SD(6182, 6183), SD(6183, 6184), SD(6184, 6185), SD(6185, 6186), SD(6185, 6186), SD(4493, 4494), SD(4522, 4523), SD(6186, 6187), SD(6187, 6188), SD(6188, 6189), SD(6189, 6190), SD(6190, 6191), SD(4176, 4177), SD(4495, 4496), SD(6191, 6192), SD(6192, 6193), SD(4423, 4424), SD(6193, 6194), SD(6194, 6195), SD(4380, 4381), SD(6195, 6196), SD(6196, 6197), SD(4426, 4427), SD(6197, 6198), SD(6198, 6199), SD(6199, 6200), SD(6200, 6201), SD(6200, 6201), SD(6201, 6202), SD(6202, 6203), SD(6203, 6204), SD(6204, 6205), SD(6205, 6206), SD(6206, 6207), SD(6207, 6208), SD(6208, 6209), SD(6209, 6210), SD(6210, 6211), SD(6211, 6212), SD(6212, 6213), SD(6213, 6214), SD(6214, 6215), SD(6215, 6216), SD(6216, 6217), SD(6217, 6218), SD(6218, 6219), SD(6219, 6220), SD(6220, 6221), SD(6221, 6222), SD(6222, 6223), SD(6223, 6224), SD(6224, 6225), SD(6225, 6226), SD(6226, 6227), SD(6227, 6228), SD(4432, 4433), SD(6228, 6229), SD(6229, 6230), SD(6230, 6231), SD(6231, 6232), SD(6232, 6233), SD(6233, 6234), SD(6234, 6235), SD(6235, 6236), SD(6236, 6237), SD(6237, 6238), SD(6238, 6239), SD(6239, 6240), SD(6240, 6241), SD(6241, 6242), SD(6242, 6243), SD(6243, 6244), SD(6029, 6030), SD(6244, 6245), SD(6245, 6246), SD(6246, 6247), SD(6247, 6248), SD(6248, 6249), SD(6249, 6250), SD(6250, 6251), SD(6251, 6252), SD(6252, 6253), SD(6253, 6254), SD(6254, 6255), SD(6255, 6256), SD(4230, 4231), SD(6256, 6257), SD(6257, 6258), SD(6258, 6259), SD(6259, 6260), SD(6260, 6261), SD(6261, 6262), SD(4435, 4436), SD(6262, 6263), SD(6263, 6264), SD(6264, 6265), SD(6265, 6266), SD(6266, 6267), SD(6267, 6268), SD(6268, 6269), SD(6269, 6270), SD(6270, 6271), SD(6271, 6272), SD(6272, 6273), SD(6273, 6274), SD(6274, 6275), SD(6275, 6276), SD(6276, 6277), SD(6277, 6278), SD(6278, 6279), SD(6279, 6280), SD(6280, 6281), SD(6281, 6282), SD(4171, 4172), SD(6282, 6283), SD(6283, 6284), SD(6284, 6285), SD(6285, 6286), SD(6286, 6287), SD(6287, 6288), SD(4502, 4503), SD(6288, 6289), SD(6289, 6290), SD(6290, 6291), SD(6291, 6292), SD(6292, 6293), SD(6293, 6294), SD(6294, 6295), SD(6295, 6296), SD(2643, 2644), SD(6296, 6297), SD(6297, 6298), SD(6298, 6299), SD(6299, 6300), SD(6300, 6301), SD(6301, 6302), SD(6302, 6303), SD(6303, 6304), SD(6304, 6305), SD(6305, 6306), SD(6306, 6307), SD(4507, 4508), SD(4508, 4509), SD(2650, 2651), SD(6307, 6308), SD(6308, 6309), SD(6309, 6310), SD(6310, 6311), SD(6311, 6312), SD(6312, 6313), SD(6313, 6314), SD(6314, 6315), SD(6315, 6316), SD(6316, 6317), SD(6317, 6318), SD(6318, 6319), SD(4509, 4510), SD(6319, 6320), SD(6320, 6321), SD(6321, 6322), SD(6322, 6323), SD(6323, 6324), SD(6324, 6325), SD(6325, 6326), SD(6326, 6327), SD(6327, 6328), SD(6328, 6329), SD(6329, 6330), SD(6330, 6331), SD(6331, 6332), SD(6332, 6333), SD(6333, 6334), SD(6334, 6335), SD(6335, 6336), SD(6336, 6337), SD(6337, 6338), SD(6338, 6339), SD(6339, 6340), SD(6340, 6341), SD(6341, 6342), SD(6342, 6343), SD(6343, 6344), SD(6344, 6345), SD(6345, 6346), SD(6346, 6347), SD(6347, 6348), SD(6348, 6349), SD(4515, 4516), SD(4515, 4516), SD(6349, 6350), SD(6350, 6351), SD(6351, 6352), SD(6352, 6353), SD(6353, 6354), SD(6354, 6355), SD(6355, 6356), SD(6356, 6357), SD(6357, 6358), SD(6358, 6359), SD(4516, 4517), SD(6359, 6360), SD(6360, 6361), SD(6361, 6362), SD(6362, 6363), SD(6363, 6364), SD(6364, 6365), SD(6365, 6366), SD(6366, 6367), SD(6367, 6368), SD(6368, 6369), SD(2698, 2699), SD(6369, 6370), SD(2702, 2703), SD(6370, 6371), SD(6371, 6372), SD(6372, 6373), SD(6373, 6374), SD(2707, 2708), SD(6374, 6375), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingNone(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2None(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Font(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x2102 && input <= 0xFB29) {
        if (input <= 0x2149) {
            return cast(void*)&LUT_A4C17702[cast(size_t)(0 + (input - 0x2102))];
        } else if (input >= 0xFB20) {
            return cast(void*)&LUT_A4C17702[cast(size_t)(72 + (input - 0xFB20))];
        }
    } else if (input >= 0x1D400 && input <= 0x1FBF9) {
        if (input <= 0x1D7FF)
            return cast(void*)&LUT_A4C17702[cast(size_t)(82 + (input - 0x1D400))];
        else if (input >= 0x1EE00 && input <= 0x1EEBB)
            return cast(void*)&LUT_A4C17702[cast(size_t)(1106 + (input - 0x1EE00))];
        else if (input >= 0x1FBF0)
            return cast(void*)&LUT_A4C17702[cast(size_t)(1294 + (input - 0x1FBF0))];
    }
    return null;
}
private {
    static immutable LUT_A4C17702 = [SD(2021, 2022), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(975, 976), SD(952, 953), SD(952, 953), SD(952, 953), SD(563, 564), SD(2033, 2034), SD(953, 954), SD(953, 954), SD(956, 957), SD(585, 586), SD(0, 0), SD(958, 959), SD(0, 0), SD(0, 0), SD(0, 0), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(962, 963), SD(962, 963), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2044, 2045), SD(0, 0), SD(0, 0), SD(0, 0), SD(2044, 2045), SD(0, 0), SD(0, 0), SD(0, 0), SD(947, 948), SD(2021, 2022), SD(0, 0), SD(971, 972), SD(949, 950), SD(2047, 2048), SD(0, 0), SD(957, 958), SD(14, 15), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(992, 993), SD(0, 0), SD(0, 0), SD(648, 649), SD(989, 990), SD(2055, 2056), SD(2056, 2057), SD(2057, 2058), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(948, 949), SD(970, 971), SD(971, 972), SD(992, 993), SD(565, 566), SD(4558, 4559), SD(2048, 2049), SD(2051, 2052), SD(4559, 4560), SD(4560, 4561), SD(4561, 4562), SD(4562, 4563), SD(4563, 4564), SD(4564, 4565), SD(2007, 2008), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(0, 0), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(0, 0), SD(2021, 2022), SD(948, 949), SD(0, 0), SD(0, 0), SD(951, 952), SD(0, 0), SD(0, 0), SD(954, 955), SD(955, 956), SD(0, 0), SD(0, 0), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(0, 0), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(0, 0), SD(998, 999), SD(0, 0), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(0, 0), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(0, 0), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(0, 0), SD(0, 0), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(0, 0), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(0, 0), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(0, 0), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(0, 0), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(0, 0), SD(959, 960), SD(0, 0), SD(0, 0), SD(0, 0), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(0, 0), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(5673, 5674), SD(5674, 5675), SD(0, 0), SD(0, 0), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5714, 5715), SD(5715, 5716), SD(0, 0), SD(0, 0), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(5442, 5443), SD(5443, 5444), SD(5447, 5448), SD(5450, 5451), SD(0, 0), SD(5469, 5470), SD(5453, 5454), SD(5448, 5449), SD(5458, 5459), SD(5470, 5471), SD(5464, 5465), SD(5465, 5466), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(5452, 5453), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(5451, 5452), SD(5457, 5458), SD(5459, 5460), SD(5461, 5462), SD(5716, 5717), SD(4654, 4655), SD(5717, 5718), SD(5718, 5719), SD(0, 0), SD(5443, 5444), SD(5447, 5448), SD(0, 0), SD(5468, 5469), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(0, 0), SD(5470, 5471), SD(5464, 5465), SD(5465, 5466), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(0, 0), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(0, 0), SD(5457, 5458), SD(0, 0), SD(5461, 5462), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5447, 5448), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(0, 0), SD(5470, 5471), SD(0, 0), SD(5465, 5466), SD(0, 0), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(0, 0), SD(5456, 5457), SD(5463, 5464), SD(0, 0), SD(5455, 5456), SD(0, 0), SD(0, 0), SD(5449, 5450), SD(0, 0), SD(5457, 5458), SD(0, 0), SD(5461, 5462), SD(0, 0), SD(4654, 4655), SD(0, 0), SD(5718, 5719), SD(0, 0), SD(5443, 5444), SD(5447, 5448), SD(0, 0), SD(5468, 5469), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(5458, 5459), SD(5470, 5471), SD(5464, 5465), SD(0, 0), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(0, 0), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(0, 0), SD(5457, 5458), SD(5459, 5460), SD(5461, 5462), SD(5716, 5717), SD(0, 0), SD(5717, 5718), SD(0, 0), SD(5442, 5443), SD(5443, 5444), SD(5447, 5448), SD(5450, 5451), SD(5468, 5469), SD(5469, 5470), SD(5453, 5454), SD(5448, 5449), SD(5458, 5459), SD(5470, 5471), SD(0, 0), SD(5465, 5466), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(5452, 5453), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(5451, 5452), SD(5457, 5458), SD(5459, 5460), SD(5461, 5462), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5443, 5444), SD(5447, 5448), SD(5450, 5451), SD(0, 0), SD(5469, 5470), SD(5453, 5454), SD(5448, 5449), SD(5458, 5459), SD(5470, 5471), SD(0, 0), SD(5465, 5466), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(5452, 5453), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(5451, 5452), SD(5457, 5458), SD(5459, 5460), SD(5461, 5462), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingFont(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Font(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2NoBreak(dchar input) @trusted nothrow @nogc pure {
    if (input == 0xA0)
        return cast(void*)&LUT_6A1779E2[cast(size_t)(0 + (input - 0xA0))];
    else if (input == 0xF0C)
        return cast(void*)&LUT_6A1779E2[cast(size_t)(1 + (input - 0xF0C))];
    else if (input >= 0x2007 && input <= 0x202F)
        return cast(void*)&LUT_6A1779E2[cast(size_t)(2 + (input - 0x2007))];
    return null;
}
private {
    static immutable LUT_6A1779E2 = [SD(0, 1), SD(881, 882), SD(0, 1), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1967, 1968), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 1), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingNoBreak(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2NoBreak(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Initial(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFB54 && input <= 0xFBFE)
        return cast(void*)&LUT_5B03B337[cast(size_t)(0 + (input - 0xFB54))];
    else if (input >= 0xFC97 && input <= 0xFCDE)
        return cast(void*)&LUT_5B03B337[cast(size_t)(171 + (input - 0xFC97))];
    else if (input >= 0xFD2D && input <= 0xFDC5)
        return cast(void*)&LUT_5B03B337[cast(size_t)(243 + (input - 0xFD2D))];
    else if (input >= 0xFE8B && input <= 0xFEF3)
        return cast(void*)&LUT_5B03B337[cast(size_t)(396 + (input - 0xFE8B))];
    return null;
}
private {
    static immutable LUT_5B03B337 = [SD(4632, 4633), SD(0, 0), SD(0, 0), SD(0, 0), SD(4633, 4634), SD(0, 0), SD(0, 0), SD(0, 0), SD(4634, 4635), SD(0, 0), SD(0, 0), SD(0, 0), SD(4635, 4636), SD(0, 0), SD(0, 0), SD(0, 0), SD(4636, 4637), SD(0, 0), SD(0, 0), SD(0, 0), SD(4637, 4638), SD(0, 0), SD(0, 0), SD(0, 0), SD(4638, 4639), SD(0, 0), SD(0, 0), SD(0, 0), SD(4639, 4640), SD(0, 0), SD(0, 0), SD(0, 0), SD(4640, 4641), SD(0, 0), SD(0, 0), SD(0, 0), SD(4641, 4642), SD(0, 0), SD(0, 0), SD(0, 0), SD(4642, 4643), SD(0, 0), SD(0, 0), SD(0, 0), SD(4643, 4644), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4650, 4651), SD(0, 0), SD(0, 0), SD(0, 0), SD(4651, 4652), SD(0, 0), SD(0, 0), SD(0, 0), SD(4652, 4653), SD(0, 0), SD(0, 0), SD(0, 0), SD(4653, 4654), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4655, 4656), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4657, 4658), SD(0, 0), SD(0, 0), SD(0, 0), SD(4658, 4659), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4661, 4662), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4669, 4670), SD(0, 0), SD(4670, 4671), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4683, 4685), SD(0, 0), SD(0, 0), SD(4685, 4687), SD(0, 0), SD(0, 0), SD(4687, 4688), SD(4688, 4690), SD(4690, 4692), SD(4930, 4932), SD(4692, 4694), SD(4932, 4934), SD(4696, 4698), SD(4698, 4700), SD(4700, 4702), SD(4702, 4704), SD(4934, 4936), SD(4708, 4710), SD(4710, 4712), SD(4712, 4714), SD(4714, 4716), SD(4936, 4938), SD(4722, 4724), SD(4728, 4730), SD(4730, 4732), SD(4732, 4734), SD(4734, 4736), SD(4736, 4738), SD(4740, 4742), SD(4742, 4744), SD(4744, 4746), SD(4746, 4748), SD(4748, 4750), SD(4750, 4752), SD(4938, 4940), SD(4752, 4754), SD(4754, 4756), SD(4756, 4758), SD(4758, 4760), SD(4760, 4762), SD(4762, 4764), SD(4766, 4768), SD(4768, 4770), SD(4770, 4772), SD(4772, 4774), SD(4774, 4776), SD(4776, 4778), SD(4778, 4780), SD(4780, 4782), SD(4782, 4784), SD(4788, 4790), SD(4790, 4792), SD(4798, 4800), SD(4800, 4802), SD(4802, 4804), SD(4804, 4806), SD(4806, 4808), SD(4812, 4814), SD(4814, 4816), SD(4816, 4818), SD(4818, 4820), SD(4940, 4942), SD(4824, 4826), SD(4826, 4828), SD(4828, 4830), SD(4830, 4832), SD(4836, 4838), SD(4838, 4840), SD(4840, 4842), SD(4842, 4844), SD(4942, 4944), SD(4848, 4850), SD(4850, 4852), SD(4944, 4946), SD(4856, 4858), SD(4858, 4860), SD(4860, 4862), SD(4862, 4864), SD(4946, 4948), SD(5005, 5007), SD(5007, 5009), SD(5009, 5011), SD(4952, 4954), SD(4950, 4952), SD(4954, 4956), SD(4764, 4766), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5021, 5024), SD(0, 0), SD(5024, 5027), SD(5027, 5030), SD(5030, 5033), SD(5033, 5036), SD(5036, 5039), SD(5039, 5042), SD(0, 0), SD(5042, 5045), SD(0, 0), SD(0, 0), SD(5051, 5054), SD(5054, 5057), SD(0, 0), SD(0, 0), SD(5060, 5063), SD(5063, 5066), SD(0, 0), SD(5066, 5069), SD(0, 0), SD(5069, 5072), SD(0, 0), SD(0, 0), SD(5075, 5078), SD(0, 0), SD(0, 0), SD(5081, 5084), SD(0, 0), SD(5084, 5087), SD(0, 0), SD(0, 0), SD(5090, 5093), SD(0, 0), SD(5093, 5096), SD(5096, 5099), SD(0, 0), SD(0, 0), SD(0, 0), SD(5105, 5108), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5120, 5123), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5138, 5141), SD(0, 0), SD(0, 0), SD(5141, 5144), SD(0, 0), SD(5144, 5147), SD(5147, 5150), SD(5150, 5153), SD(0, 0), SD(5156, 5159), SD(5159, 5162), SD(5162, 5165), SD(5165, 5168), SD(0, 0), SD(0, 0), SD(5168, 5171), SD(5171, 5174), SD(5174, 5177), SD(5177, 5180), SD(0, 0), SD(0, 0), SD(5183, 5186), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5195, 5198), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5123, 5126), SD(5129, 5132), SD(0, 0), SD(0, 0), SD(5270, 5273), SD(0, 0), SD(5276, 5279), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5279, 5282), SD(5102, 5105), SD(5072, 5075), SD(5441, 5442), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5443, 5444), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5445, 5446), SD(0, 0), SD(0, 0), SD(0, 0), SD(5446, 5447), SD(0, 0), SD(0, 0), SD(0, 0), SD(5447, 5448), SD(0, 0), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(0, 0), SD(0, 0), SD(0, 0), SD(5449, 5450), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5454, 5455), SD(0, 0), SD(0, 0), SD(0, 0), SD(5455, 5456), SD(0, 0), SD(0, 0), SD(0, 0), SD(5456, 5457), SD(0, 0), SD(0, 0), SD(0, 0), SD(5457, 5458), SD(0, 0), SD(0, 0), SD(0, 0), SD(5458, 5459), SD(0, 0), SD(0, 0), SD(0, 0), SD(5459, 5460), SD(0, 0), SD(0, 0), SD(0, 0), SD(5460, 5461), SD(0, 0), SD(0, 0), SD(0, 0), SD(5461, 5462), SD(0, 0), SD(0, 0), SD(0, 0), SD(5462, 5463), SD(0, 0), SD(0, 0), SD(0, 0), SD(5463, 5464), SD(0, 0), SD(0, 0), SD(0, 0), SD(5464, 5465), SD(0, 0), SD(0, 0), SD(0, 0), SD(5465, 5466), SD(0, 0), SD(0, 0), SD(0, 0), SD(5466, 5467), SD(0, 0), SD(0, 0), SD(0, 0), SD(5467, 5468), SD(0, 0), SD(0, 0), SD(0, 0), SD(5468, 5469), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5470, 5471), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingInitial(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Initial(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Medial(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFB55 && input <= 0xFBFF)
        return cast(void*)&LUT_F4BBD2CF[cast(size_t)(0 + (input - 0xFB55))];
    else if (input >= 0xFCDF && input <= 0xFD3B)
        return cast(void*)&LUT_F4BBD2CF[cast(size_t)(171 + (input - 0xFCDF))];
    else if (input >= 0xFE71 && input <= 0xFEF4)
        return cast(void*)&LUT_F4BBD2CF[cast(size_t)(264 + (input - 0xFE71))];
    return null;
}
private {
    static immutable LUT_F4BBD2CF = [SD(4632, 4633), SD(0, 0), SD(0, 0), SD(0, 0), SD(4633, 4634), SD(0, 0), SD(0, 0), SD(0, 0), SD(4634, 4635), SD(0, 0), SD(0, 0), SD(0, 0), SD(4635, 4636), SD(0, 0), SD(0, 0), SD(0, 0), SD(4636, 4637), SD(0, 0), SD(0, 0), SD(0, 0), SD(4637, 4638), SD(0, 0), SD(0, 0), SD(0, 0), SD(4638, 4639), SD(0, 0), SD(0, 0), SD(0, 0), SD(4639, 4640), SD(0, 0), SD(0, 0), SD(0, 0), SD(4640, 4641), SD(0, 0), SD(0, 0), SD(0, 0), SD(4641, 4642), SD(0, 0), SD(0, 0), SD(0, 0), SD(4642, 4643), SD(0, 0), SD(0, 0), SD(0, 0), SD(4643, 4644), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4650, 4651), SD(0, 0), SD(0, 0), SD(0, 0), SD(4651, 4652), SD(0, 0), SD(0, 0), SD(0, 0), SD(4652, 4653), SD(0, 0), SD(0, 0), SD(0, 0), SD(4653, 4654), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4655, 4656), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4657, 4658), SD(0, 0), SD(0, 0), SD(0, 0), SD(4658, 4659), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4661, 4662), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4669, 4670), SD(0, 0), SD(4670, 4671), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4687, 4688), SD(4692, 4694), SD(4932, 4934), SD(4702, 4704), SD(4934, 4936), SD(4714, 4716), SD(4936, 4938), SD(4722, 4724), SD(4948, 4950), SD(4748, 4750), SD(4950, 4952), SD(4952, 4954), SD(4954, 4956), SD(4804, 4806), SD(4806, 4808), SD(4818, 4820), SD(4842, 4844), SD(4942, 4944), SD(4862, 4864), SD(4946, 4948), SD(4956, 4959), SD(4959, 4962), SD(4962, 4965), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4742, 4744), SD(4744, 4746), SD(4746, 4748), SD(5005, 5007), SD(5007, 5009), SD(5009, 5011), SD(4764, 4766), SD(4766, 4768), SD(5410, 5412), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5418, 5420), SD(0, 0), SD(5422, 5424), SD(0, 0), SD(5426, 5428), SD(0, 0), SD(5430, 5432), SD(0, 0), SD(5434, 5436), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5441, 5442), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5443, 5444), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5445, 5446), SD(0, 0), SD(0, 0), SD(0, 0), SD(5446, 5447), SD(0, 0), SD(0, 0), SD(0, 0), SD(5447, 5448), SD(0, 0), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(0, 0), SD(0, 0), SD(0, 0), SD(5449, 5450), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5454, 5455), SD(0, 0), SD(0, 0), SD(0, 0), SD(5455, 5456), SD(0, 0), SD(0, 0), SD(0, 0), SD(5456, 5457), SD(0, 0), SD(0, 0), SD(0, 0), SD(5457, 5458), SD(0, 0), SD(0, 0), SD(0, 0), SD(5458, 5459), SD(0, 0), SD(0, 0), SD(0, 0), SD(5459, 5460), SD(0, 0), SD(0, 0), SD(0, 0), SD(5460, 5461), SD(0, 0), SD(0, 0), SD(0, 0), SD(5461, 5462), SD(0, 0), SD(0, 0), SD(0, 0), SD(5462, 5463), SD(0, 0), SD(0, 0), SD(0, 0), SD(5463, 5464), SD(0, 0), SD(0, 0), SD(0, 0), SD(5464, 5465), SD(0, 0), SD(0, 0), SD(0, 0), SD(5465, 5466), SD(0, 0), SD(0, 0), SD(0, 0), SD(5466, 5467), SD(0, 0), SD(0, 0), SD(0, 0), SD(5467, 5468), SD(0, 0), SD(0, 0), SD(0, 0), SD(5468, 5469), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5470, 5471), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingMedial(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Medial(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Final(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFB51 && input <= 0xFBFD)
        return cast(void*)&LUT_CC5036C2[cast(size_t)(0 + (input - 0xFB51))];
    else if (input >= 0xFC64 && input <= 0xFC96)
        return cast(void*)&LUT_CC5036C2[cast(size_t)(173 + (input - 0xFC64))];
    else if (input >= 0xFD11 && input <= 0xFDC7)
        return cast(void*)&LUT_CC5036C2[cast(size_t)(224 + (input - 0xFD11))];
    else if (input >= 0xFE82 && input <= 0xFEFC)
        return cast(void*)&LUT_CC5036C2[cast(size_t)(407 + (input - 0xFE82))];
    return null;
}
private {
    static immutable LUT_CC5036C2 = [SD(4631, 4632), SD(0, 0), SD(4632, 4633), SD(0, 0), SD(0, 0), SD(0, 0), SD(4633, 4634), SD(0, 0), SD(0, 0), SD(0, 0), SD(4634, 4635), SD(0, 0), SD(0, 0), SD(0, 0), SD(4635, 4636), SD(0, 0), SD(0, 0), SD(0, 0), SD(4636, 4637), SD(0, 0), SD(0, 0), SD(0, 0), SD(4637, 4638), SD(0, 0), SD(0, 0), SD(0, 0), SD(4638, 4639), SD(0, 0), SD(0, 0), SD(0, 0), SD(4639, 4640), SD(0, 0), SD(0, 0), SD(0, 0), SD(4640, 4641), SD(0, 0), SD(0, 0), SD(0, 0), SD(4641, 4642), SD(0, 0), SD(0, 0), SD(0, 0), SD(4642, 4643), SD(0, 0), SD(0, 0), SD(0, 0), SD(4643, 4644), SD(0, 0), SD(0, 0), SD(0, 0), SD(4644, 4645), SD(0, 0), SD(4645, 4646), SD(0, 0), SD(4646, 4647), SD(0, 0), SD(4647, 4648), SD(0, 0), SD(4648, 4649), SD(0, 0), SD(4649, 4650), SD(0, 0), SD(4650, 4651), SD(0, 0), SD(0, 0), SD(0, 0), SD(4651, 4652), SD(0, 0), SD(0, 0), SD(0, 0), SD(4652, 4653), SD(0, 0), SD(0, 0), SD(0, 0), SD(4653, 4654), SD(0, 0), SD(0, 0), SD(0, 0), SD(4654, 4655), SD(0, 0), SD(4655, 4656), SD(0, 0), SD(0, 0), SD(0, 0), SD(4656, 4657), SD(0, 0), SD(4657, 4658), SD(0, 0), SD(0, 0), SD(0, 0), SD(4658, 4659), SD(0, 0), SD(0, 0), SD(0, 0), SD(4659, 4660), SD(0, 0), SD(4660, 4661), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4661, 4662), SD(0, 0), SD(0, 0), SD(0, 0), SD(4662, 4663), SD(0, 0), SD(4663, 4664), SD(0, 0), SD(4664, 4665), SD(0, 0), SD(0, 0), SD(4666, 4667), SD(0, 0), SD(4667, 4668), SD(0, 0), SD(4668, 4669), SD(0, 0), SD(4669, 4670), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4671, 4673), SD(0, 0), SD(4673, 4675), SD(0, 0), SD(4675, 4677), SD(0, 0), SD(4677, 4679), SD(0, 0), SD(4679, 4681), SD(0, 0), SD(4681, 4683), SD(0, 0), SD(4683, 4685), SD(0, 0), SD(0, 0), SD(4685, 4687), SD(0, 0), SD(0, 0), SD(4687, 4688), SD(4892, 4894), SD(4894, 4896), SD(4692, 4694), SD(4896, 4898), SD(4685, 4687), SD(4694, 4696), SD(4898, 4900), SD(4900, 4902), SD(4702, 4704), SD(4902, 4904), SD(4704, 4706), SD(4706, 4708), SD(4904, 4906), SD(4906, 4908), SD(4714, 4716), SD(4908, 4910), SD(4716, 4718), SD(4718, 4720), SD(4910, 4912), SD(4912, 4914), SD(4722, 4724), SD(4914, 4916), SD(4724, 4726), SD(4726, 4728), SD(4784, 4786), SD(4786, 4788), SD(4792, 4794), SD(4794, 4796), SD(4796, 4798), SD(4804, 4806), SD(4806, 4808), SD(4808, 4810), SD(4810, 4812), SD(4818, 4820), SD(4820, 4822), SD(4822, 4824), SD(4916, 4918), SD(4830, 4832), SD(4918, 4920), SD(4920, 4922), SD(4842, 4844), SD(4922, 4924), SD(4844, 4846), SD(4846, 4848), SD(4872, 4874), SD(4924, 4926), SD(4926, 4928), SD(4862, 4864), SD(4928, 4930), SD(4864, 4866), SD(4866, 4868), SD(4965, 4967), SD(4967, 4969), SD(4969, 4971), SD(4971, 4973), SD(4973, 4975), SD(4975, 4977), SD(4977, 4979), SD(4979, 4981), SD(4981, 4983), SD(4983, 4985), SD(4985, 4987), SD(4987, 4989), SD(4989, 4991), SD(4991, 4993), SD(4993, 4995), SD(4995, 4997), SD(4997, 4999), SD(4999, 5001), SD(5001, 5003), SD(5003, 5005), SD(5005, 5007), SD(5007, 5009), SD(5009, 5011), SD(4952, 4954), SD(5011, 5013), SD(5013, 5015), SD(5015, 5017), SD(5017, 5019), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5019, 5021), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5024, 5027), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5042, 5045), SD(0, 0), SD(5045, 5048), SD(5048, 5051), SD(0, 0), SD(0, 0), SD(5057, 5060), SD(5060, 5063), SD(0, 0), SD(0, 0), SD(5066, 5069), SD(0, 0), SD(5069, 5072), SD(0, 0), SD(5072, 5075), SD(5075, 5078), SD(0, 0), SD(5078, 5081), SD(5081, 5084), SD(0, 0), SD(5084, 5087), SD(0, 0), SD(5087, 5090), SD(5090, 5093), SD(0, 0), SD(5093, 5096), SD(0, 0), SD(0, 0), SD(5099, 5102), SD(5102, 5105), SD(5105, 5108), SD(0, 0), SD(5108, 5111), SD(5111, 5114), SD(5114, 5117), SD(5117, 5120), SD(5120, 5123), SD(0, 0), SD(5123, 5126), SD(5126, 5129), SD(5129, 5132), SD(5132, 5135), SD(5135, 5138), SD(0, 0), SD(5138, 5141), SD(5141, 5144), SD(0, 0), SD(5144, 5147), SD(0, 0), SD(0, 0), SD(0, 0), SD(5153, 5156), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5180, 5183), SD(5183, 5186), SD(0, 0), SD(5186, 5189), SD(5189, 5192), SD(5192, 5195), SD(5195, 5198), SD(0, 0), SD(5198, 5201), SD(5201, 5204), SD(5204, 5207), SD(5207, 5210), SD(5210, 5213), SD(5213, 5216), SD(5216, 5219), SD(5219, 5222), SD(5222, 5225), SD(5225, 5228), SD(5228, 5231), SD(5231, 5234), SD(5234, 5237), SD(5237, 5240), SD(5240, 5243), SD(5243, 5246), SD(5246, 5249), SD(5249, 5252), SD(5252, 5255), SD(5255, 5258), SD(5258, 5261), SD(5261, 5264), SD(0, 0), SD(0, 0), SD(5264, 5267), SD(5267, 5270), SD(0, 0), SD(5273, 5276), SD(0, 0), SD(5279, 5282), SD(5276, 5279), SD(5270, 5273), SD(5282, 5285), SD(5285, 5288), SD(5288, 5291), SD(5291, 5294), SD(5294, 5297), SD(0, 0), SD(0, 0), SD(0, 0), SD(5297, 5300), SD(5300, 5303), SD(5437, 5438), SD(0, 0), SD(5438, 5439), SD(0, 0), SD(5439, 5440), SD(0, 0), SD(5440, 5441), SD(0, 0), SD(5441, 5442), SD(0, 0), SD(0, 0), SD(0, 0), SD(5442, 5443), SD(0, 0), SD(5443, 5444), SD(0, 0), SD(0, 0), SD(0, 0), SD(5444, 5445), SD(0, 0), SD(5445, 5446), SD(0, 0), SD(0, 0), SD(0, 0), SD(5446, 5447), SD(0, 0), SD(0, 0), SD(0, 0), SD(5447, 5448), SD(0, 0), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(0, 0), SD(0, 0), SD(0, 0), SD(5449, 5450), SD(0, 0), SD(0, 0), SD(0, 0), SD(5450, 5451), SD(0, 0), SD(5451, 5452), SD(0, 0), SD(5452, 5453), SD(0, 0), SD(5453, 5454), SD(0, 0), SD(5454, 5455), SD(0, 0), SD(0, 0), SD(0, 0), SD(5455, 5456), SD(0, 0), SD(0, 0), SD(0, 0), SD(5456, 5457), SD(0, 0), SD(0, 0), SD(0, 0), SD(5457, 5458), SD(0, 0), SD(0, 0), SD(0, 0), SD(5458, 5459), SD(0, 0), SD(0, 0), SD(0, 0), SD(5459, 5460), SD(0, 0), SD(0, 0), SD(0, 0), SD(5460, 5461), SD(0, 0), SD(0, 0), SD(0, 0), SD(5461, 5462), SD(0, 0), SD(0, 0), SD(0, 0), SD(5462, 5463), SD(0, 0), SD(0, 0), SD(0, 0), SD(5463, 5464), SD(0, 0), SD(0, 0), SD(0, 0), SD(5464, 5465), SD(0, 0), SD(0, 0), SD(0, 0), SD(5465, 5466), SD(0, 0), SD(0, 0), SD(0, 0), SD(5466, 5467), SD(0, 0), SD(0, 0), SD(0, 0), SD(5467, 5468), SD(0, 0), SD(0, 0), SD(0, 0), SD(5468, 5469), SD(0, 0), SD(0, 0), SD(0, 0), SD(5469, 5470), SD(0, 0), SD(4670, 4671), SD(0, 0), SD(5470, 5471), SD(0, 0), SD(0, 0), SD(0, 0), SD(5471, 5473), SD(0, 0), SD(5473, 5475), SD(0, 0), SD(5475, 5477), SD(0, 0), SD(5477, 5479), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingFinal(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Final(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Isolated(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFB50 && input <= 0xFC63)
        return cast(void*)&LUT_5EC18728[cast(size_t)(0 + (input - 0xFB50))];
    else if (input >= 0xFCF5 && input <= 0xFD3D)
        return cast(void*)&LUT_5EC18728[cast(size_t)(276 + (input - 0xFCF5))];
    else if (input >= 0xFDF0 && input <= 0xFDFC)
        return cast(void*)&LUT_5EC18728[cast(size_t)(349 + (input - 0xFDF0))];
    else if (input >= 0xFE70 && input <= 0xFEFB)
        return cast(void*)&LUT_5EC18728[cast(size_t)(362 + (input - 0xFE70))];
    return null;
}
private {
    static immutable LUT_5EC18728 = [SD(4631, 4632), SD(0, 0), SD(4632, 4633), SD(0, 0), SD(0, 0), SD(0, 0), SD(4633, 4634), SD(0, 0), SD(0, 0), SD(0, 0), SD(4634, 4635), SD(0, 0), SD(0, 0), SD(0, 0), SD(4635, 4636), SD(0, 0), SD(0, 0), SD(0, 0), SD(4636, 4637), SD(0, 0), SD(0, 0), SD(0, 0), SD(4637, 4638), SD(0, 0), SD(0, 0), SD(0, 0), SD(4638, 4639), SD(0, 0), SD(0, 0), SD(0, 0), SD(4639, 4640), SD(0, 0), SD(0, 0), SD(0, 0), SD(4640, 4641), SD(0, 0), SD(0, 0), SD(0, 0), SD(4641, 4642), SD(0, 0), SD(0, 0), SD(0, 0), SD(4642, 4643), SD(0, 0), SD(0, 0), SD(0, 0), SD(4643, 4644), SD(0, 0), SD(0, 0), SD(0, 0), SD(4644, 4645), SD(0, 0), SD(4645, 4646), SD(0, 0), SD(4646, 4647), SD(0, 0), SD(4647, 4648), SD(0, 0), SD(4648, 4649), SD(0, 0), SD(4649, 4650), SD(0, 0), SD(4650, 4651), SD(0, 0), SD(0, 0), SD(0, 0), SD(4651, 4652), SD(0, 0), SD(0, 0), SD(0, 0), SD(4652, 4653), SD(0, 0), SD(0, 0), SD(0, 0), SD(4653, 4654), SD(0, 0), SD(0, 0), SD(0, 0), SD(4654, 4655), SD(0, 0), SD(4655, 4656), SD(0, 0), SD(0, 0), SD(0, 0), SD(4656, 4657), SD(0, 0), SD(4657, 4658), SD(0, 0), SD(0, 0), SD(0, 0), SD(4658, 4659), SD(0, 0), SD(0, 0), SD(0, 0), SD(4659, 4660), SD(0, 0), SD(4660, 4661), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4661, 4662), SD(0, 0), SD(0, 0), SD(0, 0), SD(4662, 4663), SD(0, 0), SD(4663, 4664), SD(0, 0), SD(4664, 4665), SD(0, 0), SD(4665, 4666), SD(4666, 4667), SD(0, 0), SD(4667, 4668), SD(0, 0), SD(4668, 4669), SD(0, 0), SD(4669, 4670), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4671, 4673), SD(0, 0), SD(4673, 4675), SD(0, 0), SD(4675, 4677), SD(0, 0), SD(4677, 4679), SD(0, 0), SD(4679, 4681), SD(0, 0), SD(4681, 4683), SD(0, 0), SD(4683, 4685), SD(0, 0), SD(0, 0), SD(4685, 4687), SD(0, 0), SD(0, 0), SD(4687, 4688), SD(0, 0), SD(0, 0), SD(0, 0), SD(4688, 4690), SD(4690, 4692), SD(4692, 4694), SD(4685, 4687), SD(4694, 4696), SD(4696, 4698), SD(4698, 4700), SD(4700, 4702), SD(4702, 4704), SD(4704, 4706), SD(4706, 4708), SD(4708, 4710), SD(4710, 4712), SD(4712, 4714), SD(4714, 4716), SD(4716, 4718), SD(4718, 4720), SD(4720, 4722), SD(4722, 4724), SD(4724, 4726), SD(4726, 4728), SD(4728, 4730), SD(4730, 4732), SD(4732, 4734), SD(4734, 4736), SD(4736, 4738), SD(4738, 4740), SD(4740, 4742), SD(4742, 4744), SD(4744, 4746), SD(4746, 4748), SD(4748, 4750), SD(4750, 4752), SD(4752, 4754), SD(4754, 4756), SD(4756, 4758), SD(4758, 4760), SD(4760, 4762), SD(4762, 4764), SD(4764, 4766), SD(4766, 4768), SD(4768, 4770), SD(4770, 4772), SD(4772, 4774), SD(4774, 4776), SD(4776, 4778), SD(4778, 4780), SD(4780, 4782), SD(4782, 4784), SD(4784, 4786), SD(4786, 4788), SD(4788, 4790), SD(4790, 4792), SD(4792, 4794), SD(4794, 4796), SD(4796, 4798), SD(4798, 4800), SD(4800, 4802), SD(4802, 4804), SD(4804, 4806), SD(4806, 4808), SD(4808, 4810), SD(4810, 4812), SD(4812, 4814), SD(4814, 4816), SD(4816, 4818), SD(4818, 4820), SD(4820, 4822), SD(4822, 4824), SD(4824, 4826), SD(4826, 4828), SD(4828, 4830), SD(4830, 4832), SD(4832, 4834), SD(4834, 4836), SD(4836, 4838), SD(4838, 4840), SD(4840, 4842), SD(4842, 4844), SD(4844, 4846), SD(4846, 4848), SD(4848, 4850), SD(4850, 4852), SD(4852, 4854), SD(4854, 4856), SD(4856, 4858), SD(4858, 4860), SD(4860, 4862), SD(4862, 4864), SD(4864, 4866), SD(4866, 4868), SD(4868, 4870), SD(4870, 4872), SD(4872, 4874), SD(4874, 4877), SD(4877, 4880), SD(4880, 4883), SD(4883, 4886), SD(4886, 4889), SD(4889, 4892), SD(4965, 4967), SD(4967, 4969), SD(4969, 4971), SD(4971, 4973), SD(4973, 4975), SD(4975, 4977), SD(4977, 4979), SD(4979, 4981), SD(4981, 4983), SD(4983, 4985), SD(4985, 4987), SD(4987, 4989), SD(4989, 4991), SD(4991, 4993), SD(4993, 4995), SD(4995, 4997), SD(4997, 4999), SD(4999, 5001), SD(5001, 5003), SD(5003, 5005), SD(5005, 5007), SD(5007, 5009), SD(5009, 5011), SD(4952, 4954), SD(5011, 5013), SD(5013, 5015), SD(5015, 5017), SD(5017, 5019), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5019, 5021), SD(5303, 5306), SD(5306, 5309), SD(5309, 5313), SD(5313, 5317), SD(5317, 5321), SD(5321, 5325), SD(5325, 5329), SD(5329, 5333), SD(5333, 5337), SD(5337, 5340), SD(5340, 5358), SD(5358, 5366), SD(5366, 5370), SD(5408, 5410), SD(0, 0), SD(5412, 5414), SD(0, 0), SD(5414, 5416), SD(0, 0), SD(5416, 5418), SD(0, 0), SD(5420, 5422), SD(0, 0), SD(5424, 5426), SD(0, 0), SD(5428, 5430), SD(0, 0), SD(5432, 5434), SD(0, 0), SD(5436, 5437), SD(5437, 5438), SD(0, 0), SD(5438, 5439), SD(0, 0), SD(5439, 5440), SD(0, 0), SD(5440, 5441), SD(0, 0), SD(5441, 5442), SD(0, 0), SD(0, 0), SD(0, 0), SD(5442, 5443), SD(0, 0), SD(5443, 5444), SD(0, 0), SD(0, 0), SD(0, 0), SD(5444, 5445), SD(0, 0), SD(5445, 5446), SD(0, 0), SD(0, 0), SD(0, 0), SD(5446, 5447), SD(0, 0), SD(0, 0), SD(0, 0), SD(5447, 5448), SD(0, 0), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(0, 0), SD(0, 0), SD(0, 0), SD(5449, 5450), SD(0, 0), SD(0, 0), SD(0, 0), SD(5450, 5451), SD(0, 0), SD(5451, 5452), SD(0, 0), SD(5452, 5453), SD(0, 0), SD(5453, 5454), SD(0, 0), SD(5454, 5455), SD(0, 0), SD(0, 0), SD(0, 0), SD(5455, 5456), SD(0, 0), SD(0, 0), SD(0, 0), SD(5456, 5457), SD(0, 0), SD(0, 0), SD(0, 0), SD(5457, 5458), SD(0, 0), SD(0, 0), SD(0, 0), SD(5458, 5459), SD(0, 0), SD(0, 0), SD(0, 0), SD(5459, 5460), SD(0, 0), SD(0, 0), SD(0, 0), SD(5460, 5461), SD(0, 0), SD(0, 0), SD(0, 0), SD(5461, 5462), SD(0, 0), SD(0, 0), SD(0, 0), SD(5462, 5463), SD(0, 0), SD(0, 0), SD(0, 0), SD(5463, 5464), SD(0, 0), SD(0, 0), SD(0, 0), SD(5464, 5465), SD(0, 0), SD(0, 0), SD(0, 0), SD(5465, 5466), SD(0, 0), SD(0, 0), SD(0, 0), SD(5466, 5467), SD(0, 0), SD(0, 0), SD(0, 0), SD(5467, 5468), SD(0, 0), SD(0, 0), SD(0, 0), SD(5468, 5469), SD(0, 0), SD(0, 0), SD(0, 0), SD(5469, 5470), SD(0, 0), SD(4670, 4671), SD(0, 0), SD(5470, 5471), SD(0, 0), SD(0, 0), SD(0, 0), SD(5471, 5473), SD(0, 0), SD(5473, 5475), SD(0, 0), SD(5475, 5477), SD(0, 0), SD(5477, 5479), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingIsolated(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Isolated(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Circle(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x2460 && input <= 0x32FE) {
        if (input <= 0x2473)
            return cast(void*)&LUT_F536F117[cast(size_t)(0 + (input - 0x2460))];
        else if (input >= 0x24B6 && input <= 0x24EA)
            return cast(void*)&LUT_F536F117[cast(size_t)(20 + (input - 0x24B6))];
        else if (input >= 0x3244)
            return cast(void*)&LUT_F536F117[cast(size_t)(73 + (input - 0x3244))];
    } else if (input >= 0x1F12B && input <= 0x1F251) {
        if (input <= 0x1F12E)
            return cast(void*)&LUT_F536F117[cast(size_t)(260 + (input - 0x1F12B))];
        else if (input >= 0x1F250)
            return cast(void*)&LUT_F536F117[cast(size_t)(264 + (input - 0x1F250))];
    }
    return null;
}
private {
    static immutable LUT_F536F117 = [SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2257, 2259), SD(2259, 2261), SD(2261, 2263), SD(2263, 2265), SD(2265, 2267), SD(2267, 2269), SD(2269, 2271), SD(2271, 2273), SD(2273, 2275), SD(2275, 2277), SD(2277, 2279), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(2000, 2001), SD(3167, 3168), SD(3168, 3169), SD(2565, 2566), SD(3169, 3170), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(3173, 3175), SD(3175, 3177), SD(3177, 3179), SD(3179, 3181), SD(3181, 3183), SD(3183, 3185), SD(3185, 3187), SD(3187, 3189), SD(3189, 3191), SD(3191, 3193), SD(3193, 3195), SD(3195, 3197), SD(3197, 3199), SD(3199, 3201), SD(3201, 3203), SD(2840, 2841), SD(2843, 2844), SD(2846, 2847), SD(2848, 2849), SD(2856, 2857), SD(2857, 2858), SD(2860, 2861), SD(2862, 2863), SD(2863, 2864), SD(2865, 2866), SD(2866, 2867), SD(2867, 2868), SD(2868, 2869), SD(2869, 2870), SD(3203, 3205), SD(3205, 3207), SD(3207, 3209), SD(3209, 3211), SD(3211, 3213), SD(3213, 3215), SD(3215, 3217), SD(3217, 3219), SD(3219, 3221), SD(3221, 3223), SD(3223, 3225), SD(3225, 3227), SD(3227, 3229), SD(3229, 3231), SD(3231, 3236), SD(3236, 3240), SD(3240, 3242), SD(0, 0), SD(2499, 2500), SD(2505, 2506), SD(2934, 2935), SD(2935, 2936), SD(3242, 3243), SD(3243, 3244), SD(3244, 3245), SD(2510, 2511), SD(3245, 3246), SD(2522, 2523), SD(2572, 2573), SD(2584, 2585), SD(2583, 2584), SD(2573, 2574), SD(2665, 2666), SD(2530, 2531), SD(2570, 2571), SD(3246, 3247), SD(3247, 3248), SD(3248, 3249), SD(3249, 3250), SD(3250, 3251), SD(3251, 3252), SD(3252, 3253), SD(3253, 3254), SD(3254, 3255), SD(3255, 3256), SD(2536, 2537), SD(3256, 3257), SD(3257, 3258), SD(3258, 3259), SD(3259, 3260), SD(3260, 3261), SD(3261, 3262), SD(3262, 3263), SD(3263, 3264), SD(2936, 2937), SD(2937, 2938), SD(2938, 2939), SD(3264, 3265), SD(3265, 3266), SD(3266, 3267), SD(3267, 3268), SD(3268, 3269), SD(3269, 3270), SD(3270, 3271), SD(3271, 3272), SD(3272, 3273), SD(3273, 3274), SD(3274, 3276), SD(3276, 3278), SD(3278, 3280), SD(3280, 3282), SD(3282, 3284), SD(3284, 3286), SD(3286, 3288), SD(3288, 3290), SD(3290, 3292), SD(3292, 3294), SD(3294, 3296), SD(3296, 3298), SD(3298, 3300), SD(3300, 3302), SD(3302, 3304), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(3341, 3342), SD(3342, 3343), SD(3343, 3344), SD(3344, 3345), SD(3345, 3346), SD(3346, 3347), SD(3347, 3348), SD(3348, 3349), SD(3349, 3350), SD(3350, 3351), SD(3351, 3352), SD(3352, 3353), SD(3353, 3354), SD(3354, 3355), SD(3355, 3356), SD(3356, 3357), SD(3357, 3358), SD(3358, 3359), SD(3359, 3360), SD(3360, 3361), SD(3361, 3362), SD(3362, 3363), SD(3363, 3364), SD(3364, 3365), SD(3365, 3366), SD(3366, 3367), SD(3367, 3368), SD(3368, 3369), SD(3369, 3370), SD(3370, 3371), SD(3371, 3372), SD(3372, 3373), SD(3373, 3374), SD(3374, 3375), SD(3375, 3376), SD(3376, 3377), SD(3377, 3378), SD(3378, 3379), SD(3379, 3380), SD(3380, 3381), SD(3381, 3382), SD(3382, 3383), SD(3383, 3384), SD(3384, 3385), SD(3385, 3386), SD(3386, 3387), SD(3387, 3388), SD(2021, 2022), SD(962, 963), SD(5822, 5824), SD(5824, 5826), SD(5907, 5908), SD(5908, 5909), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingCircle(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Circle(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Super(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xAA && input <= 0xAB69) {
        if (input <= 0x319F) {
            if (input <= 0xBA)
                return cast(void*)&LUT_864D150E[cast(size_t)(0 + (input - 0xAA))];
            else if (input >= 0x2B0 && input <= 0x2E4)
                return cast(void*)&LUT_864D150E[cast(size_t)(17 + (input - 0x2B0))];
            else if (input == 0x10FC)
                return cast(void*)&LUT_864D150E[cast(size_t)(70 + (input - 0x10FC))];
            else if (input >= 0x1D2C && input <= 0x1DBF)
                return cast(void*)&LUT_864D150E[cast(size_t)(71 + (input - 0x1D2C))];
            else if (input >= 0x2070 && input <= 0x207F)
                return cast(void*)&LUT_864D150E[cast(size_t)(219 + (input - 0x2070))];
            else if (input >= 0x2120 && input <= 0x2122)
                return cast(void*)&LUT_864D150E[cast(size_t)(235 + (input - 0x2120))];
            else if (input == 0x2C7D)
                return cast(void*)&LUT_864D150E[cast(size_t)(238 + (input - 0x2C7D))];
            else if (input == 0x2D6F)
                return cast(void*)&LUT_864D150E[cast(size_t)(239 + (input - 0x2D6F))];
            else if (input >= 0x3192)
                return cast(void*)&LUT_864D150E[cast(size_t)(240 + (input - 0x3192))];
        } else if (input >= 0xA69C) {
            if (input <= 0xA69D)
                return cast(void*)&LUT_864D150E[cast(size_t)(254 + (input - 0xA69C))];
            else if (input == 0xA770)
                return cast(void*)&LUT_864D150E[cast(size_t)(256 + (input - 0xA770))];
            else if (input >= 0xA7F2 && input <= 0xA7F9)
                return cast(void*)&LUT_864D150E[cast(size_t)(257 + (input - 0xA7F2))];
            else if (input >= 0xAB5C)
                return cast(void*)&LUT_864D150E[cast(size_t)(265 + (input - 0xAB5C))];
        }
    } else if (input >= 0x10781 && input <= 0x1F16C) {
        if (input <= 0x107BA) {
            return cast(void*)&LUT_864D150E[cast(size_t)(279 + (input - 0x10781))];
        } else if (input >= 0x1F16A) {
            return cast(void*)&LUT_864D150E[cast(size_t)(337 + (input - 0x1F16A))];
        }
    }
    return null;
}
private {
    static immutable LUT_864D150E = [SD(3, 4), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(6, 7), SD(7, 8), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(13, 14), SD(14, 15), SD(563, 564), SD(564, 565), SD(565, 566), SD(566, 567), SD(567, 568), SD(568, 569), SD(569, 570), SD(570, 571), SD(571, 572), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(584, 585), SD(585, 586), SD(356, 357), SD(586, 587), SD(587, 588), SD(922, 923), SD(945, 946), SD(946, 947), SD(947, 948), SD(0, 0), SD(948, 949), SD(949, 950), SD(950, 951), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(0, 0), SD(959, 960), SD(960, 961), SD(961, 962), SD(962, 963), SD(963, 964), SD(964, 965), SD(965, 966), SD(3, 4), SD(966, 967), SD(967, 968), SD(968, 969), SD(969, 970), SD(970, 971), SD(971, 972), SD(972, 973), SD(973, 974), SD(974, 975), SD(975, 976), SD(0, 0), SD(976, 977), SD(977, 978), SD(978, 979), SD(14, 15), SD(979, 980), SD(980, 981), SD(981, 982), SD(982, 983), SD(983, 984), SD(984, 985), SD(985, 986), SD(986, 987), SD(987, 988), SD(988, 989), SD(640, 641), SD(989, 990), SD(990, 991), SD(647, 648), SD(991, 992), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(993, 994), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(994, 995), SD(995, 996), SD(996, 997), SD(997, 998), SD(974, 975), SD(998, 999), SD(999, 1000), SD(1000, 1001), SD(1001, 1002), SD(1002, 1003), SD(1003, 1004), SD(1004, 1005), SD(1005, 1006), SD(1006, 1007), SD(1007, 1008), SD(1008, 1009), SD(1009, 1010), SD(1010, 1011), SD(1011, 1012), SD(1012, 1013), SD(1013, 1014), SD(1014, 1015), SD(1015, 1016), SD(1016, 1017), SD(1017, 1018), SD(1018, 1019), SD(1019, 1020), SD(1020, 1021), SD(1021, 1022), SD(1022, 1023), SD(1023, 1024), SD(1024, 1025), SD(1025, 1026), SD(1026, 1027), SD(1027, 1028), SD(1028, 1029), SD(641, 642), SD(2000, 2001), SD(992, 993), SD(0, 0), SD(0, 0), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2007, 2008), SD(2008, 2009), SD(2009, 2010), SD(2010, 2011), SD(2011, 2012), SD(2012, 2013), SD(2037, 2039), SD(0, 0), SD(2042, 2044), SD(2113, 2114), SD(2496, 2497), SD(2499, 2500), SD(2505, 2506), SD(2934, 2935), SD(2935, 2936), SD(2936, 2937), SD(2937, 2938), SD(2938, 2939), SD(2939, 2940), SD(2503, 2504), SD(2940, 2941), SD(2941, 2942), SD(2942, 2943), SD(2943, 2944), SD(2507, 2508), SD(4112, 4113), SD(4113, 4114), SD(4114, 4115), SD(2021, 2022), SD(2047, 2048), SD(2036, 2037), SD(0, 0), SD(0, 0), SD(0, 0), SD(4115, 4116), SD(4116, 4117), SD(4117, 4118), SD(4118, 4119), SD(4119, 4120), SD(4120, 4121), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4121, 4122), SD(5567, 5568), SD(5568, 5569), SD(5569, 5570), SD(5570, 5571), SD(5571, 5572), SD(0, 0), SD(5572, 5573), SD(5573, 5574), SD(5574, 5575), SD(5575, 5576), SD(5576, 5577), SD(5577, 5578), SD(5578, 5579), SD(5579, 5580), SD(5580, 5581), SD(5581, 5582), SD(5582, 5583), SD(5583, 5584), SD(5584, 5585), SD(5585, 5586), SD(2033, 2034), SD(5586, 5587), SD(5587, 5588), SD(5588, 5589), SD(5589, 5590), SD(5590, 5591), SD(5591, 5592), SD(5592, 5593), SD(5593, 5594), SD(5594, 5595), SD(5595, 5596), SD(5596, 5597), SD(5597, 5598), SD(5598, 5599), SD(5599, 5600), SD(5600, 5601), SD(2481, 2482), SD(5601, 5602), SD(5602, 5603), SD(5603, 5604), SD(5604, 5605), SD(5605, 5606), SD(5606, 5607), SD(5607, 5608), SD(5608, 5609), SD(5609, 5610), SD(5610, 5611), SD(5611, 5612), SD(0, 0), SD(5612, 5613), SD(5613, 5614), SD(5614, 5615), SD(5615, 5616), SD(5616, 5617), SD(5617, 5618), SD(5618, 5619), SD(5619, 5620), SD(5620, 5621), SD(5837, 5839), SD(5839, 5841), SD(5841, 5843), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingSuper(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Super(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Sub(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x1D62 && input <= 0x1D6A)
        return cast(void*)&LUT_1314BB8E[cast(size_t)(0 + (input - 0x1D62))];
    else if (input >= 0x2080 && input <= 0x209C)
        return cast(void*)&LUT_1314BB8E[cast(size_t)(9 + (input - 0x2080))];
    else if (input == 0x2C7C)
        return cast(void*)&LUT_1314BB8E[cast(size_t)(38 + (input - 0x2C7C))];
    return null;
}
private {
    static immutable LUT_1314BB8E = [SD(992, 993), SD(566, 567), SD(984, 985), SD(987, 988), SD(640, 641), SD(989, 990), SD(650, 651), SD(647, 648), SD(991, 992), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2007, 2008), SD(2008, 2009), SD(2009, 2010), SD(2010, 2011), SD(2011, 2012), SD(0, 0), SD(3, 4), SD(971, 972), SD(14, 15), SD(586, 587), SD(972, 973), SD(563, 564), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(982, 983), SD(356, 357), SD(983, 984), SD(565, 566), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingSub(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Sub(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Vertical(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x309F && input <= 0x30FF) {
        if (input == 0x309F)
            return cast(void*)&LUT_BD7006CF[cast(size_t)(0 + (input - 0x309F))];
        else if (input == 0x30FF)
            return cast(void*)&LUT_BD7006CF[cast(size_t)(1 + (input - 0x30FF))];
    } else if (input >= 0xFE10 && input <= 0xFE48) {
        return cast(void*)&LUT_BD7006CF[cast(size_t)(2 + (input - 0xFE10))];
    }
    return null;
}
private {
    static immutable LUT_BD7006CF = [SD(2774, 2776), SD(2838, 2840), SD(5370, 5371), SD(5371, 5372), SD(5372, 5373), SD(5373, 5374), SD(596, 597), SD(5374, 5375), SD(5375, 5376), SD(5376, 5377), SD(5377, 5378), SD(5378, 5379), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5379, 5380), SD(5380, 5381), SD(5381, 5382), SD(5382, 5383), SD(5382, 5383), SD(2010, 2011), SD(2011, 2012), SD(5383, 5384), SD(5384, 5385), SD(5385, 5386), SD(5386, 5387), SD(5387, 5388), SD(5388, 5389), SD(5389, 5390), SD(5390, 5391), SD(2255, 2256), SD(2256, 2257), SD(5391, 5392), SD(5392, 5393), SD(5393, 5394), SD(5394, 5395), SD(0, 0), SD(0, 0), SD(5395, 5396), SD(5396, 5397), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingVertical(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Vertical(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Wide(dchar input) @trusted nothrow @nogc pure {
    if (input == 0x3000) {
        return cast(void*)&LUT_88AAF6BE[cast(size_t)(0 + (input - 0x3000))];
    } else if (input >= 0xFF01 && input <= 0xFFE6) {
        if (input <= 0xFF60)
            return cast(void*)&LUT_88AAF6BE[cast(size_t)(1 + (input - 0xFF01))];
        else if (input >= 0xFFE0)
            return cast(void*)&LUT_88AAF6BE[cast(size_t)(97 + (input - 0xFFE0))];
    }
    return null;
}
private {
    static immutable LUT_88AAF6BE = [SD(0, 1), SD(5374, 5375), SD(5479, 5480), SD(5398, 5399), SD(5405, 5406), SD(5406, 5407), SD(5399, 5400), SD(5480, 5481), SD(2010, 2011), SD(2011, 2012), SD(5400, 5401), SD(2007, 2008), SD(5370, 5371), SD(5401, 5402), SD(1970, 1971), SD(5481, 5482), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(5373, 5374), SD(596, 597), SD(5402, 5403), SD(2009, 2010), SD(5403, 5404), SD(5375, 5376), SD(5407, 5408), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(5395, 5396), SD(5404, 5405), SD(5396, 5397), SD(5482, 5483), SD(5382, 5383), SD(1943, 1944), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(5383, 5384), SD(5483, 5484), SD(5384, 5385), SD(5484, 5485), SD(5485, 5486), SD(5486, 5487), SD(5553, 5554), SD(5554, 5555), SD(5555, 5556), SD(5556, 5557), SD(5557, 5558), SD(5558, 5559), SD(5559, 5560), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingWide(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Wide(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Narrow(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFF61 && input <= 0xFFEE)
        return cast(void*)&LUT_3A0C17AE[cast(size_t)(0 + (input - 0xFF61))];
    return null;
}
private {
    static immutable LUT_3A0C17AE = [SD(5372, 5373), SD(5391, 5392), SD(5392, 5393), SD(5371, 5372), SD(5487, 5488), SD(3387, 3388), SD(5488, 5489), SD(5489, 5490), SD(5490, 5491), SD(5491, 5492), SD(5492, 5493), SD(5493, 5494), SD(5494, 5495), SD(5495, 5496), SD(5496, 5497), SD(5497, 5498), SD(3341, 3342), SD(3342, 3343), SD(3343, 3344), SD(3344, 3345), SD(3345, 3346), SD(3346, 3347), SD(3347, 3348), SD(3348, 3349), SD(3349, 3350), SD(3350, 3351), SD(3351, 3352), SD(3352, 3353), SD(3353, 3354), SD(3354, 3355), SD(3355, 3356), SD(3356, 3357), SD(3357, 3358), SD(3358, 3359), SD(3359, 3360), SD(3360, 3361), SD(3361, 3362), SD(3362, 3363), SD(3363, 3364), SD(3364, 3365), SD(3365, 3366), SD(3366, 3367), SD(3367, 3368), SD(3368, 3369), SD(3369, 3370), SD(3370, 3371), SD(3371, 3372), SD(3372, 3373), SD(3373, 3374), SD(3374, 3375), SD(3375, 3376), SD(3376, 3377), SD(3377, 3378), SD(3378, 3379), SD(3379, 3380), SD(3380, 3381), SD(3381, 3382), SD(3382, 3383), SD(3383, 3384), SD(3384, 3385), SD(5498, 5499), SD(5499, 5500), SD(5500, 5501), SD(5501, 5502), SD(5502, 5503), SD(5503, 5504), SD(5504, 5505), SD(5505, 5506), SD(5506, 5507), SD(5507, 5508), SD(5508, 5509), SD(5509, 5510), SD(5510, 5511), SD(5511, 5512), SD(5512, 5513), SD(5513, 5514), SD(5514, 5515), SD(5515, 5516), SD(5516, 5517), SD(5517, 5518), SD(5518, 5519), SD(5519, 5520), SD(5520, 5521), SD(5521, 5522), SD(5522, 5523), SD(5523, 5524), SD(5524, 5525), SD(5525, 5526), SD(5526, 5527), SD(5527, 5528), SD(5528, 5529), SD(5529, 5530), SD(5530, 5531), SD(5531, 5532), SD(0, 0), SD(0, 0), SD(0, 0), SD(5532, 5533), SD(5533, 5534), SD(5534, 5535), SD(5535, 5536), SD(5536, 5537), SD(5537, 5538), SD(0, 0), SD(0, 0), SD(5538, 5539), SD(5539, 5540), SD(5540, 5541), SD(5541, 5542), SD(5542, 5543), SD(5543, 5544), SD(0, 0), SD(0, 0), SD(5544, 5545), SD(5545, 5546), SD(5546, 5547), SD(5547, 5548), SD(5548, 5549), SD(5549, 5550), SD(0, 0), SD(0, 0), SD(5550, 5551), SD(5551, 5552), SD(5552, 5553), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5560, 5561), SD(5561, 5562), SD(5562, 5563), SD(5563, 5564), SD(5564, 5565), SD(5565, 5566), SD(5566, 5567), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingNarrow(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Narrow(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Small(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFE50 && input <= 0xFE6B)
        return cast(void*)&LUT_32D996E4[cast(size_t)(0 + (input - 0xFE50))];
    return null;
}
private {
    static immutable LUT_32D996E4 = [SD(5370, 5371), SD(5371, 5372), SD(1970, 1971), SD(0, 0), SD(596, 597), SD(5373, 5374), SD(5375, 5376), SD(5374, 5375), SD(5380, 5381), SD(2010, 2011), SD(2011, 2012), SD(5383, 5384), SD(5384, 5385), SD(5385, 5386), SD(5386, 5387), SD(5398, 5399), SD(5399, 5400), SD(5400, 5401), SD(2007, 2008), SD(5401, 5402), SD(5402, 5403), SD(5403, 5404), SD(2009, 2010), SD(0, 0), SD(5404, 5405), SD(5405, 5406), SD(5406, 5407), SD(5407, 5408), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingSmall(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Small(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Square(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x3250 && input <= 0x33FF) {
        if (input == 0x3250)
            return cast(void*)&LUT_19735AB2[cast(size_t)(0 + (input - 0x3250))];
        else if (input >= 0x32CC)
            return cast(void*)&LUT_19735AB2[cast(size_t)(1 + (input - 0x32CC))];
    } else if (input >= 0x1F130 && input <= 0x1F23B) {
        if (input <= 0x1F14F)
            return cast(void*)&LUT_19735AB2[cast(size_t)(309 + (input - 0x1F130))];
        else if (input == 0x1F190)
            return cast(void*)&LUT_19735AB2[cast(size_t)(341 + (input - 0x1F190))];
        else if (input >= 0x1F200)
            return cast(void*)&LUT_19735AB2[cast(size_t)(342 + (input - 0x1F200))];
    }
    return null;
}
private {
    static immutable LUT_19735AB2 = [SD(3170, 3173), SD(3331, 3333), SD(3333, 3336), SD(3336, 3338), SD(3338, 3341), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(3388, 3390), SD(3390, 3394), SD(3394, 3398), SD(3398, 3402), SD(3402, 3405), SD(3405, 3409), SD(3409, 3412), SD(3412, 3415), SD(3415, 3420), SD(3420, 3424), SD(3424, 3427), SD(3427, 3430), SD(3430, 3433), SD(3433, 3437), SD(3437, 3441), SD(3441, 3444), SD(3444, 3447), SD(3447, 3449), SD(3449, 3452), SD(3452, 3456), SD(3456, 3460), SD(3460, 3462), SD(3462, 3467), SD(3467, 3473), SD(3473, 3478), SD(3478, 3481), SD(3481, 3486), SD(3486, 3491), SD(3491, 3495), SD(3495, 3498), SD(3498, 3501), SD(3501, 3504), SD(3504, 3508), SD(3508, 3513), SD(3513, 3517), SD(3517, 3520), SD(3520, 3523), SD(3523, 3526), SD(3526, 3528), SD(3528, 3530), SD(3530, 3532), SD(3532, 3534), SD(3534, 3537), SD(3537, 3540), SD(3540, 3545), SD(3545, 3548), SD(3548, 3552), SD(3552, 3557), SD(3557, 3560), SD(3560, 3562), SD(3562, 3564), SD(3564, 3569), SD(3569, 3573), SD(3573, 3578), SD(3578, 3581), SD(3581, 3586), SD(3586, 3588), SD(3588, 3591), SD(3591, 3594), SD(3594, 3597), SD(3597, 3600), SD(3600, 3603), SD(3603, 3607), SD(3607, 3610), SD(3610, 3612), SD(3612, 3615), SD(3615, 3618), SD(3618, 3621), SD(3621, 3625), SD(3625, 3628), SD(3628, 3631), SD(3631, 3634), SD(3634, 3639), SD(3639, 3643), SD(3643, 3645), SD(3645, 3650), SD(3650, 3652), SD(3652, 3656), SD(3656, 3660), SD(3660, 3663), SD(3663, 3666), SD(3666, 3669), SD(3669, 3673), SD(3673, 3675), SD(3675, 3678), SD(3678, 3682), SD(3682, 3684), SD(3684, 3689), SD(3689, 3692), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(3757, 3760), SD(3760, 3762), SD(3762, 3764), SD(3764, 3767), SD(3767, 3769), SD(3769, 3771), SD(3771, 3773), SD(3773, 3776), SD(3776, 3779), SD(3779, 3781), SD(3781, 3783), SD(3783, 3785), SD(3785, 3787), SD(3787, 3789), SD(3789, 3793), SD(3793, 3795), SD(3795, 3797), SD(3797, 3799), SD(3799, 3801), SD(3801, 3803), SD(3803, 3805), SD(3805, 3807), SD(3807, 3809), SD(3809, 3812), SD(3812, 3816), SD(3816, 3818), SD(3818, 3820), SD(3820, 3822), SD(3822, 3824), SD(3824, 3826), SD(3826, 3828), SD(3828, 3830), SD(3830, 3833), SD(3833, 3836), SD(3836, 3839), SD(3839, 3842), SD(3842, 3844), SD(3844, 3846), SD(3846, 3848), SD(3848, 3850), SD(3850, 3852), SD(3852, 3854), SD(3854, 3856), SD(3856, 3858), SD(3858, 3860), SD(3860, 3862), SD(3862, 3865), SD(3865, 3868), SD(3868, 3870), SD(3870, 3873), SD(3873, 3876), SD(3876, 3879), SD(3879, 3881), SD(3881, 3884), SD(3884, 3887), SD(3887, 3891), SD(3891, 3893), SD(3893, 3896), SD(3896, 3899), SD(3899, 3902), SD(3902, 3905), SD(3905, 3910), SD(3910, 3916), SD(3916, 3918), SD(3918, 3920), SD(3920, 3922), SD(3922, 3924), SD(3924, 3926), SD(3926, 3928), SD(3928, 3930), SD(3930, 3932), SD(3932, 3934), SD(3934, 3936), SD(3936, 3938), SD(3938, 3940), SD(3940, 3942), SD(3942, 3944), SD(3944, 3946), SD(3946, 3948), SD(3948, 3950), SD(3950, 3952), SD(3952, 3956), SD(3956, 3958), SD(3958, 3960), SD(3960, 3962), SD(3962, 3966), SD(3966, 3969), SD(3969, 3971), SD(3971, 3973), SD(3973, 3975), SD(3975, 3977), SD(3977, 3979), SD(3979, 3981), SD(3981, 3983), SD(3983, 3985), SD(3985, 3987), SD(3987, 3989), SD(3989, 3992), SD(3992, 3994), SD(3994, 3996), SD(3996, 3999), SD(3999, 4002), SD(4002, 4004), SD(4004, 4008), SD(4008, 4011), SD(4011, 4013), SD(4013, 4015), SD(4015, 4017), SD(4017, 4019), SD(4019, 4022), SD(4022, 4025), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4109, 4112), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(5826, 5828), SD(3934, 3936), SD(5828, 5830), SD(5830, 5832), SD(5832, 5835), SD(5835, 5837), SD(5843, 5845), SD(5845, 5847), SD(5847, 5849), SD(3351, 3352), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2562, 2563), SD(5849, 5850), SD(5850, 5851), SD(5851, 5852), SD(2505, 2506), SD(5852, 5853), SD(5853, 5854), SD(2942, 2943), SD(5854, 5855), SD(5855, 5856), SD(5856, 5857), SD(4300, 4301), SD(5857, 5858), SD(5858, 5859), SD(5859, 5860), SD(5860, 5861), SD(5861, 5862), SD(5862, 5863), SD(2598, 2599), SD(5863, 5864), SD(5864, 5865), SD(5865, 5866), SD(5866, 5867), SD(5867, 5868), SD(5868, 5869), SD(2499, 2500), SD(2934, 2935), SD(5869, 5870), SD(3264, 3265), SD(2937, 2938), SD(3265, 3266), SD(5870, 5871), SD(2654, 2655), SD(5871, 5872), SD(5872, 5873), SD(5873, 5874), SD(5874, 5875), SD(5875, 5876), SD(3247, 3248), SD(2572, 2573), SD(5876, 5877), SD(5877, 5878), SD(5878, 5879), SD(5879, 5880), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingSquare(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Square(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Fraction(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xBC && input <= 0xBE)
        return cast(void*)&LUT_6E858E6A[cast(size_t)(0 + (input - 0xBC))];
    else if (input >= 0x2150 && input <= 0x2189)
        return cast(void*)&LUT_6E858E6A[cast(size_t)(3 + (input - 0x2150))];
    return null;
}
private {
    static immutable LUT_6E858E6A = [SD(15, 18), SD(18, 21), SD(21, 24), SD(2058, 2061), SD(2061, 2064), SD(2064, 2068), SD(2068, 2071), SD(2071, 2074), SD(2074, 2077), SD(2077, 2080), SD(2080, 2083), SD(2083, 2086), SD(2086, 2089), SD(2089, 2092), SD(2092, 2095), SD(2095, 2098), SD(2098, 2101), SD(2101, 2104), SD(2104, 2106), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2154, 2157), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingFraction(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Fraction(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMapping2Compat(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xA8 && input <= 0xFE4F) {
        if (input <= 0x33FE) {
            if (input <= 0xB8)
                return cast(void*)&LUT_B001991A[cast(size_t)(0 + (input - 0xA8))];
            else if (input >= 0x132 && input <= 0x17F)
                return cast(void*)&LUT_B001991A[cast(size_t)(17 + (input - 0x132))];
            else if (input >= 0x1C4 && input <= 0x1F3)
                return cast(void*)&LUT_B001991A[cast(size_t)(95 + (input - 0x1C4))];
            else if (input >= 0x2D8 && input <= 0x2DD)
                return cast(void*)&LUT_B001991A[cast(size_t)(143 + (input - 0x2D8))];
            else if (input >= 0x37A && input <= 0x384)
                return cast(void*)&LUT_B001991A[cast(size_t)(149 + (input - 0x37A))];
            else if (input >= 0x3D0 && input <= 0x3F9)
                return cast(void*)&LUT_B001991A[cast(size_t)(160 + (input - 0x3D0))];
            else if (input == 0x587)
                return cast(void*)&LUT_B001991A[cast(size_t)(202 + (input - 0x587))];
            else if (input >= 0x675 && input <= 0x678)
                return cast(void*)&LUT_B001991A[cast(size_t)(203 + (input - 0x675))];
            else if (input == 0xE33)
                return cast(void*)&LUT_B001991A[cast(size_t)(207 + (input - 0xE33))];
            else if (input >= 0xEB3 && input <= 0xEDD)
                return cast(void*)&LUT_B001991A[cast(size_t)(208 + (input - 0xEB3))];
            else if (input >= 0xF77 && input <= 0xF79)
                return cast(void*)&LUT_B001991A[cast(size_t)(251 + (input - 0xF77))];
            else if (input == 0x1E9A)
                return cast(void*)&LUT_B001991A[cast(size_t)(254 + (input - 0x1E9A))];
            else if (input >= 0x1FBD && input <= 0x205F)
                return cast(void*)&LUT_B001991A[cast(size_t)(255 + (input - 0x1FBD))];
            else if (input == 0x20A8)
                return cast(void*)&LUT_B001991A[cast(size_t)(418 + (input - 0x20A8))];
            else if (input >= 0x2100 && input <= 0x217F)
                return cast(void*)&LUT_B001991A[cast(size_t)(419 + (input - 0x2100))];
            else if (input >= 0x222C && input <= 0x2230)
                return cast(void*)&LUT_B001991A[cast(size_t)(547 + (input - 0x222C))];
            else if (input >= 0x2474 && input <= 0x24B5)
                return cast(void*)&LUT_B001991A[cast(size_t)(552 + (input - 0x2474))];
            else if (input == 0x2A0C)
                return cast(void*)&LUT_B001991A[cast(size_t)(618 + (input - 0x2A0C))];
            else if (input >= 0x2A74 && input <= 0x2A76)
                return cast(void*)&LUT_B001991A[cast(size_t)(619 + (input - 0x2A74))];
            else if (input == 0x2E9F)
                return cast(void*)&LUT_B001991A[cast(size_t)(622 + (input - 0x2E9F))];
            else if (input >= 0x2EF3 && input <= 0x2FD5)
                return cast(void*)&LUT_B001991A[cast(size_t)(623 + (input - 0x2EF3))];
            else if (input >= 0x3036 && input <= 0x303A)
                return cast(void*)&LUT_B001991A[cast(size_t)(850 + (input - 0x3036))];
            else if (input >= 0x309B && input <= 0x309C)
                return cast(void*)&LUT_B001991A[cast(size_t)(855 + (input - 0x309B))];
            else if (input >= 0x3131 && input <= 0x318E)
                return cast(void*)&LUT_B001991A[cast(size_t)(857 + (input - 0x3131))];
            else if (input >= 0x3200 && input <= 0x3243)
                return cast(void*)&LUT_B001991A[cast(size_t)(951 + (input - 0x3200))];
            else if (input >= 0x32C0 && input <= 0x32CB)
                return cast(void*)&LUT_B001991A[cast(size_t)(1019 + (input - 0x32C0))];
            else if (input >= 0x3358 && input <= 0x3370)
                return cast(void*)&LUT_B001991A[cast(size_t)(1031 + (input - 0x3358))];
            else if (input >= 0x33E0)
                return cast(void*)&LUT_B001991A[cast(size_t)(1056 + (input - 0x33E0))];
        } else if (input >= 0xFB00) {
            if (input <= 0xFB4F)
                return cast(void*)&LUT_B001991A[cast(size_t)(1087 + (input - 0xFB00))];
            else if (input >= 0xFE49)
                return cast(void*)&LUT_B001991A[cast(size_t)(1167 + (input - 0xFE49))];
        }
    } else if (input >= 0x1F100 && input <= 0x1F248) {
        if (input <= 0x1F12A)
            return cast(void*)&LUT_B001991A[cast(size_t)(1174 + (input - 0x1F100))];
        else if (input >= 0x1F240)
            return cast(void*)&LUT_B001991A[cast(size_t)(1217 + (input - 0x1F240))];
    }
    return null;
}
private {
    static immutable LUT_B001991A = [SD(1, 3), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4, 6), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(8, 10), SD(10, 11), SD(0, 0), SD(0, 0), SD(11, 13), SD(220, 222), SD(222, 224), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(244, 246), SD(246, 248), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(260, 262), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(356, 357), SD(365, 367), SD(367, 369), SD(369, 371), SD(371, 373), SD(373, 375), SD(375, 377), SD(377, 379), SD(379, 381), SD(381, 383), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(449, 451), SD(451, 453), SD(453, 455), SD(572, 574), SD(574, 576), SD(576, 578), SD(578, 580), SD(580, 582), SD(582, 584), SD(594, 596), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(8, 10), SD(640, 641), SD(641, 642), SD(642, 643), SD(0, 0), SD(0, 0), SD(647, 648), SD(648, 649), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(649, 650), SD(650, 651), SD(651, 652), SD(0, 0), SD(652, 653), SD(653, 654), SD(0, 0), SD(0, 0), SD(0, 0), SD(654, 655), SD(759, 761), SD(771, 773), SD(773, 775), SD(775, 777), SD(777, 779), SD(873, 875), SD(875, 877), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(877, 879), SD(879, 881), SD(900, 902), SD(0, 0), SD(904, 906), SD(1337, 1339), SD(1861, 1863), SD(0, 0), SD(1861, 1863), SD(1864, 1866), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1963, 1965), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 0), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1968, 1970), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1970, 1971), SD(1971, 1973), SD(1973, 1976), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1976, 1978), SD(1978, 1981), SD(0, 0), SD(1981, 1983), SD(1983, 1986), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1986, 1988), SD(0, 0), SD(1988, 1990), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1990, 1992), SD(1992, 1994), SD(1994, 1996), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1996, 2000), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 1), SD(2013, 2015), SD(2015, 2018), SD(2018, 2021), SD(0, 0), SD(2022, 2024), SD(0, 0), SD(2024, 2027), SD(2027, 2030), SD(2030, 2031), SD(0, 0), SD(2031, 2033), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2034, 2036), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2039, 2042), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2048, 2049), SD(2049, 2050), SD(2050, 2051), SD(2051, 2052), SD(0, 0), SD(0, 0), SD(2052, 2055), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(953, 954), SD(2106, 2108), SD(2108, 2111), SD(2111, 2113), SD(2113, 2114), SD(2114, 2116), SD(2116, 2119), SD(2119, 2123), SD(2123, 2125), SD(2125, 2126), SD(2126, 2128), SD(2128, 2131), SD(956, 957), SD(2021, 2022), SD(948, 949), SD(957, 958), SD(992, 993), SD(2131, 2133), SD(2133, 2136), SD(2136, 2138), SD(987, 988), SD(2138, 2140), SD(2140, 2143), SD(2143, 2147), SD(2147, 2149), SD(586, 587), SD(2149, 2151), SD(2151, 2154), SD(585, 586), SD(995, 996), SD(970, 971), SD(977, 978), SD(2179, 2181), SD(2181, 2184), SD(0, 0), SD(2184, 2186), SD(2186, 2189), SD(2279, 2282), SD(2282, 2285), SD(2285, 2288), SD(2288, 2291), SD(2291, 2294), SD(2294, 2297), SD(2297, 2300), SD(2300, 2303), SD(2303, 2306), SD(2306, 2310), SD(2310, 2314), SD(2314, 2318), SD(2318, 2322), SD(2322, 2326), SD(2326, 2330), SD(2330, 2334), SD(2334, 2338), SD(2338, 2342), SD(2342, 2346), SD(2346, 2350), SD(2350, 2352), SD(2352, 2354), SD(2354, 2356), SD(2356, 2358), SD(2358, 2360), SD(2360, 2362), SD(2362, 2364), SD(2364, 2366), SD(2366, 2368), SD(2368, 2371), SD(2371, 2374), SD(2374, 2377), SD(2377, 2380), SD(2380, 2383), SD(2383, 2386), SD(2386, 2389), SD(2389, 2392), SD(2392, 2395), SD(2395, 2398), SD(2398, 2401), SD(2401, 2404), SD(2404, 2407), SD(2407, 2410), SD(2410, 2413), SD(2413, 2416), SD(2416, 2419), SD(2419, 2422), SD(2422, 2425), SD(2425, 2428), SD(2428, 2431), SD(2431, 2434), SD(2434, 2437), SD(2437, 2440), SD(2440, 2443), SD(2443, 2446), SD(2446, 2449), SD(2449, 2452), SD(2452, 2455), SD(2455, 2458), SD(2458, 2461), SD(2461, 2464), SD(2464, 2467), SD(2467, 2470), SD(2470, 2473), SD(2473, 2476), SD(2476, 2479), SD(2482, 2486), SD(2486, 2489), SD(2489, 2491), SD(2491, 2494), SD(2497, 2498), SD(2498, 2499), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2499, 2500), SD(2500, 2501), SD(2501, 2502), SD(2502, 2503), SD(2503, 2504), SD(2504, 2505), SD(2505, 2506), SD(2506, 2507), SD(2507, 2508), SD(2508, 2509), SD(2509, 2510), SD(2510, 2511), SD(2511, 2512), SD(2512, 2513), SD(2513, 2514), SD(2514, 2515), SD(2515, 2516), SD(2516, 2517), SD(2517, 2518), SD(2518, 2519), SD(2519, 2520), SD(2520, 2521), SD(2521, 2522), SD(2522, 2523), SD(2523, 2524), SD(2524, 2525), SD(2525, 2526), SD(2526, 2527), SD(2527, 2528), SD(2528, 2529), SD(2529, 2530), SD(2530, 2531), SD(2531, 2532), SD(2532, 2533), SD(2533, 2534), SD(2534, 2535), SD(2535, 2536), SD(2536, 2537), SD(2537, 2538), SD(2538, 2539), SD(2539, 2540), SD(2540, 2541), SD(2541, 2542), SD(2542, 2543), SD(2543, 2544), SD(2544, 2545), SD(2545, 2546), SD(2546, 2547), SD(2547, 2548), SD(2548, 2549), SD(2549, 2550), SD(2550, 2551), SD(2551, 2552), SD(2552, 2553), SD(2553, 2554), SD(2554, 2555), SD(2555, 2556), SD(2556, 2557), SD(2557, 2558), SD(2558, 2559), SD(2559, 2560), SD(2560, 2561), SD(2561, 2562), SD(2562, 2563), SD(2563, 2564), SD(2564, 2565), SD(2565, 2566), SD(2566, 2567), SD(2567, 2568), SD(2568, 2569), SD(2569, 2570), SD(2570, 2571), SD(2571, 2572), SD(2572, 2573), SD(2573, 2574), SD(2574, 2575), SD(2575, 2576), SD(2576, 2577), SD(2577, 2578), SD(2578, 2579), SD(2579, 2580), SD(2580, 2581), SD(2581, 2582), SD(2582, 2583), SD(2583, 2584), SD(2584, 2585), SD(2585, 2586), SD(2586, 2587), SD(2587, 2588), SD(2588, 2589), SD(2589, 2590), SD(2590, 2591), SD(2591, 2592), SD(2592, 2593), SD(2593, 2594), SD(2594, 2595), SD(2595, 2596), SD(2596, 2597), SD(2597, 2598), SD(2598, 2599), SD(2599, 2600), SD(2600, 2601), SD(2601, 2602), SD(2602, 2603), SD(2603, 2604), SD(2604, 2605), SD(2605, 2606), SD(2606, 2607), SD(2607, 2608), SD(2608, 2609), SD(2609, 2610), SD(2610, 2611), SD(2611, 2612), SD(2612, 2613), SD(2613, 2614), SD(2614, 2615), SD(2615, 2616), SD(2616, 2617), SD(2617, 2618), SD(2618, 2619), SD(2619, 2620), SD(2620, 2621), SD(2621, 2622), SD(2622, 2623), SD(2623, 2624), SD(2624, 2625), SD(2625, 2626), SD(2626, 2627), SD(2627, 2628), SD(2628, 2629), SD(2629, 2630), SD(2630, 2631), SD(2631, 2632), SD(2632, 2633), SD(2633, 2634), SD(2634, 2635), SD(2635, 2636), SD(2636, 2637), SD(2637, 2638), SD(2638, 2639), SD(2639, 2640), SD(2640, 2641), SD(2641, 2642), SD(2642, 2643), SD(2643, 2644), SD(2644, 2645), SD(2645, 2646), SD(2646, 2647), SD(2647, 2648), SD(2648, 2649), SD(2649, 2650), SD(2650, 2651), SD(2651, 2652), SD(2652, 2653), SD(2653, 2654), SD(2654, 2655), SD(2655, 2656), SD(2656, 2657), SD(2657, 2658), SD(2658, 2659), SD(2659, 2660), SD(2660, 2661), SD(2661, 2662), SD(2662, 2663), SD(2663, 2664), SD(2664, 2665), SD(2665, 2666), SD(2666, 2667), SD(2667, 2668), SD(2668, 2669), SD(2669, 2670), SD(2670, 2671), SD(2671, 2672), SD(2672, 2673), SD(2673, 2674), SD(2674, 2675), SD(2675, 2676), SD(2676, 2677), SD(2677, 2678), SD(2678, 2679), SD(2679, 2680), SD(2680, 2681), SD(2681, 2682), SD(2682, 2683), SD(2683, 2684), SD(2684, 2685), SD(2685, 2686), SD(2686, 2687), SD(2687, 2688), SD(2688, 2689), SD(2689, 2690), SD(2690, 2691), SD(2691, 2692), SD(2692, 2693), SD(2693, 2694), SD(2694, 2695), SD(2695, 2696), SD(2696, 2697), SD(2697, 2698), SD(2698, 2699), SD(2699, 2700), SD(2700, 2701), SD(2701, 2702), SD(2702, 2703), SD(2703, 2704), SD(2704, 2705), SD(2705, 2706), SD(2706, 2707), SD(2707, 2708), SD(2708, 2709), SD(2709, 2710), SD(2710, 2711), SD(2711, 2712), SD(2712, 2713), SD(2713, 2714), SD(0, 0), SD(2522, 2523), SD(2714, 2715), SD(2715, 2716), SD(2768, 2770), SD(2770, 2772), SD(2840, 2841), SD(2841, 2842), SD(2842, 2843), SD(2843, 2844), SD(2844, 2845), SD(2845, 2846), SD(2846, 2847), SD(2847, 2848), SD(2848, 2849), SD(2849, 2850), SD(2850, 2851), SD(2851, 2852), SD(2852, 2853), SD(2853, 2854), SD(2854, 2855), SD(2855, 2856), SD(2856, 2857), SD(2857, 2858), SD(2858, 2859), SD(2859, 2860), SD(2860, 2861), SD(2861, 2862), SD(2862, 2863), SD(2863, 2864), SD(2864, 2865), SD(2865, 2866), SD(2866, 2867), SD(2867, 2868), SD(2868, 2869), SD(2869, 2870), SD(2870, 2871), SD(2871, 2872), SD(2872, 2873), SD(2873, 2874), SD(2874, 2875), SD(2875, 2876), SD(2876, 2877), SD(2877, 2878), SD(2878, 2879), SD(2879, 2880), SD(2880, 2881), SD(2881, 2882), SD(2882, 2883), SD(2883, 2884), SD(2884, 2885), SD(2885, 2886), SD(2886, 2887), SD(2887, 2888), SD(2888, 2889), SD(2889, 2890), SD(2890, 2891), SD(2891, 2892), SD(2892, 2893), SD(2893, 2894), SD(2894, 2895), SD(2895, 2896), SD(2896, 2897), SD(2897, 2898), SD(2898, 2899), SD(2899, 2900), SD(2900, 2901), SD(2901, 2902), SD(2902, 2903), SD(2903, 2904), SD(2904, 2905), SD(2905, 2906), SD(2906, 2907), SD(2907, 2908), SD(2908, 2909), SD(2909, 2910), SD(2910, 2911), SD(2911, 2912), SD(2912, 2913), SD(2913, 2914), SD(2914, 2915), SD(2915, 2916), SD(2916, 2917), SD(2917, 2918), SD(2918, 2919), SD(2919, 2920), SD(2920, 2921), SD(2921, 2922), SD(2922, 2923), SD(2923, 2924), SD(2924, 2925), SD(2925, 2926), SD(2926, 2927), SD(2927, 2928), SD(2928, 2929), SD(2929, 2930), SD(2930, 2931), SD(2931, 2932), SD(2932, 2933), SD(2933, 2934), SD(2944, 2947), SD(2947, 2950), SD(2950, 2953), SD(2953, 2956), SD(2956, 2959), SD(2959, 2962), SD(2962, 2965), SD(2965, 2968), SD(2968, 2971), SD(2971, 2974), SD(2974, 2977), SD(2977, 2980), SD(2980, 2983), SD(2983, 2986), SD(2986, 2990), SD(2990, 2994), SD(2994, 2998), SD(2998, 3002), SD(3002, 3006), SD(3006, 3010), SD(3010, 3014), SD(3014, 3018), SD(3018, 3022), SD(3022, 3026), SD(3026, 3030), SD(3030, 3034), SD(3034, 3038), SD(3038, 3042), SD(3042, 3046), SD(3046, 3053), SD(3053, 3059), SD(0, 0), SD(3059, 3062), SD(3062, 3065), SD(3065, 3068), SD(3068, 3071), SD(3071, 3074), SD(3074, 3077), SD(3077, 3080), SD(3080, 3083), SD(3083, 3086), SD(3086, 3089), SD(3089, 3092), SD(3092, 3095), SD(3095, 3098), SD(3098, 3101), SD(3101, 3104), SD(3104, 3107), SD(3107, 3110), SD(3110, 3113), SD(3113, 3116), SD(3116, 3119), SD(3119, 3122), SD(3122, 3125), SD(3125, 3128), SD(3128, 3131), SD(3131, 3134), SD(3134, 3137), SD(3137, 3140), SD(3140, 3143), SD(3143, 3146), SD(3146, 3149), SD(3149, 3152), SD(3152, 3155), SD(3155, 3158), SD(3158, 3161), SD(3161, 3164), SD(3164, 3167), SD(3304, 3306), SD(3306, 3308), SD(3308, 3310), SD(3310, 3312), SD(3312, 3314), SD(3314, 3316), SD(3316, 3318), SD(3318, 3320), SD(3320, 3322), SD(3322, 3325), SD(3325, 3328), SD(3328, 3331), SD(3692, 3694), SD(3694, 3696), SD(3696, 3698), SD(3698, 3700), SD(3700, 3702), SD(3702, 3704), SD(3704, 3706), SD(3706, 3708), SD(3708, 3710), SD(3710, 3712), SD(3712, 3715), SD(3715, 3718), SD(3718, 3721), SD(3721, 3724), SD(3724, 3727), SD(3727, 3730), SD(3730, 3733), SD(3733, 3736), SD(3736, 3739), SD(3739, 3742), SD(3742, 3745), SD(3745, 3748), SD(3748, 3751), SD(3751, 3754), SD(3754, 3757), SD(4025, 4027), SD(4027, 4029), SD(4029, 4031), SD(4031, 4033), SD(4033, 4035), SD(4035, 4037), SD(4037, 4039), SD(4039, 4041), SD(4041, 4043), SD(4043, 4046), SD(4046, 4049), SD(4049, 4052), SD(4052, 4055), SD(4055, 4058), SD(4058, 4061), SD(4061, 4064), SD(4064, 4067), SD(4067, 4070), SD(4070, 4073), SD(4073, 4076), SD(4076, 4079), SD(4079, 4082), SD(4082, 4085), SD(4085, 4088), SD(4088, 4091), SD(4091, 4094), SD(4094, 4097), SD(4097, 4100), SD(4100, 4103), SD(4103, 4106), SD(4106, 4109), SD(4528, 4530), SD(4530, 4532), SD(4532, 4534), SD(4534, 4537), SD(4537, 4540), SD(4540, 4542), SD(4542, 4544), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4544, 4546), SD(4546, 4548), SD(4548, 4550), SD(4550, 4552), SD(4552, 4554), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4629, 4631), SD(5397, 5398), SD(5397, 5398), SD(5397, 5398), SD(5397, 5398), SD(5382, 5383), SD(5382, 5383), SD(5382, 5383), SD(5719, 5721), SD(5721, 5723), SD(5723, 5725), SD(5725, 5727), SD(5727, 5729), SD(5729, 5731), SD(5731, 5733), SD(5733, 5735), SD(5735, 5737), SD(5737, 5739), SD(5739, 5741), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5741, 5744), SD(5744, 5747), SD(5747, 5750), SD(5750, 5753), SD(5753, 5756), SD(5756, 5759), SD(5759, 5762), SD(5762, 5765), SD(5765, 5768), SD(5768, 5771), SD(5771, 5774), SD(5774, 5777), SD(5777, 5780), SD(5780, 5783), SD(5783, 5786), SD(5786, 5789), SD(5789, 5792), SD(5792, 5795), SD(5795, 5798), SD(5798, 5801), SD(5801, 5804), SD(5804, 5807), SD(5807, 5810), SD(5810, 5813), SD(5813, 5816), SD(5816, 5819), SD(5819, 5822), SD(5880, 5883), SD(5883, 5886), SD(5886, 5889), SD(5889, 5892), SD(5892, 5895), SD(5895, 5898), SD(5898, 5901), SD(5901, 5904), SD(5904, 5907), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingCompat(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMapping2Compat(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
export extern(C) immutable(void*) sidero_utf_lut_getDecompositionMappingCompatibility2(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xA0 && input <= 0xFFEE) {
        if (input <= 0x33FF) {
            if (input <= 0xBE)
                return cast(void*)&LUT_5B775041[cast(size_t)(0 + (input - 0xA0))];
            else if (input >= 0x132 && input <= 0x17F)
                return cast(void*)&LUT_5B775041[cast(size_t)(31 + (input - 0x132))];
            else if (input >= 0x1C4 && input <= 0x1F3)
                return cast(void*)&LUT_5B775041[cast(size_t)(109 + (input - 0x1C4))];
            else if (input >= 0x2B0 && input <= 0x2E4)
                return cast(void*)&LUT_5B775041[cast(size_t)(157 + (input - 0x2B0))];
            else if (input >= 0x37A && input <= 0x384)
                return cast(void*)&LUT_5B775041[cast(size_t)(210 + (input - 0x37A))];
            else if (input >= 0x3D0 && input <= 0x3F9)
                return cast(void*)&LUT_5B775041[cast(size_t)(221 + (input - 0x3D0))];
            else if (input == 0x587)
                return cast(void*)&LUT_5B775041[cast(size_t)(263 + (input - 0x587))];
            else if (input >= 0x675 && input <= 0x678)
                return cast(void*)&LUT_5B775041[cast(size_t)(264 + (input - 0x675))];
            else if (input == 0xE33)
                return cast(void*)&LUT_5B775041[cast(size_t)(268 + (input - 0xE33))];
            else if (input >= 0xEB3 && input <= 0xF0C)
                return cast(void*)&LUT_5B775041[cast(size_t)(269 + (input - 0xEB3))];
            else if (input >= 0xF77 && input <= 0xF79)
                return cast(void*)&LUT_5B775041[cast(size_t)(359 + (input - 0xF77))];
            else if (input == 0x10FC)
                return cast(void*)&LUT_5B775041[cast(size_t)(362 + (input - 0x10FC))];
            else if (input >= 0x1D2C && input <= 0x1DBF)
                return cast(void*)&LUT_5B775041[cast(size_t)(363 + (input - 0x1D2C))];
            else if (input == 0x1E9A)
                return cast(void*)&LUT_5B775041[cast(size_t)(511 + (input - 0x1E9A))];
            else if (input >= 0x1FBD && input <= 0x20A8)
                return cast(void*)&LUT_5B775041[cast(size_t)(512 + (input - 0x1FBD))];
            else if (input >= 0x2100 && input <= 0x2189)
                return cast(void*)&LUT_5B775041[cast(size_t)(748 + (input - 0x2100))];
            else if (input >= 0x222C && input <= 0x2230)
                return cast(void*)&LUT_5B775041[cast(size_t)(886 + (input - 0x222C))];
            else if (input >= 0x2460 && input <= 0x24EA)
                return cast(void*)&LUT_5B775041[cast(size_t)(891 + (input - 0x2460))];
            else if (input == 0x2A0C)
                return cast(void*)&LUT_5B775041[cast(size_t)(1030 + (input - 0x2A0C))];
            else if (input >= 0x2A74 && input <= 0x2A76)
                return cast(void*)&LUT_5B775041[cast(size_t)(1031 + (input - 0x2A74))];
            else if (input >= 0x2C7C && input <= 0x2C7D)
                return cast(void*)&LUT_5B775041[cast(size_t)(1034 + (input - 0x2C7C))];
            else if (input == 0x2D6F)
                return cast(void*)&LUT_5B775041[cast(size_t)(1036 + (input - 0x2D6F))];
            else if (input == 0x2E9F)
                return cast(void*)&LUT_5B775041[cast(size_t)(1037 + (input - 0x2E9F))];
            else if (input >= 0x2EF3 && input <= 0x303A)
                return cast(void*)&LUT_5B775041[cast(size_t)(1038 + (input - 0x2EF3))];
            else if (input >= 0x309B && input <= 0x309F)
                return cast(void*)&LUT_5B775041[cast(size_t)(1366 + (input - 0x309B))];
            else if (input >= 0x30FF && input <= 0x319F)
                return cast(void*)&LUT_5B775041[cast(size_t)(1371 + (input - 0x30FF))];
            else if (input >= 0x3200)
                return cast(void*)&LUT_5B775041[cast(size_t)(1532 + (input - 0x3200))];
        } else if (input >= 0xA69C) {
            if (input <= 0xA69D)
                return cast(void*)&LUT_5B775041[cast(size_t)(2044 + (input - 0xA69C))];
            else if (input == 0xA770)
                return cast(void*)&LUT_5B775041[cast(size_t)(2046 + (input - 0xA770))];
            else if (input >= 0xA7F2 && input <= 0xA7F9)
                return cast(void*)&LUT_5B775041[cast(size_t)(2047 + (input - 0xA7F2))];
            else if (input >= 0xAB5C && input <= 0xAB69)
                return cast(void*)&LUT_5B775041[cast(size_t)(2055 + (input - 0xAB5C))];
            else if (input >= 0xFB00)
                return cast(void*)&LUT_5B775041[cast(size_t)(2069 + (input - 0xFB00))];
        }
    } else if (input >= 0x10781 && input <= 0x1FBF9) {
        if (input <= 0x107BA) {
            return cast(void*)&LUT_5B775041[cast(size_t)(3332 + (input - 0x10781))];
        } else if (input >= 0x1D400) {
            if (input <= 0x1D7FF)
                return cast(void*)&LUT_5B775041[cast(size_t)(3390 + (input - 0x1D400))];
            else if (input >= 0x1EE00 && input <= 0x1EEBB)
                return cast(void*)&LUT_5B775041[cast(size_t)(4414 + (input - 0x1EE00))];
            else if (input >= 0x1F100 && input <= 0x1F190)
                return cast(void*)&LUT_5B775041[cast(size_t)(4602 + (input - 0x1F100))];
            else if (input >= 0x1F200 && input <= 0x1F251)
                return cast(void*)&LUT_5B775041[cast(size_t)(4747 + (input - 0x1F200))];
            else if (input >= 0x1FBF0)
                return cast(void*)&LUT_5B775041[cast(size_t)(4829 + (input - 0x1FBF0))];
        }
    }
    return null;
}
private {
    static immutable LUT_5B775041 = [SD(0, 1), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1, 3), SD(0, 0), SD(3, 4), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4, 6), SD(0, 0), SD(0, 0), SD(6, 7), SD(7, 8), SD(8, 10), SD(10, 11), SD(0, 0), SD(0, 0), SD(11, 13), SD(13, 14), SD(14, 15), SD(0, 0), SD(15, 18), SD(18, 21), SD(21, 24), SD(220, 222), SD(222, 224), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(244, 246), SD(246, 248), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(260, 262), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(356, 357), SD(365, 367), SD(367, 369), SD(369, 371), SD(371, 373), SD(373, 375), SD(375, 377), SD(377, 379), SD(379, 381), SD(381, 383), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(449, 451), SD(451, 453), SD(453, 455), SD(563, 564), SD(564, 565), SD(565, 566), SD(566, 567), SD(567, 568), SD(568, 569), SD(569, 570), SD(570, 571), SD(571, 572), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(572, 574), SD(574, 576), SD(576, 578), SD(578, 580), SD(580, 582), SD(582, 584), SD(0, 0), SD(0, 0), SD(584, 585), SD(585, 586), SD(356, 357), SD(586, 587), SD(587, 588), SD(594, 596), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(8, 10), SD(640, 641), SD(641, 642), SD(642, 643), SD(0, 0), SD(0, 0), SD(647, 648), SD(648, 649), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(649, 650), SD(650, 651), SD(651, 652), SD(0, 0), SD(652, 653), SD(653, 654), SD(0, 0), SD(0, 0), SD(0, 0), SD(654, 655), SD(759, 761), SD(771, 773), SD(773, 775), SD(775, 777), SD(777, 779), SD(873, 875), SD(875, 877), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(877, 879), SD(879, 881), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(881, 882), SD(900, 902), SD(0, 0), SD(904, 906), SD(922, 923), SD(945, 946), SD(946, 947), SD(947, 948), SD(0, 0), SD(948, 949), SD(949, 950), SD(950, 951), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(0, 0), SD(959, 960), SD(960, 961), SD(961, 962), SD(962, 963), SD(963, 964), SD(964, 965), SD(965, 966), SD(3, 4), SD(966, 967), SD(967, 968), SD(968, 969), SD(969, 970), SD(970, 971), SD(971, 972), SD(972, 973), SD(973, 974), SD(974, 975), SD(975, 976), SD(0, 0), SD(976, 977), SD(977, 978), SD(978, 979), SD(14, 15), SD(979, 980), SD(980, 981), SD(981, 982), SD(982, 983), SD(983, 984), SD(984, 985), SD(985, 986), SD(986, 987), SD(987, 988), SD(988, 989), SD(640, 641), SD(989, 990), SD(990, 991), SD(647, 648), SD(991, 992), SD(992, 993), SD(566, 567), SD(984, 985), SD(987, 988), SD(640, 641), SD(989, 990), SD(650, 651), SD(647, 648), SD(991, 992), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(993, 994), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(994, 995), SD(995, 996), SD(996, 997), SD(997, 998), SD(974, 975), SD(998, 999), SD(999, 1000), SD(1000, 1001), SD(1001, 1002), SD(1002, 1003), SD(1003, 1004), SD(1004, 1005), SD(1005, 1006), SD(1006, 1007), SD(1007, 1008), SD(1008, 1009), SD(1009, 1010), SD(1010, 1011), SD(1011, 1012), SD(1012, 1013), SD(1013, 1014), SD(1014, 1015), SD(1015, 1016), SD(1016, 1017), SD(1017, 1018), SD(1018, 1019), SD(1019, 1020), SD(1020, 1021), SD(1021, 1022), SD(1022, 1023), SD(1023, 1024), SD(1024, 1025), SD(1025, 1026), SD(1026, 1027), SD(1027, 1028), SD(1028, 1029), SD(641, 642), SD(1337, 1339), SD(1861, 1863), SD(0, 0), SD(1861, 1863), SD(1864, 1866), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1963, 1965), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 1), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1967, 1968), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1968, 1970), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1970, 1971), SD(1971, 1973), SD(1973, 1976), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 1), SD(0, 0), SD(0, 0), SD(0, 0), SD(1976, 1978), SD(1978, 1981), SD(0, 0), SD(1981, 1983), SD(1983, 1986), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1986, 1988), SD(0, 0), SD(1988, 1990), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1990, 1992), SD(1992, 1994), SD(1994, 1996), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(1996, 2000), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 1), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2000, 2001), SD(992, 993), SD(0, 0), SD(0, 0), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2007, 2008), SD(2008, 2009), SD(2009, 2010), SD(2010, 2011), SD(2011, 2012), SD(2012, 2013), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2007, 2008), SD(2008, 2009), SD(2009, 2010), SD(2010, 2011), SD(2011, 2012), SD(0, 0), SD(3, 4), SD(971, 972), SD(14, 15), SD(586, 587), SD(972, 973), SD(563, 564), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(982, 983), SD(356, 357), SD(983, 984), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2013, 2015), SD(2015, 2018), SD(2018, 2021), SD(2021, 2022), SD(2022, 2024), SD(0, 0), SD(2024, 2027), SD(2027, 2030), SD(2030, 2031), SD(0, 0), SD(2031, 2033), SD(975, 976), SD(952, 953), SD(952, 953), SD(952, 953), SD(563, 564), SD(2033, 2034), SD(953, 954), SD(953, 954), SD(956, 957), SD(585, 586), SD(0, 0), SD(958, 959), SD(2034, 2036), SD(0, 0), SD(0, 0), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(962, 963), SD(962, 963), SD(0, 0), SD(0, 0), SD(2037, 2039), SD(2039, 2042), SD(2042, 2044), SD(0, 0), SD(2044, 2045), SD(0, 0), SD(0, 0), SD(0, 0), SD(2044, 2045), SD(0, 0), SD(0, 0), SD(0, 0), SD(947, 948), SD(2021, 2022), SD(0, 0), SD(971, 972), SD(949, 950), SD(2047, 2048), SD(0, 0), SD(957, 958), SD(14, 15), SD(2048, 2049), SD(2049, 2050), SD(2050, 2051), SD(2051, 2052), SD(992, 993), SD(0, 0), SD(2052, 2055), SD(648, 649), SD(989, 990), SD(2055, 2056), SD(2056, 2057), SD(2057, 2058), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(948, 949), SD(970, 971), SD(971, 972), SD(992, 993), SD(565, 566), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2058, 2061), SD(2061, 2064), SD(2064, 2068), SD(2068, 2071), SD(2071, 2074), SD(2074, 2077), SD(2077, 2080), SD(2080, 2083), SD(2083, 2086), SD(2086, 2089), SD(2089, 2092), SD(2092, 2095), SD(2095, 2098), SD(2098, 2101), SD(2101, 2104), SD(2104, 2106), SD(953, 954), SD(2106, 2108), SD(2108, 2111), SD(2111, 2113), SD(2113, 2114), SD(2114, 2116), SD(2116, 2119), SD(2119, 2123), SD(2123, 2125), SD(2125, 2126), SD(2126, 2128), SD(2128, 2131), SD(956, 957), SD(2021, 2022), SD(948, 949), SD(957, 958), SD(992, 993), SD(2131, 2133), SD(2133, 2136), SD(2136, 2138), SD(987, 988), SD(2138, 2140), SD(2140, 2143), SD(2143, 2147), SD(2147, 2149), SD(586, 587), SD(2149, 2151), SD(2151, 2154), SD(585, 586), SD(995, 996), SD(970, 971), SD(977, 978), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2154, 2157), SD(2179, 2181), SD(2181, 2184), SD(0, 0), SD(2184, 2186), SD(2186, 2189), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2257, 2259), SD(2259, 2261), SD(2261, 2263), SD(2263, 2265), SD(2265, 2267), SD(2267, 2269), SD(2269, 2271), SD(2271, 2273), SD(2273, 2275), SD(2275, 2277), SD(2277, 2279), SD(2279, 2282), SD(2282, 2285), SD(2285, 2288), SD(2288, 2291), SD(2291, 2294), SD(2294, 2297), SD(2297, 2300), SD(2300, 2303), SD(2303, 2306), SD(2306, 2310), SD(2310, 2314), SD(2314, 2318), SD(2318, 2322), SD(2322, 2326), SD(2326, 2330), SD(2330, 2334), SD(2334, 2338), SD(2338, 2342), SD(2342, 2346), SD(2346, 2350), SD(2350, 2352), SD(2352, 2354), SD(2354, 2356), SD(2356, 2358), SD(2358, 2360), SD(2360, 2362), SD(2362, 2364), SD(2364, 2366), SD(2366, 2368), SD(2368, 2371), SD(2371, 2374), SD(2374, 2377), SD(2377, 2380), SD(2380, 2383), SD(2383, 2386), SD(2386, 2389), SD(2389, 2392), SD(2392, 2395), SD(2395, 2398), SD(2398, 2401), SD(2401, 2404), SD(2404, 2407), SD(2407, 2410), SD(2410, 2413), SD(2413, 2416), SD(2416, 2419), SD(2419, 2422), SD(2422, 2425), SD(2425, 2428), SD(2428, 2431), SD(2431, 2434), SD(2434, 2437), SD(2437, 2440), SD(2440, 2443), SD(2443, 2446), SD(2446, 2449), SD(2449, 2452), SD(2452, 2455), SD(2455, 2458), SD(2458, 2461), SD(2461, 2464), SD(2464, 2467), SD(2467, 2470), SD(2470, 2473), SD(2473, 2476), SD(2476, 2479), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(2000, 2001), SD(2482, 2486), SD(2486, 2489), SD(2489, 2491), SD(2491, 2494), SD(565, 566), SD(2113, 2114), SD(2496, 2497), SD(2497, 2498), SD(2498, 2499), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2499, 2500), SD(2500, 2501), SD(2501, 2502), SD(2502, 2503), SD(2503, 2504), SD(2504, 2505), SD(2505, 2506), SD(2506, 2507), SD(2507, 2508), SD(2508, 2509), SD(2509, 2510), SD(2510, 2511), SD(2511, 2512), SD(2512, 2513), SD(2513, 2514), SD(2514, 2515), SD(2515, 2516), SD(2516, 2517), SD(2517, 2518), SD(2518, 2519), SD(2519, 2520), SD(2520, 2521), SD(2521, 2522), SD(2522, 2523), SD(2523, 2524), SD(2524, 2525), SD(2525, 2526), SD(2526, 2527), SD(2527, 2528), SD(2528, 2529), SD(2529, 2530), SD(2530, 2531), SD(2531, 2532), SD(2532, 2533), SD(2533, 2534), SD(2534, 2535), SD(2535, 2536), SD(2536, 2537), SD(2537, 2538), SD(2538, 2539), SD(2539, 2540), SD(2540, 2541), SD(2541, 2542), SD(2542, 2543), SD(2543, 2544), SD(2544, 2545), SD(2545, 2546), SD(2546, 2547), SD(2547, 2548), SD(2548, 2549), SD(2549, 2550), SD(2550, 2551), SD(2551, 2552), SD(2552, 2553), SD(2553, 2554), SD(2554, 2555), SD(2555, 2556), SD(2556, 2557), SD(2557, 2558), SD(2558, 2559), SD(2559, 2560), SD(2560, 2561), SD(2561, 2562), SD(2562, 2563), SD(2563, 2564), SD(2564, 2565), SD(2565, 2566), SD(2566, 2567), SD(2567, 2568), SD(2568, 2569), SD(2569, 2570), SD(2570, 2571), SD(2571, 2572), SD(2572, 2573), SD(2573, 2574), SD(2574, 2575), SD(2575, 2576), SD(2576, 2577), SD(2577, 2578), SD(2578, 2579), SD(2579, 2580), SD(2580, 2581), SD(2581, 2582), SD(2582, 2583), SD(2583, 2584), SD(2584, 2585), SD(2585, 2586), SD(2586, 2587), SD(2587, 2588), SD(2588, 2589), SD(2589, 2590), SD(2590, 2591), SD(2591, 2592), SD(2592, 2593), SD(2593, 2594), SD(2594, 2595), SD(2595, 2596), SD(2596, 2597), SD(2597, 2598), SD(2598, 2599), SD(2599, 2600), SD(2600, 2601), SD(2601, 2602), SD(2602, 2603), SD(2603, 2604), SD(2604, 2605), SD(2605, 2606), SD(2606, 2607), SD(2607, 2608), SD(2608, 2609), SD(2609, 2610), SD(2610, 2611), SD(2611, 2612), SD(2612, 2613), SD(2613, 2614), SD(2614, 2615), SD(2615, 2616), SD(2616, 2617), SD(2617, 2618), SD(2618, 2619), SD(2619, 2620), SD(2620, 2621), SD(2621, 2622), SD(2622, 2623), SD(2623, 2624), SD(2624, 2625), SD(2625, 2626), SD(2626, 2627), SD(2627, 2628), SD(2628, 2629), SD(2629, 2630), SD(2630, 2631), SD(2631, 2632), SD(2632, 2633), SD(2633, 2634), SD(2634, 2635), SD(2635, 2636), SD(2636, 2637), SD(2637, 2638), SD(2638, 2639), SD(2639, 2640), SD(2640, 2641), SD(2641, 2642), SD(2642, 2643), SD(2643, 2644), SD(2644, 2645), SD(2645, 2646), SD(2646, 2647), SD(2647, 2648), SD(2648, 2649), SD(2649, 2650), SD(2650, 2651), SD(2651, 2652), SD(2652, 2653), SD(2653, 2654), SD(2654, 2655), SD(2655, 2656), SD(2656, 2657), SD(2657, 2658), SD(2658, 2659), SD(2659, 2660), SD(2660, 2661), SD(2661, 2662), SD(2662, 2663), SD(2663, 2664), SD(2664, 2665), SD(2665, 2666), SD(2666, 2667), SD(2667, 2668), SD(2668, 2669), SD(2669, 2670), SD(2670, 2671), SD(2671, 2672), SD(2672, 2673), SD(2673, 2674), SD(2674, 2675), SD(2675, 2676), SD(2676, 2677), SD(2677, 2678), SD(2678, 2679), SD(2679, 2680), SD(2680, 2681), SD(2681, 2682), SD(2682, 2683), SD(2683, 2684), SD(2684, 2685), SD(2685, 2686), SD(2686, 2687), SD(2687, 2688), SD(2688, 2689), SD(2689, 2690), SD(2690, 2691), SD(2691, 2692), SD(2692, 2693), SD(2693, 2694), SD(2694, 2695), SD(2695, 2696), SD(2696, 2697), SD(2697, 2698), SD(2698, 2699), SD(2699, 2700), SD(2700, 2701), SD(2701, 2702), SD(2702, 2703), SD(2703, 2704), SD(2704, 2705), SD(2705, 2706), SD(2706, 2707), SD(2707, 2708), SD(2708, 2709), SD(2709, 2710), SD(2710, 2711), SD(2711, 2712), SD(2712, 2713), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 1), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2713, 2714), SD(0, 0), SD(2522, 2523), SD(2714, 2715), SD(2715, 2716), SD(2768, 2770), SD(2770, 2772), SD(0, 0), SD(0, 0), SD(2774, 2776), SD(2838, 2840), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2840, 2841), SD(2841, 2842), SD(2842, 2843), SD(2843, 2844), SD(2844, 2845), SD(2845, 2846), SD(2846, 2847), SD(2847, 2848), SD(2848, 2849), SD(2849, 2850), SD(2850, 2851), SD(2851, 2852), SD(2852, 2853), SD(2853, 2854), SD(2854, 2855), SD(2855, 2856), SD(2856, 2857), SD(2857, 2858), SD(2858, 2859), SD(2859, 2860), SD(2860, 2861), SD(2861, 2862), SD(2862, 2863), SD(2863, 2864), SD(2864, 2865), SD(2865, 2866), SD(2866, 2867), SD(2867, 2868), SD(2868, 2869), SD(2869, 2870), SD(2870, 2871), SD(2871, 2872), SD(2872, 2873), SD(2873, 2874), SD(2874, 2875), SD(2875, 2876), SD(2876, 2877), SD(2877, 2878), SD(2878, 2879), SD(2879, 2880), SD(2880, 2881), SD(2881, 2882), SD(2882, 2883), SD(2883, 2884), SD(2884, 2885), SD(2885, 2886), SD(2886, 2887), SD(2887, 2888), SD(2888, 2889), SD(2889, 2890), SD(2890, 2891), SD(2891, 2892), SD(2892, 2893), SD(2893, 2894), SD(2894, 2895), SD(2895, 2896), SD(2896, 2897), SD(2897, 2898), SD(2898, 2899), SD(2899, 2900), SD(2900, 2901), SD(2901, 2902), SD(2902, 2903), SD(2903, 2904), SD(2904, 2905), SD(2905, 2906), SD(2906, 2907), SD(2907, 2908), SD(2908, 2909), SD(2909, 2910), SD(2910, 2911), SD(2911, 2912), SD(2912, 2913), SD(2913, 2914), SD(2914, 2915), SD(2915, 2916), SD(2916, 2917), SD(2917, 2918), SD(2918, 2919), SD(2919, 2920), SD(2920, 2921), SD(2921, 2922), SD(2922, 2923), SD(2923, 2924), SD(2924, 2925), SD(2925, 2926), SD(2926, 2927), SD(2927, 2928), SD(2928, 2929), SD(2929, 2930), SD(2930, 2931), SD(2931, 2932), SD(2932, 2933), SD(2933, 2934), SD(0, 0), SD(0, 0), SD(0, 0), SD(2499, 2500), SD(2505, 2506), SD(2934, 2935), SD(2935, 2936), SD(2936, 2937), SD(2937, 2938), SD(2938, 2939), SD(2939, 2940), SD(2503, 2504), SD(2940, 2941), SD(2941, 2942), SD(2942, 2943), SD(2943, 2944), SD(2507, 2508), SD(2944, 2947), SD(2947, 2950), SD(2950, 2953), SD(2953, 2956), SD(2956, 2959), SD(2959, 2962), SD(2962, 2965), SD(2965, 2968), SD(2968, 2971), SD(2971, 2974), SD(2974, 2977), SD(2977, 2980), SD(2980, 2983), SD(2983, 2986), SD(2986, 2990), SD(2990, 2994), SD(2994, 2998), SD(2998, 3002), SD(3002, 3006), SD(3006, 3010), SD(3010, 3014), SD(3014, 3018), SD(3018, 3022), SD(3022, 3026), SD(3026, 3030), SD(3030, 3034), SD(3034, 3038), SD(3038, 3042), SD(3042, 3046), SD(3046, 3053), SD(3053, 3059), SD(0, 0), SD(3059, 3062), SD(3062, 3065), SD(3065, 3068), SD(3068, 3071), SD(3071, 3074), SD(3074, 3077), SD(3077, 3080), SD(3080, 3083), SD(3083, 3086), SD(3086, 3089), SD(3089, 3092), SD(3092, 3095), SD(3095, 3098), SD(3098, 3101), SD(3101, 3104), SD(3104, 3107), SD(3107, 3110), SD(3110, 3113), SD(3113, 3116), SD(3116, 3119), SD(3119, 3122), SD(3122, 3125), SD(3125, 3128), SD(3128, 3131), SD(3131, 3134), SD(3134, 3137), SD(3137, 3140), SD(3140, 3143), SD(3143, 3146), SD(3146, 3149), SD(3149, 3152), SD(3152, 3155), SD(3155, 3158), SD(3158, 3161), SD(3161, 3164), SD(3164, 3167), SD(3167, 3168), SD(3168, 3169), SD(2565, 2566), SD(3169, 3170), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(3170, 3173), SD(3173, 3175), SD(3175, 3177), SD(3177, 3179), SD(3179, 3181), SD(3181, 3183), SD(3183, 3185), SD(3185, 3187), SD(3187, 3189), SD(3189, 3191), SD(3191, 3193), SD(3193, 3195), SD(3195, 3197), SD(3197, 3199), SD(3199, 3201), SD(3201, 3203), SD(2840, 2841), SD(2843, 2844), SD(2846, 2847), SD(2848, 2849), SD(2856, 2857), SD(2857, 2858), SD(2860, 2861), SD(2862, 2863), SD(2863, 2864), SD(2865, 2866), SD(2866, 2867), SD(2867, 2868), SD(2868, 2869), SD(2869, 2870), SD(3203, 3205), SD(3205, 3207), SD(3207, 3209), SD(3209, 3211), SD(3211, 3213), SD(3213, 3215), SD(3215, 3217), SD(3217, 3219), SD(3219, 3221), SD(3221, 3223), SD(3223, 3225), SD(3225, 3227), SD(3227, 3229), SD(3229, 3231), SD(3231, 3236), SD(3236, 3240), SD(3240, 3242), SD(0, 0), SD(2499, 2500), SD(2505, 2506), SD(2934, 2935), SD(2935, 2936), SD(3242, 3243), SD(3243, 3244), SD(3244, 3245), SD(2510, 2511), SD(3245, 3246), SD(2522, 2523), SD(2572, 2573), SD(2584, 2585), SD(2583, 2584), SD(2573, 2574), SD(2665, 2666), SD(2530, 2531), SD(2570, 2571), SD(3246, 3247), SD(3247, 3248), SD(3248, 3249), SD(3249, 3250), SD(3250, 3251), SD(3251, 3252), SD(3252, 3253), SD(3253, 3254), SD(3254, 3255), SD(3255, 3256), SD(2536, 2537), SD(3256, 3257), SD(3257, 3258), SD(3258, 3259), SD(3259, 3260), SD(3260, 3261), SD(3261, 3262), SD(3262, 3263), SD(3263, 3264), SD(2936, 2937), SD(2937, 2938), SD(2938, 2939), SD(3264, 3265), SD(3265, 3266), SD(3266, 3267), SD(3267, 3268), SD(3268, 3269), SD(3269, 3270), SD(3270, 3271), SD(3271, 3272), SD(3272, 3273), SD(3273, 3274), SD(3274, 3276), SD(3276, 3278), SD(3278, 3280), SD(3280, 3282), SD(3282, 3284), SD(3284, 3286), SD(3286, 3288), SD(3288, 3290), SD(3290, 3292), SD(3292, 3294), SD(3294, 3296), SD(3296, 3298), SD(3298, 3300), SD(3300, 3302), SD(3302, 3304), SD(3304, 3306), SD(3306, 3308), SD(3308, 3310), SD(3310, 3312), SD(3312, 3314), SD(3314, 3316), SD(3316, 3318), SD(3318, 3320), SD(3320, 3322), SD(3322, 3325), SD(3325, 3328), SD(3328, 3331), SD(3331, 3333), SD(3333, 3336), SD(3336, 3338), SD(3338, 3341), SD(3341, 3342), SD(3342, 3343), SD(3343, 3344), SD(3344, 3345), SD(3345, 3346), SD(3346, 3347), SD(3347, 3348), SD(3348, 3349), SD(3349, 3350), SD(3350, 3351), SD(3351, 3352), SD(3352, 3353), SD(3353, 3354), SD(3354, 3355), SD(3355, 3356), SD(3356, 3357), SD(3357, 3358), SD(3358, 3359), SD(3359, 3360), SD(3360, 3361), SD(3361, 3362), SD(3362, 3363), SD(3363, 3364), SD(3364, 3365), SD(3365, 3366), SD(3366, 3367), SD(3367, 3368), SD(3368, 3369), SD(3369, 3370), SD(3370, 3371), SD(3371, 3372), SD(3372, 3373), SD(3373, 3374), SD(3374, 3375), SD(3375, 3376), SD(3376, 3377), SD(3377, 3378), SD(3378, 3379), SD(3379, 3380), SD(3380, 3381), SD(3381, 3382), SD(3382, 3383), SD(3383, 3384), SD(3384, 3385), SD(3385, 3386), SD(3386, 3387), SD(3387, 3388), SD(3388, 3390), SD(3390, 3394), SD(3394, 3398), SD(3398, 3402), SD(3402, 3405), SD(3405, 3409), SD(3409, 3412), SD(3412, 3415), SD(3415, 3420), SD(3420, 3424), SD(3424, 3427), SD(3427, 3430), SD(3430, 3433), SD(3433, 3437), SD(3437, 3441), SD(3441, 3444), SD(3444, 3447), SD(3447, 3449), SD(3449, 3452), SD(3452, 3456), SD(3456, 3460), SD(3460, 3462), SD(3462, 3467), SD(3467, 3473), SD(3473, 3478), SD(3478, 3481), SD(3481, 3486), SD(3486, 3491), SD(3491, 3495), SD(3495, 3498), SD(3498, 3501), SD(3501, 3504), SD(3504, 3508), SD(3508, 3513), SD(3513, 3517), SD(3517, 3520), SD(3520, 3523), SD(3523, 3526), SD(3526, 3528), SD(3528, 3530), SD(3530, 3532), SD(3532, 3534), SD(3534, 3537), SD(3537, 3540), SD(3540, 3545), SD(3545, 3548), SD(3548, 3552), SD(3552, 3557), SD(3557, 3560), SD(3560, 3562), SD(3562, 3564), SD(3564, 3569), SD(3569, 3573), SD(3573, 3578), SD(3578, 3581), SD(3581, 3586), SD(3586, 3588), SD(3588, 3591), SD(3591, 3594), SD(3594, 3597), SD(3597, 3600), SD(3600, 3603), SD(3603, 3607), SD(3607, 3610), SD(3610, 3612), SD(3612, 3615), SD(3615, 3618), SD(3618, 3621), SD(3621, 3625), SD(3625, 3628), SD(3628, 3631), SD(3631, 3634), SD(3634, 3639), SD(3639, 3643), SD(3643, 3645), SD(3645, 3650), SD(3650, 3652), SD(3652, 3656), SD(3656, 3660), SD(3660, 3663), SD(3663, 3666), SD(3666, 3669), SD(3669, 3673), SD(3673, 3675), SD(3675, 3678), SD(3678, 3682), SD(3682, 3684), SD(3684, 3689), SD(3689, 3692), SD(3692, 3694), SD(3694, 3696), SD(3696, 3698), SD(3698, 3700), SD(3700, 3702), SD(3702, 3704), SD(3704, 3706), SD(3706, 3708), SD(3708, 3710), SD(3710, 3712), SD(3712, 3715), SD(3715, 3718), SD(3718, 3721), SD(3721, 3724), SD(3724, 3727), SD(3727, 3730), SD(3730, 3733), SD(3733, 3736), SD(3736, 3739), SD(3739, 3742), SD(3742, 3745), SD(3745, 3748), SD(3748, 3751), SD(3751, 3754), SD(3754, 3757), SD(3757, 3760), SD(3760, 3762), SD(3762, 3764), SD(3764, 3767), SD(3767, 3769), SD(3769, 3771), SD(3771, 3773), SD(3773, 3776), SD(3776, 3779), SD(3779, 3781), SD(3781, 3783), SD(3783, 3785), SD(3785, 3787), SD(3787, 3789), SD(3789, 3793), SD(3793, 3795), SD(3795, 3797), SD(3797, 3799), SD(3799, 3801), SD(3801, 3803), SD(3803, 3805), SD(3805, 3807), SD(3807, 3809), SD(3809, 3812), SD(3812, 3816), SD(3816, 3818), SD(3818, 3820), SD(3820, 3822), SD(3822, 3824), SD(3824, 3826), SD(3826, 3828), SD(3828, 3830), SD(3830, 3833), SD(3833, 3836), SD(3836, 3839), SD(3839, 3842), SD(3842, 3844), SD(3844, 3846), SD(3846, 3848), SD(3848, 3850), SD(3850, 3852), SD(3852, 3854), SD(3854, 3856), SD(3856, 3858), SD(3858, 3860), SD(3860, 3862), SD(3862, 3865), SD(3865, 3868), SD(3868, 3870), SD(3870, 3873), SD(3873, 3876), SD(3876, 3879), SD(3879, 3881), SD(3881, 3884), SD(3884, 3887), SD(3887, 3891), SD(3891, 3893), SD(3893, 3896), SD(3896, 3899), SD(3899, 3902), SD(3902, 3905), SD(3905, 3910), SD(3910, 3916), SD(3916, 3918), SD(3918, 3920), SD(3920, 3922), SD(3922, 3924), SD(3924, 3926), SD(3926, 3928), SD(3928, 3930), SD(3930, 3932), SD(3932, 3934), SD(3934, 3936), SD(3936, 3938), SD(3938, 3940), SD(3940, 3942), SD(3942, 3944), SD(3944, 3946), SD(3946, 3948), SD(3948, 3950), SD(3950, 3952), SD(3952, 3956), SD(3956, 3958), SD(3958, 3960), SD(3960, 3962), SD(3962, 3966), SD(3966, 3969), SD(3969, 3971), SD(3971, 3973), SD(3973, 3975), SD(3975, 3977), SD(3977, 3979), SD(3979, 3981), SD(3981, 3983), SD(3983, 3985), SD(3985, 3987), SD(3987, 3989), SD(3989, 3992), SD(3992, 3994), SD(3994, 3996), SD(3996, 3999), SD(3999, 4002), SD(4002, 4004), SD(4004, 4008), SD(4008, 4011), SD(4011, 4013), SD(4013, 4015), SD(4015, 4017), SD(4017, 4019), SD(4019, 4022), SD(4022, 4025), SD(4025, 4027), SD(4027, 4029), SD(4029, 4031), SD(4031, 4033), SD(4033, 4035), SD(4035, 4037), SD(4037, 4039), SD(4039, 4041), SD(4041, 4043), SD(4043, 4046), SD(4046, 4049), SD(4049, 4052), SD(4052, 4055), SD(4055, 4058), SD(4058, 4061), SD(4061, 4064), SD(4064, 4067), SD(4067, 4070), SD(4070, 4073), SD(4073, 4076), SD(4076, 4079), SD(4079, 4082), SD(4082, 4085), SD(4085, 4088), SD(4088, 4091), SD(4091, 4094), SD(4094, 4097), SD(4097, 4100), SD(4100, 4103), SD(4103, 4106), SD(4106, 4109), SD(4109, 4112), SD(4112, 4113), SD(4113, 4114), SD(4114, 4115), SD(2021, 2022), SD(2047, 2048), SD(2036, 2037), SD(0, 0), SD(0, 0), SD(0, 0), SD(4115, 4116), SD(4116, 4117), SD(4117, 4118), SD(4118, 4119), SD(4119, 4120), SD(4120, 4121), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4121, 4122), SD(4528, 4530), SD(4530, 4532), SD(4532, 4534), SD(4534, 4537), SD(4537, 4540), SD(4540, 4542), SD(4542, 4544), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4544, 4546), SD(4546, 4548), SD(4548, 4550), SD(4550, 4552), SD(4552, 4554), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4558, 4559), SD(2048, 2049), SD(2051, 2052), SD(4559, 4560), SD(4560, 4561), SD(4561, 4562), SD(4562, 4563), SD(4563, 4564), SD(4564, 4565), SD(2007, 2008), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4629, 4631), SD(4631, 4632), SD(4631, 4632), SD(4632, 4633), SD(4632, 4633), SD(4632, 4633), SD(4632, 4633), SD(4633, 4634), SD(4633, 4634), SD(4633, 4634), SD(4633, 4634), SD(4634, 4635), SD(4634, 4635), SD(4634, 4635), SD(4634, 4635), SD(4635, 4636), SD(4635, 4636), SD(4635, 4636), SD(4635, 4636), SD(4636, 4637), SD(4636, 4637), SD(4636, 4637), SD(4636, 4637), SD(4637, 4638), SD(4637, 4638), SD(4637, 4638), SD(4637, 4638), SD(4638, 4639), SD(4638, 4639), SD(4638, 4639), SD(4638, 4639), SD(4639, 4640), SD(4639, 4640), SD(4639, 4640), SD(4639, 4640), SD(4640, 4641), SD(4640, 4641), SD(4640, 4641), SD(4640, 4641), SD(4641, 4642), SD(4641, 4642), SD(4641, 4642), SD(4641, 4642), SD(4642, 4643), SD(4642, 4643), SD(4642, 4643), SD(4642, 4643), SD(4643, 4644), SD(4643, 4644), SD(4643, 4644), SD(4643, 4644), SD(4644, 4645), SD(4644, 4645), SD(4645, 4646), SD(4645, 4646), SD(4646, 4647), SD(4646, 4647), SD(4647, 4648), SD(4647, 4648), SD(4648, 4649), SD(4648, 4649), SD(4649, 4650), SD(4649, 4650), SD(4650, 4651), SD(4650, 4651), SD(4650, 4651), SD(4650, 4651), SD(4651, 4652), SD(4651, 4652), SD(4651, 4652), SD(4651, 4652), SD(4652, 4653), SD(4652, 4653), SD(4652, 4653), SD(4652, 4653), SD(4653, 4654), SD(4653, 4654), SD(4653, 4654), SD(4653, 4654), SD(4654, 4655), SD(4654, 4655), SD(4655, 4656), SD(4655, 4656), SD(4655, 4656), SD(4655, 4656), SD(4656, 4657), SD(4656, 4657), SD(4657, 4658), SD(4657, 4658), SD(4657, 4658), SD(4657, 4658), SD(4658, 4659), SD(4658, 4659), SD(4658, 4659), SD(4658, 4659), SD(4659, 4660), SD(4659, 4660), SD(4660, 4661), SD(4660, 4661), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(4661, 4662), SD(4661, 4662), SD(4661, 4662), SD(4661, 4662), SD(4662, 4663), SD(4662, 4663), SD(4663, 4664), SD(4663, 4664), SD(4664, 4665), SD(4664, 4665), SD(4665, 4666), SD(4666, 4667), SD(4666, 4667), SD(4667, 4668), SD(4667, 4668), SD(4668, 4669), SD(4668, 4669), SD(4669, 4670), SD(4669, 4670), SD(4669, 4670), SD(4669, 4670), SD(4670, 4671), SD(4670, 4671), SD(4671, 4673), SD(4671, 4673), SD(4673, 4675), SD(4673, 4675), SD(4675, 4677), SD(4675, 4677), SD(4677, 4679), SD(4677, 4679), SD(4679, 4681), SD(4679, 4681), SD(4681, 4683), SD(4681, 4683), SD(4683, 4685), SD(4683, 4685), SD(4683, 4685), SD(4685, 4687), SD(4685, 4687), SD(4685, 4687), SD(4687, 4688), SD(4687, 4688), SD(4687, 4688), SD(4687, 4688), SD(4688, 4690), SD(4690, 4692), SD(4692, 4694), SD(4685, 4687), SD(4694, 4696), SD(4696, 4698), SD(4698, 4700), SD(4700, 4702), SD(4702, 4704), SD(4704, 4706), SD(4706, 4708), SD(4708, 4710), SD(4710, 4712), SD(4712, 4714), SD(4714, 4716), SD(4716, 4718), SD(4718, 4720), SD(4720, 4722), SD(4722, 4724), SD(4724, 4726), SD(4726, 4728), SD(4728, 4730), SD(4730, 4732), SD(4732, 4734), SD(4734, 4736), SD(4736, 4738), SD(4738, 4740), SD(4740, 4742), SD(4742, 4744), SD(4744, 4746), SD(4746, 4748), SD(4748, 4750), SD(4750, 4752), SD(4752, 4754), SD(4754, 4756), SD(4756, 4758), SD(4758, 4760), SD(4760, 4762), SD(4762, 4764), SD(4764, 4766), SD(4766, 4768), SD(4768, 4770), SD(4770, 4772), SD(4772, 4774), SD(4774, 4776), SD(4776, 4778), SD(4778, 4780), SD(4780, 4782), SD(4782, 4784), SD(4784, 4786), SD(4786, 4788), SD(4788, 4790), SD(4790, 4792), SD(4792, 4794), SD(4794, 4796), SD(4796, 4798), SD(4798, 4800), SD(4800, 4802), SD(4802, 4804), SD(4804, 4806), SD(4806, 4808), SD(4808, 4810), SD(4810, 4812), SD(4812, 4814), SD(4814, 4816), SD(4816, 4818), SD(4818, 4820), SD(4820, 4822), SD(4822, 4824), SD(4824, 4826), SD(4826, 4828), SD(4828, 4830), SD(4830, 4832), SD(4832, 4834), SD(4834, 4836), SD(4836, 4838), SD(4838, 4840), SD(4840, 4842), SD(4842, 4844), SD(4844, 4846), SD(4846, 4848), SD(4848, 4850), SD(4850, 4852), SD(4852, 4854), SD(4854, 4856), SD(4856, 4858), SD(4858, 4860), SD(4860, 4862), SD(4862, 4864), SD(4864, 4866), SD(4866, 4868), SD(4868, 4870), SD(4870, 4872), SD(4872, 4874), SD(4874, 4877), SD(4877, 4880), SD(4880, 4883), SD(4883, 4886), SD(4886, 4889), SD(4889, 4892), SD(4892, 4894), SD(4894, 4896), SD(4692, 4694), SD(4896, 4898), SD(4685, 4687), SD(4694, 4696), SD(4898, 4900), SD(4900, 4902), SD(4702, 4704), SD(4902, 4904), SD(4704, 4706), SD(4706, 4708), SD(4904, 4906), SD(4906, 4908), SD(4714, 4716), SD(4908, 4910), SD(4716, 4718), SD(4718, 4720), SD(4910, 4912), SD(4912, 4914), SD(4722, 4724), SD(4914, 4916), SD(4724, 4726), SD(4726, 4728), SD(4784, 4786), SD(4786, 4788), SD(4792, 4794), SD(4794, 4796), SD(4796, 4798), SD(4804, 4806), SD(4806, 4808), SD(4808, 4810), SD(4810, 4812), SD(4818, 4820), SD(4820, 4822), SD(4822, 4824), SD(4916, 4918), SD(4830, 4832), SD(4918, 4920), SD(4920, 4922), SD(4842, 4844), SD(4922, 4924), SD(4844, 4846), SD(4846, 4848), SD(4872, 4874), SD(4924, 4926), SD(4926, 4928), SD(4862, 4864), SD(4928, 4930), SD(4864, 4866), SD(4866, 4868), SD(4688, 4690), SD(4690, 4692), SD(4930, 4932), SD(4692, 4694), SD(4932, 4934), SD(4696, 4698), SD(4698, 4700), SD(4700, 4702), SD(4702, 4704), SD(4934, 4936), SD(4708, 4710), SD(4710, 4712), SD(4712, 4714), SD(4714, 4716), SD(4936, 4938), SD(4722, 4724), SD(4728, 4730), SD(4730, 4732), SD(4732, 4734), SD(4734, 4736), SD(4736, 4738), SD(4740, 4742), SD(4742, 4744), SD(4744, 4746), SD(4746, 4748), SD(4748, 4750), SD(4750, 4752), SD(4938, 4940), SD(4752, 4754), SD(4754, 4756), SD(4756, 4758), SD(4758, 4760), SD(4760, 4762), SD(4762, 4764), SD(4766, 4768), SD(4768, 4770), SD(4770, 4772), SD(4772, 4774), SD(4774, 4776), SD(4776, 4778), SD(4778, 4780), SD(4780, 4782), SD(4782, 4784), SD(4788, 4790), SD(4790, 4792), SD(4798, 4800), SD(4800, 4802), SD(4802, 4804), SD(4804, 4806), SD(4806, 4808), SD(4812, 4814), SD(4814, 4816), SD(4816, 4818), SD(4818, 4820), SD(4940, 4942), SD(4824, 4826), SD(4826, 4828), SD(4828, 4830), SD(4830, 4832), SD(4836, 4838), SD(4838, 4840), SD(4840, 4842), SD(4842, 4844), SD(4942, 4944), SD(4848, 4850), SD(4850, 4852), SD(4944, 4946), SD(4856, 4858), SD(4858, 4860), SD(4860, 4862), SD(4862, 4864), SD(4946, 4948), SD(4692, 4694), SD(4932, 4934), SD(4702, 4704), SD(4934, 4936), SD(4714, 4716), SD(4936, 4938), SD(4722, 4724), SD(4948, 4950), SD(4748, 4750), SD(4950, 4952), SD(4952, 4954), SD(4954, 4956), SD(4804, 4806), SD(4806, 4808), SD(4818, 4820), SD(4842, 4844), SD(4942, 4944), SD(4862, 4864), SD(4946, 4948), SD(4956, 4959), SD(4959, 4962), SD(4962, 4965), SD(4965, 4967), SD(4967, 4969), SD(4969, 4971), SD(4971, 4973), SD(4973, 4975), SD(4975, 4977), SD(4977, 4979), SD(4979, 4981), SD(4981, 4983), SD(4983, 4985), SD(4985, 4987), SD(4987, 4989), SD(4989, 4991), SD(4991, 4993), SD(4993, 4995), SD(4995, 4997), SD(4997, 4999), SD(4999, 5001), SD(5001, 5003), SD(5003, 5005), SD(5005, 5007), SD(5007, 5009), SD(5009, 5011), SD(4952, 4954), SD(5011, 5013), SD(5013, 5015), SD(5015, 5017), SD(5017, 5019), SD(4965, 4967), SD(4967, 4969), SD(4969, 4971), SD(4971, 4973), SD(4973, 4975), SD(4975, 4977), SD(4977, 4979), SD(4979, 4981), SD(4981, 4983), SD(4983, 4985), SD(4985, 4987), SD(4987, 4989), SD(4989, 4991), SD(4991, 4993), SD(4993, 4995), SD(4995, 4997), SD(4997, 4999), SD(4999, 5001), SD(5001, 5003), SD(5003, 5005), SD(5005, 5007), SD(5007, 5009), SD(5009, 5011), SD(4952, 4954), SD(5011, 5013), SD(5013, 5015), SD(5015, 5017), SD(5017, 5019), SD(5005, 5007), SD(5007, 5009), SD(5009, 5011), SD(4952, 4954), SD(4950, 4952), SD(4954, 4956), SD(4764, 4766), SD(4742, 4744), SD(4744, 4746), SD(4746, 4748), SD(5005, 5007), SD(5007, 5009), SD(5009, 5011), SD(4764, 4766), SD(4766, 4768), SD(5019, 5021), SD(5019, 5021), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5021, 5024), SD(5024, 5027), SD(5024, 5027), SD(5027, 5030), SD(5030, 5033), SD(5033, 5036), SD(5036, 5039), SD(5039, 5042), SD(5042, 5045), SD(5042, 5045), SD(5045, 5048), SD(5048, 5051), SD(5051, 5054), SD(5054, 5057), SD(5057, 5060), SD(5060, 5063), SD(5060, 5063), SD(5063, 5066), SD(5066, 5069), SD(5066, 5069), SD(5069, 5072), SD(5069, 5072), SD(5072, 5075), SD(5075, 5078), SD(5075, 5078), SD(5078, 5081), SD(5081, 5084), SD(5081, 5084), SD(5084, 5087), SD(5084, 5087), SD(5087, 5090), SD(5090, 5093), SD(5090, 5093), SD(5093, 5096), SD(5093, 5096), SD(5096, 5099), SD(5099, 5102), SD(5102, 5105), SD(5105, 5108), SD(5105, 5108), SD(5108, 5111), SD(5111, 5114), SD(5114, 5117), SD(5117, 5120), SD(5120, 5123), SD(5120, 5123), SD(5123, 5126), SD(5126, 5129), SD(5129, 5132), SD(5132, 5135), SD(5135, 5138), SD(5138, 5141), SD(5138, 5141), SD(5141, 5144), SD(5141, 5144), SD(5144, 5147), SD(5144, 5147), SD(5147, 5150), SD(5150, 5153), SD(5153, 5156), SD(5156, 5159), SD(5159, 5162), SD(5162, 5165), SD(5165, 5168), SD(0, 0), SD(0, 0), SD(5168, 5171), SD(5171, 5174), SD(5174, 5177), SD(5177, 5180), SD(5180, 5183), SD(5183, 5186), SD(5183, 5186), SD(5186, 5189), SD(5189, 5192), SD(5192, 5195), SD(5195, 5198), SD(5195, 5198), SD(5198, 5201), SD(5201, 5204), SD(5204, 5207), SD(5207, 5210), SD(5210, 5213), SD(5213, 5216), SD(5216, 5219), SD(5219, 5222), SD(5222, 5225), SD(5225, 5228), SD(5228, 5231), SD(5231, 5234), SD(5234, 5237), SD(5237, 5240), SD(5240, 5243), SD(5243, 5246), SD(5246, 5249), SD(5249, 5252), SD(5252, 5255), SD(5255, 5258), SD(5258, 5261), SD(5261, 5264), SD(5123, 5126), SD(5129, 5132), SD(5264, 5267), SD(5267, 5270), SD(5270, 5273), SD(5273, 5276), SD(5276, 5279), SD(5279, 5282), SD(5276, 5279), SD(5270, 5273), SD(5282, 5285), SD(5285, 5288), SD(5288, 5291), SD(5291, 5294), SD(5294, 5297), SD(5279, 5282), SD(5102, 5105), SD(5072, 5075), SD(5297, 5300), SD(5300, 5303), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5303, 5306), SD(5306, 5309), SD(5309, 5313), SD(5313, 5317), SD(5317, 5321), SD(5321, 5325), SD(5325, 5329), SD(5329, 5333), SD(5333, 5337), SD(5337, 5340), SD(5340, 5358), SD(5358, 5366), SD(5366, 5370), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5370, 5371), SD(5371, 5372), SD(5372, 5373), SD(5373, 5374), SD(596, 597), SD(5374, 5375), SD(5375, 5376), SD(5376, 5377), SD(5377, 5378), SD(5378, 5379), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5379, 5380), SD(5380, 5381), SD(5381, 5382), SD(5382, 5383), SD(5382, 5383), SD(2010, 2011), SD(2011, 2012), SD(5383, 5384), SD(5384, 5385), SD(5385, 5386), SD(5386, 5387), SD(5387, 5388), SD(5388, 5389), SD(5389, 5390), SD(5390, 5391), SD(2255, 2256), SD(2256, 2257), SD(5391, 5392), SD(5392, 5393), SD(5393, 5394), SD(5394, 5395), SD(0, 0), SD(0, 0), SD(5395, 5396), SD(5396, 5397), SD(5397, 5398), SD(5397, 5398), SD(5397, 5398), SD(5397, 5398), SD(5382, 5383), SD(5382, 5383), SD(5382, 5383), SD(5370, 5371), SD(5371, 5372), SD(1970, 1971), SD(0, 0), SD(596, 597), SD(5373, 5374), SD(5375, 5376), SD(5374, 5375), SD(5380, 5381), SD(2010, 2011), SD(2011, 2012), SD(5383, 5384), SD(5384, 5385), SD(5385, 5386), SD(5386, 5387), SD(5398, 5399), SD(5399, 5400), SD(5400, 5401), SD(2007, 2008), SD(5401, 5402), SD(5402, 5403), SD(5403, 5404), SD(2009, 2010), SD(0, 0), SD(5404, 5405), SD(5405, 5406), SD(5406, 5407), SD(5407, 5408), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5408, 5410), SD(5410, 5412), SD(5412, 5414), SD(0, 0), SD(5414, 5416), SD(0, 0), SD(5416, 5418), SD(5418, 5420), SD(5420, 5422), SD(5422, 5424), SD(5424, 5426), SD(5426, 5428), SD(5428, 5430), SD(5430, 5432), SD(5432, 5434), SD(5434, 5436), SD(5436, 5437), SD(5437, 5438), SD(5437, 5438), SD(5438, 5439), SD(5438, 5439), SD(5439, 5440), SD(5439, 5440), SD(5440, 5441), SD(5440, 5441), SD(5441, 5442), SD(5441, 5442), SD(5441, 5442), SD(5441, 5442), SD(5442, 5443), SD(5442, 5443), SD(5443, 5444), SD(5443, 5444), SD(5443, 5444), SD(5443, 5444), SD(5444, 5445), SD(5444, 5445), SD(5445, 5446), SD(5445, 5446), SD(5445, 5446), SD(5445, 5446), SD(5446, 5447), SD(5446, 5447), SD(5446, 5447), SD(5446, 5447), SD(5447, 5448), SD(5447, 5448), SD(5447, 5448), SD(5447, 5448), SD(5448, 5449), SD(5448, 5449), SD(5448, 5449), SD(5448, 5449), SD(5449, 5450), SD(5449, 5450), SD(5449, 5450), SD(5449, 5450), SD(5450, 5451), SD(5450, 5451), SD(5451, 5452), SD(5451, 5452), SD(5452, 5453), SD(5452, 5453), SD(5453, 5454), SD(5453, 5454), SD(5454, 5455), SD(5454, 5455), SD(5454, 5455), SD(5454, 5455), SD(5455, 5456), SD(5455, 5456), SD(5455, 5456), SD(5455, 5456), SD(5456, 5457), SD(5456, 5457), SD(5456, 5457), SD(5456, 5457), SD(5457, 5458), SD(5457, 5458), SD(5457, 5458), SD(5457, 5458), SD(5458, 5459), SD(5458, 5459), SD(5458, 5459), SD(5458, 5459), SD(5459, 5460), SD(5459, 5460), SD(5459, 5460), SD(5459, 5460), SD(5460, 5461), SD(5460, 5461), SD(5460, 5461), SD(5460, 5461), SD(5461, 5462), SD(5461, 5462), SD(5461, 5462), SD(5461, 5462), SD(5462, 5463), SD(5462, 5463), SD(5462, 5463), SD(5462, 5463), SD(5463, 5464), SD(5463, 5464), SD(5463, 5464), SD(5463, 5464), SD(5464, 5465), SD(5464, 5465), SD(5464, 5465), SD(5464, 5465), SD(5465, 5466), SD(5465, 5466), SD(5465, 5466), SD(5465, 5466), SD(5466, 5467), SD(5466, 5467), SD(5466, 5467), SD(5466, 5467), SD(5467, 5468), SD(5467, 5468), SD(5467, 5468), SD(5467, 5468), SD(5468, 5469), SD(5468, 5469), SD(5468, 5469), SD(5468, 5469), SD(5469, 5470), SD(5469, 5470), SD(4670, 4671), SD(4670, 4671), SD(5470, 5471), SD(5470, 5471), SD(5470, 5471), SD(5470, 5471), SD(5471, 5473), SD(5471, 5473), SD(5473, 5475), SD(5473, 5475), SD(5475, 5477), SD(5475, 5477), SD(5477, 5479), SD(5477, 5479), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5374, 5375), SD(5479, 5480), SD(5398, 5399), SD(5405, 5406), SD(5406, 5407), SD(5399, 5400), SD(5480, 5481), SD(2010, 2011), SD(2011, 2012), SD(5400, 5401), SD(2007, 2008), SD(5370, 5371), SD(5401, 5402), SD(1970, 1971), SD(5481, 5482), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(5373, 5374), SD(596, 597), SD(5402, 5403), SD(2009, 2010), SD(5403, 5404), SD(5375, 5376), SD(5407, 5408), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(5395, 5396), SD(5404, 5405), SD(5396, 5397), SD(5482, 5483), SD(5382, 5383), SD(1943, 1944), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(5383, 5384), SD(5483, 5484), SD(5384, 5385), SD(5484, 5485), SD(5485, 5486), SD(5486, 5487), SD(5372, 5373), SD(5391, 5392), SD(5392, 5393), SD(5371, 5372), SD(5487, 5488), SD(3387, 3388), SD(5488, 5489), SD(5489, 5490), SD(5490, 5491), SD(5491, 5492), SD(5492, 5493), SD(5493, 5494), SD(5494, 5495), SD(5495, 5496), SD(5496, 5497), SD(5497, 5498), SD(3341, 3342), SD(3342, 3343), SD(3343, 3344), SD(3344, 3345), SD(3345, 3346), SD(3346, 3347), SD(3347, 3348), SD(3348, 3349), SD(3349, 3350), SD(3350, 3351), SD(3351, 3352), SD(3352, 3353), SD(3353, 3354), SD(3354, 3355), SD(3355, 3356), SD(3356, 3357), SD(3357, 3358), SD(3358, 3359), SD(3359, 3360), SD(3360, 3361), SD(3361, 3362), SD(3362, 3363), SD(3363, 3364), SD(3364, 3365), SD(3365, 3366), SD(3366, 3367), SD(3367, 3368), SD(3368, 3369), SD(3369, 3370), SD(3370, 3371), SD(3371, 3372), SD(3372, 3373), SD(3373, 3374), SD(3374, 3375), SD(3375, 3376), SD(3376, 3377), SD(3377, 3378), SD(3378, 3379), SD(3379, 3380), SD(3380, 3381), SD(3381, 3382), SD(3382, 3383), SD(3383, 3384), SD(3384, 3385), SD(5498, 5499), SD(5499, 5500), SD(5500, 5501), SD(5501, 5502), SD(5502, 5503), SD(5503, 5504), SD(5504, 5505), SD(5505, 5506), SD(5506, 5507), SD(5507, 5508), SD(5508, 5509), SD(5509, 5510), SD(5510, 5511), SD(5511, 5512), SD(5512, 5513), SD(5513, 5514), SD(5514, 5515), SD(5515, 5516), SD(5516, 5517), SD(5517, 5518), SD(5518, 5519), SD(5519, 5520), SD(5520, 5521), SD(5521, 5522), SD(5522, 5523), SD(5523, 5524), SD(5524, 5525), SD(5525, 5526), SD(5526, 5527), SD(5527, 5528), SD(5528, 5529), SD(5529, 5530), SD(5530, 5531), SD(5531, 5532), SD(0, 0), SD(0, 0), SD(0, 0), SD(5532, 5533), SD(5533, 5534), SD(5534, 5535), SD(5535, 5536), SD(5536, 5537), SD(5537, 5538), SD(0, 0), SD(0, 0), SD(5538, 5539), SD(5539, 5540), SD(5540, 5541), SD(5541, 5542), SD(5542, 5543), SD(5543, 5544), SD(0, 0), SD(0, 0), SD(5544, 5545), SD(5545, 5546), SD(5546, 5547), SD(5547, 5548), SD(5548, 5549), SD(5549, 5550), SD(0, 0), SD(0, 0), SD(5550, 5551), SD(5551, 5552), SD(5552, 5553), SD(0, 0), SD(0, 0), SD(0, 0), SD(5553, 5554), SD(5554, 5555), SD(5555, 5556), SD(5556, 5557), SD(5557, 5558), SD(5558, 5559), SD(5559, 5560), SD(0, 0), SD(5560, 5561), SD(5561, 5562), SD(5562, 5563), SD(5563, 5564), SD(5564, 5565), SD(5565, 5566), SD(5566, 5567), SD(5567, 5568), SD(5568, 5569), SD(5569, 5570), SD(5570, 5571), SD(5571, 5572), SD(0, 0), SD(5572, 5573), SD(5573, 5574), SD(5574, 5575), SD(5575, 5576), SD(5576, 5577), SD(5577, 5578), SD(5578, 5579), SD(5579, 5580), SD(5580, 5581), SD(5581, 5582), SD(5582, 5583), SD(5583, 5584), SD(5584, 5585), SD(5585, 5586), SD(2033, 2034), SD(5586, 5587), SD(5587, 5588), SD(5588, 5589), SD(5589, 5590), SD(5590, 5591), SD(5591, 5592), SD(5592, 5593), SD(5593, 5594), SD(5594, 5595), SD(5595, 5596), SD(5596, 5597), SD(5597, 5598), SD(5598, 5599), SD(5599, 5600), SD(5600, 5601), SD(2481, 2482), SD(5601, 5602), SD(5602, 5603), SD(5603, 5604), SD(5604, 5605), SD(5605, 5606), SD(5606, 5607), SD(5607, 5608), SD(5608, 5609), SD(5609, 5610), SD(5610, 5611), SD(5611, 5612), SD(0, 0), SD(5612, 5613), SD(5613, 5614), SD(5614, 5615), SD(5615, 5616), SD(5616, 5617), SD(5617, 5618), SD(5618, 5619), SD(5619, 5620), SD(5620, 5621), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(0, 0), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(0, 0), SD(2021, 2022), SD(948, 949), SD(0, 0), SD(0, 0), SD(951, 952), SD(0, 0), SD(0, 0), SD(954, 955), SD(955, 956), SD(0, 0), SD(0, 0), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(0, 0), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(0, 0), SD(998, 999), SD(0, 0), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(0, 0), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(0, 0), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(0, 0), SD(0, 0), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(0, 0), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(0, 0), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(0, 0), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(0, 0), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(0, 0), SD(959, 960), SD(0, 0), SD(0, 0), SD(0, 0), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(0, 0), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(3, 4), SD(969, 970), SD(995, 996), SD(970, 971), SD(971, 972), SD(998, 999), SD(975, 976), SD(563, 564), SD(992, 993), SD(565, 566), SD(976, 977), SD(585, 586), SD(977, 978), SD(2012, 2013), SD(14, 15), SD(982, 983), SD(2481, 2482), SD(566, 567), SD(356, 357), SD(983, 984), SD(984, 985), SD(987, 988), SD(570, 571), SD(586, 587), SD(571, 572), SD(1025, 1026), SD(5673, 5674), SD(5674, 5675), SD(0, 0), SD(0, 0), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5675, 5676), SD(5676, 5677), SD(2055, 2056), SD(5677, 5678), SD(5678, 5679), SD(5679, 5680), SD(5680, 5681), SD(652, 653), SD(5681, 5682), SD(5682, 5683), SD(5683, 5684), SD(5684, 5685), SD(5685, 5686), SD(5686, 5687), SD(5687, 5688), SD(2056, 2057), SD(5688, 5689), SD(5689, 5690), SD(654, 655), SD(5690, 5691), SD(642, 643), SD(5691, 5692), SD(5692, 5693), SD(5693, 5694), SD(2045, 2046), SD(5694, 5695), SD(5695, 5696), SD(640, 641), SD(989, 990), SD(990, 991), SD(653, 654), SD(5696, 5697), SD(5697, 5698), SD(641, 642), SD(1863, 1864), SD(649, 650), SD(5698, 5699), SD(10, 11), SD(5699, 5700), SD(5700, 5701), SD(5701, 5702), SD(648, 649), SD(650, 651), SD(651, 652), SD(5702, 5703), SD(5703, 5704), SD(5704, 5705), SD(647, 648), SD(991, 992), SD(5705, 5706), SD(5706, 5707), SD(5707, 5708), SD(5708, 5709), SD(5709, 5710), SD(5710, 5711), SD(5711, 5712), SD(5712, 5713), SD(5713, 5714), SD(5714, 5715), SD(5715, 5716), SD(0, 0), SD(0, 0), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), SD(5442, 5443), SD(5443, 5444), SD(5447, 5448), SD(5450, 5451), SD(0, 0), SD(5469, 5470), SD(5453, 5454), SD(5448, 5449), SD(5458, 5459), SD(5470, 5471), SD(5464, 5465), SD(5465, 5466), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(5452, 5453), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(5451, 5452), SD(5457, 5458), SD(5459, 5460), SD(5461, 5462), SD(5716, 5717), SD(4654, 4655), SD(5717, 5718), SD(5718, 5719), SD(0, 0), SD(5443, 5444), SD(5447, 5448), SD(0, 0), SD(5468, 5469), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(0, 0), SD(5470, 5471), SD(5464, 5465), SD(5465, 5466), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(0, 0), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(0, 0), SD(5457, 5458), SD(0, 0), SD(5461, 5462), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5447, 5448), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(0, 0), SD(5470, 5471), SD(0, 0), SD(5465, 5466), SD(0, 0), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(0, 0), SD(5456, 5457), SD(5463, 5464), SD(0, 0), SD(5455, 5456), SD(0, 0), SD(0, 0), SD(5449, 5450), SD(0, 0), SD(5457, 5458), SD(0, 0), SD(5461, 5462), SD(0, 0), SD(4654, 4655), SD(0, 0), SD(5718, 5719), SD(0, 0), SD(5443, 5444), SD(5447, 5448), SD(0, 0), SD(5468, 5469), SD(0, 0), SD(0, 0), SD(5448, 5449), SD(5458, 5459), SD(5470, 5471), SD(5464, 5465), SD(0, 0), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(0, 0), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(0, 0), SD(5457, 5458), SD(5459, 5460), SD(5461, 5462), SD(5716, 5717), SD(0, 0), SD(5717, 5718), SD(0, 0), SD(5442, 5443), SD(5443, 5444), SD(5447, 5448), SD(5450, 5451), SD(5468, 5469), SD(5469, 5470), SD(5453, 5454), SD(5448, 5449), SD(5458, 5459), SD(5470, 5471), SD(0, 0), SD(5465, 5466), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(5452, 5453), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(5451, 5452), SD(5457, 5458), SD(5459, 5460), SD(5461, 5462), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5443, 5444), SD(5447, 5448), SD(5450, 5451), SD(0, 0), SD(5469, 5470), SD(5453, 5454), SD(5448, 5449), SD(5458, 5459), SD(5470, 5471), SD(0, 0), SD(5465, 5466), SD(5466, 5467), SD(5467, 5468), SD(5454, 5455), SD(5460, 5461), SD(5462, 5463), SD(5456, 5457), SD(5463, 5464), SD(5452, 5453), SD(5455, 5456), SD(5445, 5446), SD(5446, 5447), SD(5449, 5450), SD(5451, 5452), SD(5457, 5458), SD(5459, 5460), SD(5461, 5462), SD(5719, 5721), SD(5721, 5723), SD(5723, 5725), SD(5725, 5727), SD(5727, 5729), SD(5729, 5731), SD(5731, 5733), SD(5733, 5735), SD(5735, 5737), SD(5737, 5739), SD(5739, 5741), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5741, 5744), SD(5744, 5747), SD(5747, 5750), SD(5750, 5753), SD(5753, 5756), SD(5756, 5759), SD(5759, 5762), SD(5762, 5765), SD(5765, 5768), SD(5768, 5771), SD(5771, 5774), SD(5774, 5777), SD(5777, 5780), SD(5780, 5783), SD(5783, 5786), SD(5786, 5789), SD(5789, 5792), SD(5792, 5795), SD(5795, 5798), SD(5798, 5801), SD(5801, 5804), SD(5804, 5807), SD(5807, 5810), SD(5810, 5813), SD(5813, 5816), SD(5816, 5819), SD(5819, 5822), SD(2021, 2022), SD(962, 963), SD(5822, 5824), SD(5824, 5826), SD(0, 0), SD(945, 946), SD(947, 948), SD(2021, 2022), SD(948, 949), SD(949, 950), SD(2047, 2048), SD(951, 952), SD(952, 953), SD(953, 954), SD(954, 955), SD(955, 956), SD(956, 957), SD(957, 958), SD(958, 959), SD(959, 960), SD(961, 962), SD(2036, 2037), SD(962, 963), SD(2479, 2480), SD(963, 964), SD(964, 965), SD(2113, 2114), SD(965, 966), SD(2125, 2126), SD(2480, 2481), SD(2044, 2045), SD(5826, 5828), SD(3934, 3936), SD(5828, 5830), SD(5830, 5832), SD(5832, 5835), SD(5835, 5837), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5837, 5839), SD(5839, 5841), SD(5841, 5843), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5843, 5845), SD(5845, 5847), SD(5847, 5849), SD(3351, 3352), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(2562, 2563), SD(5849, 5850), SD(5850, 5851), SD(5851, 5852), SD(2505, 2506), SD(5852, 5853), SD(5853, 5854), SD(2942, 2943), SD(5854, 5855), SD(5855, 5856), SD(5856, 5857), SD(4300, 4301), SD(5857, 5858), SD(5858, 5859), SD(5859, 5860), SD(5860, 5861), SD(5861, 5862), SD(5862, 5863), SD(2598, 2599), SD(5863, 5864), SD(5864, 5865), SD(5865, 5866), SD(5866, 5867), SD(5867, 5868), SD(5868, 5869), SD(2499, 2500), SD(2934, 2935), SD(5869, 5870), SD(3264, 3265), SD(2937, 2938), SD(3265, 3266), SD(5870, 5871), SD(2654, 2655), SD(5871, 5872), SD(5872, 5873), SD(5873, 5874), SD(5874, 5875), SD(5875, 5876), SD(3247, 3248), SD(2572, 2573), SD(5876, 5877), SD(5877, 5878), SD(5878, 5879), SD(5879, 5880), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5880, 5883), SD(5883, 5886), SD(5886, 5889), SD(5889, 5892), SD(5892, 5895), SD(5895, 5898), SD(5898, 5901), SD(5901, 5904), SD(5904, 5907), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(0, 0), SD(5907, 5908), SD(5908, 5909), SD(2000, 2001), SD(13, 14), SD(6, 7), SD(7, 8), SD(2001, 2002), SD(2002, 2003), SD(2003, 2004), SD(2004, 2005), SD(2005, 2006), SD(2006, 2007), ];
}

export extern(C) immutable(dstring) sidero_utf_lut_getDecompositionMappingCompatibility(dchar input) @trusted nothrow @nogc pure {
    SliceDiced* got = cast(SliceDiced*)sidero_utf_lut_getDecompositionMappingCompatibility2(input);
    if (got is null || got.end == 0)
        return null;
    return LUT_DecompositionFMappingDString[got.offset .. got.end];
}
static immutable dstring LUT_DecompositionFMappingDString = cast(dstring)[0x20, 0x20, 0x308, 0x61, 0x20, 0x304, 0x32, 0x33, 0x20, 0x301, 0x3BC, 0x20, 0x327, 0x31, 0x6F, 0x31, 0x2044, 0x34, 0x31, 0x2044, 0x32, 0x33, 0x2044, 0x34, 0x41, 0x300, 0x41, 0x301, 0x41, 0x302, 0x41, 0x303, 0x41, 0x308, 0x41, 0x30A, 0x43, 0x327, 0x45, 0x300, 0x45, 0x301, 0x45, 0x302, 0x45, 0x308, 0x49, 0x300, 0x49, 0x301, 0x49, 0x302, 0x49, 0x308, 0x4E, 0x303, 0x4F, 0x300, 0x4F, 0x301, 0x4F, 0x302, 0x4F, 0x303, 0x4F, 0x308, 0x55, 0x300, 0x55, 0x301, 0x55, 0x302, 0x55, 0x308, 0x59, 0x301, 0x61, 0x300, 0x61, 0x301, 0x61, 0x302, 0x61, 0x303, 0x61, 0x308, 0x61, 0x30A, 0x63, 0x327, 0x65, 0x300, 0x65, 0x301, 0x65, 0x302, 0x65, 0x308, 0x69, 0x300, 0x69, 0x301, 0x69, 0x302, 0x69, 0x308, 0x6E, 0x303, 0x6F, 0x300, 0x6F, 0x301, 0x6F, 0x302, 0x6F, 0x303, 0x6F, 0x308, 0x75, 0x300, 0x75, 0x301, 0x75, 0x302, 0x75, 0x308, 0x79, 0x301, 0x79, 0x308, 0x41, 0x304, 0x61, 0x304, 0x41, 0x306, 0x61, 0x306, 0x41, 0x328, 0x61, 0x328, 0x43, 0x301, 0x63, 0x301, 0x43, 0x302, 0x63, 0x302, 0x43, 0x307, 0x63, 0x307, 0x43, 0x30C, 0x63, 0x30C, 0x44, 0x30C, 0x64, 0x30C, 0x45, 0x304, 0x65, 0x304, 0x45, 0x306, 0x65, 0x306, 0x45, 0x307, 0x65, 0x307, 0x45, 0x328, 0x65, 0x328, 0x45, 0x30C, 0x65, 0x30C, 0x47, 0x302, 0x67, 0x302, 0x47, 0x306, 0x67, 0x306, 0x47, 0x307, 0x67, 0x307, 0x47, 0x327, 0x67, 0x327, 0x48, 0x302, 0x68, 0x302, 0x49, 0x303, 0x69, 0x303, 0x49, 0x304, 0x69, 0x304, 0x49, 0x306, 0x69, 0x306, 0x49, 0x328, 0x69, 0x328, 0x49, 0x307, 0x49, 0x4A, 0x69, 0x6A, 0x4A, 0x302, 0x6A, 0x302, 0x4B, 0x327, 0x6B, 0x327, 0x4C, 0x301, 0x6C, 0x301, 0x4C, 0x327, 0x6C, 0x327, 0x4C, 0x30C, 0x6C, 0x30C, 0x4C, 0xB7, 0x6C, 0xB7, 0x4E, 0x301, 0x6E, 0x301, 0x4E, 0x327, 0x6E, 0x327, 0x4E, 0x30C, 0x6E, 0x30C, 0x2BC, 0x6E, 0x4F, 0x304, 0x6F, 0x304, 0x4F, 0x306, 0x6F, 0x306, 0x4F, 0x30B, 0x6F, 0x30B, 0x52, 0x301, 0x72, 0x301, 0x52, 0x327, 0x72, 0x327, 0x52, 0x30C, 0x72, 0x30C, 0x53, 0x301, 0x73, 0x301, 0x53, 0x302, 0x73, 0x302, 0x53, 0x327, 0x73, 0x327, 0x53, 0x30C, 0x73, 0x30C, 0x54, 0x327, 0x74, 0x327, 0x54, 0x30C, 0x74, 0x30C, 0x55, 0x303, 0x75, 0x303, 0x55, 0x304, 0x75, 0x304, 0x55, 0x306, 0x75, 0x306, 0x55, 0x30A, 0x75, 0x30A, 0x55, 0x30B, 0x75, 0x30B, 0x55, 0x328, 0x75, 0x328, 0x57, 0x302, 0x77, 0x302, 0x59, 0x302, 0x79, 0x302, 0x59, 0x308, 0x5A, 0x301, 0x7A, 0x301, 0x5A, 0x307, 0x7A, 0x307, 0x5A, 0x30C, 0x7A, 0x30C, 0x73, 0x4F, 0x31B, 0x6F, 0x31B, 0x55, 0x31B, 0x75, 0x31B, 0x44, 0x17D, 0x44, 0x17E, 0x64, 0x17E, 0x4C, 0x4A, 0x4C, 0x6A, 0x6C, 0x6A, 0x4E, 0x4A, 0x4E, 0x6A, 0x6E, 0x6A, 0x41, 0x30C, 0x61, 0x30C, 0x49, 0x30C, 0x69, 0x30C, 0x4F, 0x30C, 0x6F, 0x30C, 0x55, 0x30C, 0x75, 0x30C, 0xDC, 0x304, 0xFC, 0x304, 0xDC, 0x301, 0xFC, 0x301, 0xDC, 0x30C, 0xFC, 0x30C, 0xDC, 0x300, 0xFC, 0x300, 0xC4, 0x304, 0xE4, 0x304, 0x226, 0x304, 0x227, 0x304, 0xC6, 0x304, 0xE6, 0x304, 0x47, 0x30C, 0x67, 0x30C, 0x4B, 0x30C, 0x6B, 0x30C, 0x4F, 0x328, 0x6F, 0x328, 0x1EA, 0x304, 0x1EB, 0x304, 0x1B7, 0x30C, 0x292, 0x30C, 0x6A, 0x30C, 0x44, 0x5A, 0x44, 0x7A, 0x64, 0x7A, 0x47, 0x301, 0x67, 0x301, 0x4E, 0x300, 0x6E, 0x300, 0xC5, 0x301, 0xE5, 0x301, 0xC6, 0x301, 0xE6, 0x301, 0xD8, 0x301, 0xF8, 0x301, 0x41, 0x30F, 0x61, 0x30F, 0x41, 0x311, 0x61, 0x311, 0x45, 0x30F, 0x65, 0x30F, 0x45, 0x311, 0x65, 0x311, 0x49, 0x30F, 0x69, 0x30F, 0x49, 0x311, 0x69, 0x311, 0x4F, 0x30F, 0x6F, 0x30F, 0x4F, 0x311, 0x6F, 0x311, 0x52, 0x30F, 0x72, 0x30F, 0x52, 0x311, 0x72, 0x311, 0x55, 0x30F, 0x75, 0x30F, 0x55, 0x311, 0x75, 0x311, 0x53, 0x326, 0x73, 0x326, 0x54, 0x326, 0x74, 0x326, 0x48, 0x30C, 0x68, 0x30C, 0x41, 0x307, 0x61, 0x307, 0x45, 0x327, 0x65, 0x327, 0xD6, 0x304, 0xF6, 0x304, 0xD5, 0x304, 0xF5, 0x304, 0x4F, 0x307, 0x6F, 0x307, 0x22E, 0x304, 0x22F, 0x304, 0x59, 0x304, 0x79, 0x304, 0x68, 0x266, 0x6A, 0x72, 0x279, 0x27B, 0x281, 0x77, 0x79, 0x20, 0x306, 0x20, 0x307, 0x20, 0x30A, 0x20, 0x328, 0x20, 0x303, 0x20, 0x30B, 0x263, 0x6C, 0x78, 0x295, 0x300, 0x301, 0x313, 0x308, 0x301, 0x2B9, 0x20, 0x345, 0x3B, 0xA8, 0x301, 0x391, 0x301, 0xB7, 0x395, 0x301, 0x397, 0x301, 0x399, 0x301, 0x39F, 0x301, 0x3A5, 0x301, 0x3A9, 0x301, 0x3CA, 0x301, 0x399, 0x308, 0x3A5, 0x308, 0x3B1, 0x301, 0x3B5, 0x301, 0x3B7, 0x301, 0x3B9, 0x301, 0x3CB, 0x301, 0x3B9, 0x308, 0x3C5, 0x308, 0x3BF, 0x301, 0x3C5, 0x301, 0x3C9, 0x301, 0x3B2, 0x3B8, 0x3A5, 0x3D2, 0x301, 0x3D2, 0x308, 0x3C6, 0x3C0, 0x3BA, 0x3C1, 0x3C2, 0x398, 0x3B5, 0x3A3, 0x415, 0x300, 0x415, 0x308, 0x413, 0x301, 0x406, 0x308, 0x41A, 0x301, 0x418, 0x300, 0x423, 0x306, 0x418, 0x306, 0x438, 0x306, 0x435, 0x300, 0x435, 0x308, 0x433, 0x301, 0x456, 0x308, 0x43A, 0x301, 0x438, 0x300, 0x443, 0x306, 0x474, 0x30F, 0x475, 0x30F, 0x416, 0x306, 0x436, 0x306, 0x410, 0x306, 0x430, 0x306, 0x410, 0x308, 0x430, 0x308, 0x415, 0x306, 0x435, 0x306, 0x4D8, 0x308, 0x4D9, 0x308, 0x416, 0x308, 0x436, 0x308, 0x417, 0x308, 0x437, 0x308, 0x418, 0x304, 0x438, 0x304, 0x418, 0x308, 0x438, 0x308, 0x41E, 0x308, 0x43E, 0x308, 0x4E8, 0x308, 0x4E9, 0x308, 0x42D, 0x308, 0x44D, 0x308, 0x423, 0x304, 0x443, 0x304, 0x423, 0x308, 0x443, 0x308, 0x423, 0x30B, 0x443, 0x30B, 0x427, 0x308, 0x447, 0x308, 0x42B, 0x308, 0x44B, 0x308, 0x565, 0x582, 0x627, 0x653, 0x627, 0x654, 0x648, 0x654, 0x627, 0x655, 0x64A, 0x654, 0x627, 0x674, 0x648, 0x674, 0x6C7, 0x674, 0x64A, 0x674, 0x6D5, 0x654, 0x6C1, 0x654, 0x6D2, 0x654, 0x928, 0x93C, 0x930, 0x93C, 0x933, 0x93C, 0x915, 0x93C, 0x916, 0x93C, 0x917, 0x93C, 0x91C, 0x93C, 0x921, 0x93C, 0x922, 0x93C, 0x92B, 0x93C, 0x92F, 0x93C, 0x9C7, 0x9BE, 0x9C7, 0x9D7, 0x9A1, 0x9BC, 0x9A2, 0x9BC, 0x9AF, 0x9BC, 0xA32, 0xA3C, 0xA38, 0xA3C, 0xA16, 0xA3C, 0xA17, 0xA3C, 0xA1C, 0xA3C, 0xA2B, 0xA3C, 0xB47, 0xB56, 0xB47, 0xB3E, 0xB47, 0xB57, 0xB21, 0xB3C, 0xB22, 0xB3C, 0xB92, 0xBD7, 0xBC6, 0xBBE, 0xBC7, 0xBBE, 0xBC6, 0xBD7, 0xC46, 0xC56, 0xCBF, 0xCD5, 0xCC6, 0xCD5, 0xCC6, 0xCD6, 0xCC6, 0xCC2, 0xCCA, 0xCD5, 0xD46, 0xD3E, 0xD47, 0xD3E, 0xD46, 0xD57, 0xDD9, 0xDCA, 0xDD9, 0xDCF, 0xDDC, 0xDCA, 0xDD9, 0xDDF, 0xE4D, 0xE32, 0xECD, 0xEB2, 0xEAB, 0xE99, 0xEAB, 0xEA1, 0xF0B, 0xF42, 0xFB7, 0xF4C, 0xFB7, 0xF51, 0xFB7, 0xF56, 0xFB7, 0xF5B, 0xFB7, 0xF40, 0xFB5, 0xF71, 0xF72, 0xF71, 0xF74, 0xFB2, 0xF80, 0xFB2, 0xF81, 0xFB3, 0xF80, 0xFB3, 0xF81, 0xF71, 0xF80, 0xF92, 0xFB7, 0xF9C, 0xFB7, 0xFA1, 0xFB7, 0xFA6, 0xFB7, 0xFAB, 0xFB7, 0xF90, 0xFB5, 0x1025, 0x102E, 0x10DC, 0x1B05, 0x1B35, 0x1B07, 0x1B35, 0x1B09, 0x1B35, 0x1B0B, 0x1B35, 0x1B0D, 0x1B35, 0x1B11, 0x1B35, 0x1B3A, 0x1B35, 0x1B3C, 0x1B35, 0x1B3E, 0x1B35, 0x1B3F, 0x1B35, 0x1B42, 0x1B35, 0x41, 0xC6, 0x42, 0x44, 0x45, 0x18E, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x222, 0x50, 0x52, 0x54, 0x55, 0x57, 0x250, 0x251, 0x1D02, 0x62, 0x64, 0x65, 0x259, 0x25B, 0x25C, 0x67, 0x6B, 0x6D, 0x14B, 0x254, 0x1D16, 0x1D17, 0x70, 0x74, 0x75, 0x1D1D, 0x26F, 0x76, 0x1D25, 0x3B3, 0x3B4, 0x3C7, 0x69, 0x43D, 0x252, 0x63, 0x255, 0xF0, 0x66, 0x25F, 0x261, 0x265, 0x268, 0x269, 0x26A, 0x1D7B, 0x29D, 0x26D, 0x1D85, 0x29F, 0x271, 0x270, 0x272, 0x273, 0x274, 0x275, 0x278, 0x282, 0x283, 0x1AB, 0x289, 0x28A, 0x1D1C, 0x28B, 0x28C, 0x7A, 0x290, 0x291, 0x292, 0x41, 0x325, 0x61, 0x325, 0x42, 0x307, 0x62, 0x307, 0x42, 0x323, 0x62, 0x323, 0x42, 0x331, 0x62, 0x331, 0xC7, 0x301, 0xE7, 0x301, 0x44, 0x307, 0x64, 0x307, 0x44, 0x323, 0x64, 0x323, 0x44, 0x331, 0x64, 0x331, 0x44, 0x327, 0x64, 0x327, 0x44, 0x32D, 0x64, 0x32D, 0x112, 0x300, 0x113, 0x300, 0x112, 0x301, 0x113, 0x301, 0x45, 0x32D, 0x65, 0x32D, 0x45, 0x330, 0x65, 0x330, 0x228, 0x306, 0x229, 0x306, 0x46, 0x307, 0x66, 0x307, 0x47, 0x304, 0x67, 0x304, 0x48, 0x307, 0x68, 0x307, 0x48, 0x323, 0x68, 0x323, 0x48, 0x308, 0x68, 0x308, 0x48, 0x327, 0x68, 0x327, 0x48, 0x32E, 0x68, 0x32E, 0x49, 0x330, 0x69, 0x330, 0xCF, 0x301, 0xEF, 0x301, 0x4B, 0x301, 0x6B, 0x301, 0x4B, 0x323, 0x6B, 0x323, 0x4B, 0x331, 0x6B, 0x331, 0x4C, 0x323, 0x6C, 0x323, 0x1E36, 0x304, 0x1E37, 0x304, 0x4C, 0x331, 0x6C, 0x331, 0x4C, 0x32D, 0x6C, 0x32D, 0x4D, 0x301, 0x6D, 0x301, 0x4D, 0x307, 0x6D, 0x307, 0x4D, 0x323, 0x6D, 0x323, 0x4E, 0x307, 0x6E, 0x307, 0x4E, 0x323, 0x6E, 0x323, 0x4E, 0x331, 0x6E, 0x331, 0x4E, 0x32D, 0x6E, 0x32D, 0xD5, 0x301, 0xF5, 0x301, 0xD5, 0x308, 0xF5, 0x308, 0x14C, 0x300, 0x14D, 0x300, 0x14C, 0x301, 0x14D, 0x301, 0x50, 0x301, 0x70, 0x301, 0x50, 0x307, 0x70, 0x307, 0x52, 0x307, 0x72, 0x307, 0x52, 0x323, 0x72, 0x323, 0x1E5A, 0x304, 0x1E5B, 0x304, 0x52, 0x331, 0x72, 0x331, 0x53, 0x307, 0x73, 0x307, 0x53, 0x323, 0x73, 0x323, 0x15A, 0x307, 0x15B, 0x307, 0x160, 0x307, 0x161, 0x307, 0x1E62, 0x307, 0x1E63, 0x307, 0x54, 0x307, 0x74, 0x307, 0x54, 0x323, 0x74, 0x323, 0x54, 0x331, 0x74, 0x331, 0x54, 0x32D, 0x74, 0x32D, 0x55, 0x324, 0x75, 0x324, 0x55, 0x330, 0x75, 0x330, 0x55, 0x32D, 0x75, 0x32D, 0x168, 0x301, 0x169, 0x301, 0x16A, 0x308, 0x16B, 0x308, 0x56, 0x303, 0x76, 0x303, 0x56, 0x323, 0x76, 0x323, 0x57, 0x300, 0x77, 0x300, 0x57, 0x301, 0x77, 0x301, 0x57, 0x308, 0x77, 0x308, 0x57, 0x307, 0x77, 0x307, 0x57, 0x323, 0x77, 0x323, 0x58, 0x307, 0x78, 0x307, 0x58, 0x308, 0x78, 0x308, 0x59, 0x307, 0x79, 0x307, 0x5A, 0x302, 0x7A, 0x302, 0x5A, 0x323, 0x7A, 0x323, 0x5A, 0x331, 0x7A, 0x331, 0x68, 0x331, 0x74, 0x308, 0x77, 0x30A, 0x79, 0x30A, 0x61, 0x2BE, 0x17F, 0x307, 0x41, 0x323, 0x61, 0x323, 0x41, 0x309, 0x61, 0x309, 0xC2, 0x301, 0xE2, 0x301, 0xC2, 0x300, 0xE2, 0x300, 0xC2, 0x309, 0xE2, 0x309, 0xC2, 0x303, 0xE2, 0x303, 0x1EA0, 0x302, 0x1EA1, 0x302, 0x102, 0x301, 0x103, 0x301, 0x102, 0x300, 0x103, 0x300, 0x102, 0x309, 0x103, 0x309, 0x102, 0x303, 0x103, 0x303, 0x1EA0, 0x306, 0x1EA1, 0x306, 0x45, 0x323, 0x65, 0x323, 0x45, 0x309, 0x65, 0x309, 0x45, 0x303, 0x65, 0x303, 0xCA, 0x301, 0xEA, 0x301, 0xCA, 0x300, 0xEA, 0x300, 0xCA, 0x309, 0xEA, 0x309, 0xCA, 0x303, 0xEA, 0x303, 0x1EB8, 0x302, 0x1EB9, 0x302, 0x49, 0x309, 0x69, 0x309, 0x49, 0x323, 0x69, 0x323, 0x4F, 0x323, 0x6F, 0x323, 0x4F, 0x309, 0x6F, 0x309, 0xD4, 0x301, 0xF4, 0x301, 0xD4, 0x300, 0xF4, 0x300, 0xD4, 0x309, 0xF4, 0x309, 0xD4, 0x303, 0xF4, 0x303, 0x1ECC, 0x302, 0x1ECD, 0x302, 0x1A0, 0x301, 0x1A1, 0x301, 0x1A0, 0x300, 0x1A1, 0x300, 0x1A0, 0x309, 0x1A1, 0x309, 0x1A0, 0x303, 0x1A1, 0x303, 0x1A0, 0x323, 0x1A1, 0x323, 0x55, 0x323, 0x75, 0x323, 0x55, 0x309, 0x75, 0x309, 0x1AF, 0x301, 0x1B0, 0x301, 0x1AF, 0x300, 0x1B0, 0x300, 0x1AF, 0x309, 0x1B0, 0x309, 0x1AF, 0x303, 0x1B0, 0x303, 0x1AF, 0x323, 0x1B0, 0x323, 0x59, 0x300, 0x79, 0x300, 0x59, 0x323, 0x79, 0x323, 0x59, 0x309, 0x79, 0x309, 0x59, 0x303, 0x79, 0x303, 0x3B1, 0x313, 0x3B1, 0x314, 0x1F00, 0x300, 0x1F01, 0x300, 0x1F00, 0x301, 0x1F01, 0x301, 0x1F00, 0x342, 0x1F01, 0x342, 0x391, 0x313, 0x391, 0x314, 0x1F08, 0x300, 0x1F09, 0x300, 0x1F08, 0x301, 0x1F09, 0x301, 0x1F08, 0x342, 0x1F09, 0x342, 0x3B5, 0x313, 0x3B5, 0x314, 0x1F10, 0x300, 0x1F11, 0x300, 0x1F10, 0x301, 0x1F11, 0x301, 0x395, 0x313, 0x395, 0x314, 0x1F18, 0x300, 0x1F19, 0x300, 0x1F18, 0x301, 0x1F19, 0x301, 0x3B7, 0x313, 0x3B7, 0x314, 0x1F20, 0x300, 0x1F21, 0x300, 0x1F20, 0x301, 0x1F21, 0x301, 0x1F20, 0x342, 0x1F21, 0x342, 0x397, 0x313, 0x397, 0x314, 0x1F28, 0x300, 0x1F29, 0x300, 0x1F28, 0x301, 0x1F29, 0x301, 0x1F28, 0x342, 0x1F29, 0x342, 0x3B9, 0x313, 0x3B9, 0x314, 0x1F30, 0x300, 0x1F31, 0x300, 0x1F30, 0x301, 0x1F31, 0x301, 0x1F30, 0x342, 0x1F31, 0x342, 0x399, 0x313, 0x399, 0x314, 0x1F38, 0x300, 0x1F39, 0x300, 0x1F38, 0x301, 0x1F39, 0x301, 0x1F38, 0x342, 0x1F39, 0x342, 0x3BF, 0x313, 0x3BF, 0x314, 0x1F40, 0x300, 0x1F41, 0x300, 0x1F40, 0x301, 0x1F41, 0x301, 0x39F, 0x313, 0x39F, 0x314, 0x1F48, 0x300, 0x1F49, 0x300, 0x1F48, 0x301, 0x1F49, 0x301, 0x3C5, 0x313, 0x3C5, 0x314, 0x1F50, 0x300, 0x1F51, 0x300, 0x1F50, 0x301, 0x1F51, 0x301, 0x1F50, 0x342, 0x1F51, 0x342, 0x3A5, 0x314, 0x1F59, 0x300, 0x1F59, 0x301, 0x1F59, 0x342, 0x3C9, 0x313, 0x3C9, 0x314, 0x1F60, 0x300, 0x1F61, 0x300, 0x1F60, 0x301, 0x1F61, 0x301, 0x1F60, 0x342, 0x1F61, 0x342, 0x3A9, 0x313, 0x3A9, 0x314, 0x1F68, 0x300, 0x1F69, 0x300, 0x1F68, 0x301, 0x1F69, 0x301, 0x1F68, 0x342, 0x1F69, 0x342, 0x3B1, 0x300, 0x3AC, 0x3B5, 0x300, 0x3AD, 0x3B7, 0x300, 0x3AE, 0x3B9, 0x300, 0x3AF, 0x3BF, 0x300, 0x3CC, 0x3C5, 0x300, 0x3CD, 0x3C9, 0x300, 0x3CE, 0x1F00, 0x345, 0x1F01, 0x345, 0x1F02, 0x345, 0x1F03, 0x345, 0x1F04, 0x345, 0x1F05, 0x345, 0x1F06, 0x345, 0x1F07, 0x345, 0x1F08, 0x345, 0x1F09, 0x345, 0x1F0A, 0x345, 0x1F0B, 0x345, 0x1F0C, 0x345, 0x1F0D, 0x345, 0x1F0E, 0x345, 0x1F0F, 0x345, 0x1F20, 0x345, 0x1F21, 0x345, 0x1F22, 0x345, 0x1F23, 0x345, 0x1F24, 0x345, 0x1F25, 0x345, 0x1F26, 0x345, 0x1F27, 0x345, 0x1F28, 0x345, 0x1F29, 0x345, 0x1F2A, 0x345, 0x1F2B, 0x345, 0x1F2C, 0x345, 0x1F2D, 0x345, 0x1F2E, 0x345, 0x1F2F, 0x345, 0x1F60, 0x345, 0x1F61, 0x345, 0x1F62, 0x345, 0x1F63, 0x345, 0x1F64, 0x345, 0x1F65, 0x345, 0x1F66, 0x345, 0x1F67, 0x345, 0x1F68, 0x345, 0x1F69, 0x345, 0x1F6A, 0x345, 0x1F6B, 0x345, 0x1F6C, 0x345, 0x1F6D, 0x345, 0x1F6E, 0x345, 0x1F6F, 0x345, 0x3B1, 0x306, 0x3B1, 0x304, 0x1F70, 0x345, 0x3B1, 0x345, 0x3AC, 0x345, 0x3B1, 0x342, 0x1FB6, 0x345, 0x391, 0x306, 0x391, 0x304, 0x391, 0x300, 0x386, 0x391, 0x345, 0x20, 0x313, 0x3B9, 0x20, 0x342, 0xA8, 0x342, 0x1F74, 0x345, 0x3B7, 0x345, 0x3AE, 0x345, 0x3B7, 0x342, 0x1FC6, 0x345, 0x395, 0x300, 0x388, 0x397, 0x300, 0x389, 0x397, 0x345, 0x1FBF, 0x300, 0x1FBF, 0x301, 0x1FBF, 0x342, 0x3B9, 0x306, 0x3B9, 0x304, 0x3CA, 0x300, 0x390, 0x3B9, 0x342, 0x3CA, 0x342, 0x399, 0x306, 0x399, 0x304, 0x399, 0x300, 0x38A, 0x1FFE, 0x300, 0x1FFE, 0x301, 0x1FFE, 0x342, 0x3C5, 0x306, 0x3C5, 0x304, 0x3CB, 0x300, 0x3B0, 0x3C1, 0x313, 0x3C1, 0x314, 0x3C5, 0x342, 0x3CB, 0x342, 0x3A5, 0x306, 0x3A5, 0x304, 0x3A5, 0x300, 0x38E, 0x3A1, 0x314, 0xA8, 0x300, 0x385, 0x60, 0x1F7C, 0x345, 0x3C9, 0x345, 0x3CE, 0x345, 0x3C9, 0x342, 0x1FF6, 0x345, 0x39F, 0x300, 0x38C, 0x3A9, 0x300, 0x38F, 0x3A9, 0x345, 0xB4, 0x20, 0x314, 0x2002, 0x2003, 0x2010, 0x20, 0x333, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2032, 0x2032, 0x2032, 0x2032, 0x2032, 0x2035, 0x2035, 0x2035, 0x2035, 0x2035, 0x21, 0x21, 0x20, 0x305, 0x3F, 0x3F, 0x3F, 0x21, 0x21, 0x3F, 0x2032, 0x2032, 0x2032, 0x2032, 0x30, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x2B, 0x2212, 0x3D, 0x28, 0x29, 0x6E, 0x52, 0x73, 0x61, 0x2F, 0x63, 0x61, 0x2F, 0x73, 0x43, 0xB0, 0x43, 0x63, 0x2F, 0x6F, 0x63, 0x2F, 0x75, 0x190, 0xB0, 0x46, 0x127, 0x4E, 0x6F, 0x51, 0x53, 0x4D, 0x54, 0x45, 0x4C, 0x54, 0x4D, 0x5A, 0x3A9, 0xC5, 0x46, 0x5D0, 0x5D1, 0x5D2, 0x5D3, 0x46, 0x41, 0x58, 0x393, 0x3A0, 0x2211, 0x31, 0x2044, 0x37, 0x31, 0x2044, 0x39, 0x31, 0x2044, 0x31, 0x30, 0x31, 0x2044, 0x33, 0x32, 0x2044, 0x33, 0x31, 0x2044, 0x35, 0x32, 0x2044, 0x35, 0x33, 0x2044, 0x35, 0x34, 0x2044, 0x35, 0x31, 0x2044, 0x36, 0x35, 0x2044, 0x36, 0x31, 0x2044, 0x38, 0x33, 0x2044, 0x38, 0x35, 0x2044, 0x38, 0x37, 0x2044, 0x38, 0x31, 0x2044, 0x49, 0x49, 0x49, 0x49, 0x49, 0x49, 0x56, 0x56, 0x56, 0x49, 0x56, 0x49, 0x49, 0x56, 0x49, 0x49, 0x49, 0x49, 0x58, 0x58, 0x58, 0x49, 0x58, 0x49, 0x49, 0x69, 0x69, 0x69, 0x69, 0x69, 0x69, 0x76, 0x76, 0x69, 0x76, 0x69, 0x69, 0x76, 0x69, 0x69, 0x69, 0x69, 0x78, 0x78, 0x69, 0x78, 0x69, 0x69, 0x30, 0x2044, 0x33, 0x2190, 0x338, 0x2192, 0x338, 0x2194, 0x338, 0x21D0, 0x338, 0x21D4, 0x338, 0x21D2, 0x338, 0x2203, 0x338, 0x2208, 0x338, 0x220B, 0x338, 0x2223, 0x338, 0x2225, 0x338, 0x222B, 0x222B, 0x222B, 0x222B, 0x222B, 0x222E, 0x222E, 0x222E, 0x222E, 0x222E, 0x223C, 0x338, 0x2243, 0x338, 0x2245, 0x338, 0x2248, 0x338, 0x3D, 0x338, 0x2261, 0x338, 0x224D, 0x338, 0x3C, 0x338, 0x3E, 0x338, 0x2264, 0x338, 0x2265, 0x338, 0x2272, 0x338, 0x2273, 0x338, 0x2276, 0x338, 0x2277, 0x338, 0x227A, 0x338, 0x227B, 0x338, 0x2282, 0x338, 0x2283, 0x338, 0x2286, 0x338, 0x2287, 0x338, 0x22A2, 0x338, 0x22A8, 0x338, 0x22A9, 0x338, 0x22AB, 0x338, 0x227C, 0x338, 0x227D, 0x338, 0x2291, 0x338, 0x2292, 0x338, 0x22B2, 0x338, 0x22B3, 0x338, 0x22B4, 0x338, 0x22B5, 0x338, 0x3008, 0x3009, 0x31, 0x30, 0x31, 0x31, 0x31, 0x32, 0x31, 0x33, 0x31, 0x34, 0x31, 0x35, 0x31, 0x36, 0x31, 0x37, 0x31, 0x38, 0x31, 0x39, 0x32, 0x30, 0x28, 0x31, 0x29, 0x28, 0x32, 0x29, 0x28, 0x33, 0x29, 0x28, 0x34, 0x29, 0x28, 0x35, 0x29, 0x28, 0x36, 0x29, 0x28, 0x37, 0x29, 0x28, 0x38, 0x29, 0x28, 0x39, 0x29, 0x28, 0x31, 0x30, 0x29, 0x28, 0x31, 0x31, 0x29, 0x28, 0x31, 0x32, 0x29, 0x28, 0x31, 0x33, 0x29, 0x28, 0x31, 0x34, 0x29, 0x28, 0x31, 0x35, 0x29, 0x28, 0x31, 0x36, 0x29, 0x28, 0x31, 0x37, 0x29, 0x28, 0x31, 0x38, 0x29, 0x28, 0x31, 0x39, 0x29, 0x28, 0x32, 0x30, 0x29, 0x31, 0x2E, 0x32, 0x2E, 0x33, 0x2E, 0x34, 0x2E, 0x35, 0x2E, 0x36, 0x2E, 0x37, 0x2E, 0x38, 0x2E, 0x39, 0x2E, 0x31, 0x30, 0x2E, 0x31, 0x31, 0x2E, 0x31, 0x32, 0x2E, 0x31, 0x33, 0x2E, 0x31, 0x34, 0x2E, 0x31, 0x35, 0x2E, 0x31, 0x36, 0x2E, 0x31, 0x37, 0x2E, 0x31, 0x38, 0x2E, 0x31, 0x39, 0x2E, 0x32, 0x30, 0x2E, 0x28, 0x61, 0x29, 0x28, 0x62, 0x29, 0x28, 0x63, 0x29, 0x28, 0x64, 0x29, 0x28, 0x65, 0x29, 0x28, 0x66, 0x29, 0x28, 0x67, 0x29, 0x28, 0x68, 0x29, 0x28, 0x69, 0x29, 0x28, 0x6A, 0x29, 0x28, 0x6B, 0x29, 0x28, 0x6C, 0x29, 0x28, 0x6D, 0x29, 0x28, 0x6E, 0x29, 0x28, 0x6F, 0x29, 0x28, 0x70, 0x29, 0x28, 0x71, 0x29, 0x28, 0x72, 0x29, 0x28, 0x73, 0x29, 0x28, 0x74, 0x29, 0x28, 0x75, 0x29, 0x28, 0x76, 0x29, 0x28, 0x77, 0x29, 0x28, 0x78, 0x29, 0x28, 0x79, 0x29, 0x28, 0x7A, 0x29, 0x53, 0x59, 0x71, 0x222B, 0x222B, 0x222B, 0x222B, 0x3A, 0x3A, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x3D, 0x2ADD, 0x338, 0x2D61, 0x6BCD, 0x9F9F, 0x4E00, 0x4E28, 0x4E36, 0x4E3F, 0x4E59, 0x4E85, 0x4E8C, 0x4EA0, 0x4EBA, 0x513F, 0x5165, 0x516B, 0x5182, 0x5196, 0x51AB, 0x51E0, 0x51F5, 0x5200, 0x529B, 0x52F9, 0x5315, 0x531A, 0x5338, 0x5341, 0x535C, 0x5369, 0x5382, 0x53B6, 0x53C8, 0x53E3, 0x56D7, 0x571F, 0x58EB, 0x5902, 0x590A, 0x5915, 0x5927, 0x5973, 0x5B50, 0x5B80, 0x5BF8, 0x5C0F, 0x5C22, 0x5C38, 0x5C6E, 0x5C71, 0x5DDB, 0x5DE5, 0x5DF1, 0x5DFE, 0x5E72, 0x5E7A, 0x5E7F, 0x5EF4, 0x5EFE, 0x5F0B, 0x5F13, 0x5F50, 0x5F61, 0x5F73, 0x5FC3, 0x6208, 0x6236, 0x624B, 0x652F, 0x6534, 0x6587, 0x6597, 0x65A4, 0x65B9, 0x65E0, 0x65E5, 0x66F0, 0x6708, 0x6728, 0x6B20, 0x6B62, 0x6B79, 0x6BB3, 0x6BCB, 0x6BD4, 0x6BDB, 0x6C0F, 0x6C14, 0x6C34, 0x706B, 0x722A, 0x7236, 0x723B, 0x723F, 0x7247, 0x7259, 0x725B, 0x72AC, 0x7384, 0x7389, 0x74DC, 0x74E6, 0x7518, 0x751F, 0x7528, 0x7530, 0x758B, 0x7592, 0x7676, 0x767D, 0x76AE, 0x76BF, 0x76EE, 0x77DB, 0x77E2, 0x77F3, 0x793A, 0x79B8, 0x79BE, 0x7A74, 0x7ACB, 0x7AF9, 0x7C73, 0x7CF8, 0x7F36, 0x7F51, 0x7F8A, 0x7FBD, 0x8001, 0x800C, 0x8012, 0x8033, 0x807F, 0x8089, 0x81E3, 0x81EA, 0x81F3, 0x81FC, 0x820C, 0x821B, 0x821F, 0x826E, 0x8272, 0x8278, 0x864D, 0x866B, 0x8840, 0x884C, 0x8863, 0x897E, 0x898B, 0x89D2, 0x8A00, 0x8C37, 0x8C46, 0x8C55, 0x8C78, 0x8C9D, 0x8D64, 0x8D70, 0x8DB3, 0x8EAB, 0x8ECA, 0x8F9B, 0x8FB0, 0x8FB5, 0x9091, 0x9149, 0x91C6, 0x91CC, 0x91D1, 0x9577, 0x9580, 0x961C, 0x96B6, 0x96B9, 0x96E8, 0x9751, 0x975E, 0x9762, 0x9769, 0x97CB, 0x97ED, 0x97F3, 0x9801, 0x98A8, 0x98DB, 0x98DF, 0x9996, 0x9999, 0x99AC, 0x9AA8, 0x9AD8, 0x9ADF, 0x9B25, 0x9B2F, 0x9B32, 0x9B3C, 0x9B5A, 0x9CE5, 0x9E75, 0x9E7F, 0x9EA5, 0x9EBB, 0x9EC3, 0x9ECD, 0x9ED1, 0x9EF9, 0x9EFD, 0x9F0E, 0x9F13, 0x9F20, 0x9F3B, 0x9F4A, 0x9F52, 0x9F8D, 0x9F9C, 0x9FA0, 0x3012, 0x5344, 0x5345, 0x304B, 0x3099, 0x304D, 0x3099, 0x304F, 0x3099, 0x3051, 0x3099, 0x3053, 0x3099, 0x3055, 0x3099, 0x3057, 0x3099, 0x3059, 0x3099, 0x305B, 0x3099, 0x305D, 0x3099, 0x305F, 0x3099, 0x3061, 0x3099, 0x3064, 0x3099, 0x3066, 0x3099, 0x3068, 0x3099, 0x306F, 0x3099, 0x306F, 0x309A, 0x3072, 0x3099, 0x3072, 0x309A, 0x3075, 0x3099, 0x3075, 0x309A, 0x3078, 0x3099, 0x3078, 0x309A, 0x307B, 0x3099, 0x307B, 0x309A, 0x3046, 0x3099, 0x20, 0x3099, 0x20, 0x309A, 0x309D, 0x3099, 0x3088, 0x308A, 0x30AB, 0x3099, 0x30AD, 0x3099, 0x30AF, 0x3099, 0x30B1, 0x3099, 0x30B3, 0x3099, 0x30B5, 0x3099, 0x30B7, 0x3099, 0x30B9, 0x3099, 0x30BB, 0x3099, 0x30BD, 0x3099, 0x30BF, 0x3099, 0x30C1, 0x3099, 0x30C4, 0x3099, 0x30C6, 0x3099, 0x30C8, 0x3099, 0x30CF, 0x3099, 0x30CF, 0x309A, 0x30D2, 0x3099, 0x30D2, 0x309A, 0x30D5, 0x3099, 0x30D5, 0x309A, 0x30D8, 0x3099, 0x30D8, 0x309A, 0x30DB, 0x3099, 0x30DB, 0x309A, 0x30A6, 0x3099, 0x30EF, 0x3099, 0x30F0, 0x3099, 0x30F1, 0x3099, 0x30F2, 0x3099, 0x30FD, 0x3099, 0x30B3, 0x30C8, 0x1100, 0x1101, 0x11AA, 0x1102, 0x11AC, 0x11AD, 0x1103, 0x1104, 0x1105, 0x11B0, 0x11B1, 0x11B2, 0x11B3, 0x11B4, 0x11B5, 0x111A, 0x1106, 0x1107, 0x1108, 0x1121, 0x1109, 0x110A, 0x110B, 0x110C, 0x110D, 0x110E, 0x110F, 0x1110, 0x1111, 0x1112, 0x1161, 0x1162, 0x1163, 0x1164, 0x1165, 0x1166, 0x1167, 0x1168, 0x1169, 0x116A, 0x116B, 0x116C, 0x116D, 0x116E, 0x116F, 0x1170, 0x1171, 0x1172, 0x1173, 0x1174, 0x1175, 0x1160, 0x1114, 0x1115, 0x11C7, 0x11C8, 0x11CC, 0x11CE, 0x11D3, 0x11D7, 0x11D9, 0x111C, 0x11DD, 0x11DF, 0x111D, 0x111E, 0x1120, 0x1122, 0x1123, 0x1127, 0x1129, 0x112B, 0x112C, 0x112D, 0x112E, 0x112F, 0x1132, 0x1136, 0x1140, 0x1147, 0x114C, 0x11F1, 0x11F2, 0x1157, 0x1158, 0x1159, 0x1184, 0x1185, 0x1188, 0x1191, 0x1192, 0x1194, 0x119E, 0x11A1, 0x4E09, 0x56DB, 0x4E0A, 0x4E2D, 0x4E0B, 0x7532, 0x4E19, 0x4E01, 0x5929, 0x5730, 0x28, 0x1100, 0x29, 0x28, 0x1102, 0x29, 0x28, 0x1103, 0x29, 0x28, 0x1105, 0x29, 0x28, 0x1106, 0x29, 0x28, 0x1107, 0x29, 0x28, 0x1109, 0x29, 0x28, 0x110B, 0x29, 0x28, 0x110C, 0x29, 0x28, 0x110E, 0x29, 0x28, 0x110F, 0x29, 0x28, 0x1110, 0x29, 0x28, 0x1111, 0x29, 0x28, 0x1112, 0x29, 0x28, 0x1100, 0x1161, 0x29, 0x28, 0x1102, 0x1161, 0x29, 0x28, 0x1103, 0x1161, 0x29, 0x28, 0x1105, 0x1161, 0x29, 0x28, 0x1106, 0x1161, 0x29, 0x28, 0x1107, 0x1161, 0x29, 0x28, 0x1109, 0x1161, 0x29, 0x28, 0x110B, 0x1161, 0x29, 0x28, 0x110C, 0x1161, 0x29, 0x28, 0x110E, 0x1161, 0x29, 0x28, 0x110F, 0x1161, 0x29, 0x28, 0x1110, 0x1161, 0x29, 0x28, 0x1111, 0x1161, 0x29, 0x28, 0x1112, 0x1161, 0x29, 0x28, 0x110C, 0x116E, 0x29, 0x28, 0x110B, 0x1169, 0x110C, 0x1165, 0x11AB, 0x29, 0x28, 0x110B, 0x1169, 0x1112, 0x116E, 0x29, 0x28, 0x4E00, 0x29, 0x28, 0x4E8C, 0x29, 0x28, 0x4E09, 0x29, 0x28, 0x56DB, 0x29, 0x28, 0x4E94, 0x29, 0x28, 0x516D, 0x29, 0x28, 0x4E03, 0x29, 0x28, 0x516B, 0x29, 0x28, 0x4E5D, 0x29, 0x28, 0x5341, 0x29, 0x28, 0x6708, 0x29, 0x28, 0x706B, 0x29, 0x28, 0x6C34, 0x29, 0x28, 0x6728, 0x29, 0x28, 0x91D1, 0x29, 0x28, 0x571F, 0x29, 0x28, 0x65E5, 0x29, 0x28, 0x682A, 0x29, 0x28, 0x6709, 0x29, 0x28, 0x793E, 0x29, 0x28, 0x540D, 0x29, 0x28, 0x7279, 0x29, 0x28, 0x8CA1, 0x29, 0x28, 0x795D, 0x29, 0x28, 0x52B4, 0x29, 0x28, 0x4EE3, 0x29, 0x28, 0x547C, 0x29, 0x28, 0x5B66, 0x29, 0x28, 0x76E3, 0x29, 0x28, 0x4F01, 0x29, 0x28, 0x8CC7, 0x29, 0x28, 0x5354, 0x29, 0x28, 0x796D, 0x29, 0x28, 0x4F11, 0x29, 0x28, 0x81EA, 0x29, 0x28, 0x81F3, 0x29, 0x554F, 0x5E7C, 0x7B8F, 0x50, 0x54, 0x45, 0x32, 0x31, 0x32, 0x32, 0x32, 0x33, 0x32, 0x34, 0x32, 0x35, 0x32, 0x36, 0x32, 0x37, 0x32, 0x38, 0x32, 0x39, 0x33, 0x30, 0x33, 0x31, 0x33, 0x32, 0x33, 0x33, 0x33, 0x34, 0x33, 0x35, 0x1100, 0x1161, 0x1102, 0x1161, 0x1103, 0x1161, 0x1105, 0x1161, 0x1106, 0x1161, 0x1107, 0x1161, 0x1109, 0x1161, 0x110B, 0x1161, 0x110C, 0x1161, 0x110E, 0x1161, 0x110F, 0x1161, 0x1110, 0x1161, 0x1111, 0x1161, 0x1112, 0x1161, 0x110E, 0x1161, 0x11B7, 0x1100, 0x1169, 0x110C, 0x116E, 0x110B, 0x1174, 0x110B, 0x116E, 0x4E94, 0x516D, 0x4E03, 0x4E5D, 0x682A, 0x6709, 0x793E, 0x540D, 0x7279, 0x8CA1, 0x795D, 0x52B4, 0x79D8, 0x7537, 0x9069, 0x512A, 0x5370, 0x6CE8, 0x9805, 0x4F11, 0x5199, 0x6B63, 0x5DE6, 0x53F3, 0x533B, 0x5B97, 0x5B66, 0x76E3, 0x4F01, 0x8CC7, 0x5354, 0x591C, 0x33, 0x36, 0x33, 0x37, 0x33, 0x38, 0x33, 0x39, 0x34, 0x30, 0x34, 0x31, 0x34, 0x32, 0x34, 0x33, 0x34, 0x34, 0x34, 0x35, 0x34, 0x36, 0x34, 0x37, 0x34, 0x38, 0x34, 0x39, 0x35, 0x30, 0x31, 0x6708, 0x32, 0x6708, 0x33, 0x6708, 0x34, 0x6708, 0x35, 0x6708, 0x36, 0x6708, 0x37, 0x6708, 0x38, 0x6708, 0x39, 0x6708, 0x31, 0x30, 0x6708, 0x31, 0x31, 0x6708, 0x31, 0x32, 0x6708, 0x48, 0x67, 0x65, 0x72, 0x67, 0x65, 0x56, 0x4C, 0x54, 0x44, 0x30A2, 0x30A4, 0x30A6, 0x30A8, 0x30AA, 0x30AB, 0x30AD, 0x30AF, 0x30B1, 0x30B3, 0x30B5, 0x30B7, 0x30B9, 0x30BB, 0x30BD, 0x30BF, 0x30C1, 0x30C4, 0x30C6, 0x30C8, 0x30CA, 0x30CB, 0x30CC, 0x30CD, 0x30CE, 0x30CF, 0x30D2, 0x30D5, 0x30D8, 0x30DB, 0x30DE, 0x30DF, 0x30E0, 0x30E1, 0x30E2, 0x30E4, 0x30E6, 0x30E8, 0x30E9, 0x30EA, 0x30EB, 0x30EC, 0x30ED, 0x30EF, 0x30F0, 0x30F1, 0x30F2, 0x4EE4, 0x548C, 0x30A2, 0x30D1, 0x30FC, 0x30C8, 0x30A2, 0x30EB, 0x30D5, 0x30A1, 0x30A2, 0x30F3, 0x30DA, 0x30A2, 0x30A2, 0x30FC, 0x30EB, 0x30A4, 0x30CB, 0x30F3, 0x30B0, 0x30A4, 0x30F3, 0x30C1, 0x30A6, 0x30A9, 0x30F3, 0x30A8, 0x30B9, 0x30AF, 0x30FC, 0x30C9, 0x30A8, 0x30FC, 0x30AB, 0x30FC, 0x30AA, 0x30F3, 0x30B9, 0x30AA, 0x30FC, 0x30E0, 0x30AB, 0x30A4, 0x30EA, 0x30AB, 0x30E9, 0x30C3, 0x30C8, 0x30AB, 0x30ED, 0x30EA, 0x30FC, 0x30AC, 0x30ED, 0x30F3, 0x30AC, 0x30F3, 0x30DE, 0x30AE, 0x30AC, 0x30AE, 0x30CB, 0x30FC, 0x30AD, 0x30E5, 0x30EA, 0x30FC, 0x30AE, 0x30EB, 0x30C0, 0x30FC, 0x30AD, 0x30ED, 0x30AD, 0x30ED, 0x30B0, 0x30E9, 0x30E0, 0x30AD, 0x30ED, 0x30E1, 0x30FC, 0x30C8, 0x30EB, 0x30AD, 0x30ED, 0x30EF, 0x30C3, 0x30C8, 0x30B0, 0x30E9, 0x30E0, 0x30B0, 0x30E9, 0x30E0, 0x30C8, 0x30F3, 0x30AF, 0x30EB, 0x30BC, 0x30A4, 0x30ED, 0x30AF, 0x30ED, 0x30FC, 0x30CD, 0x30B1, 0x30FC, 0x30B9, 0x30B3, 0x30EB, 0x30CA, 0x30B3, 0x30FC, 0x30DD, 0x30B5, 0x30A4, 0x30AF, 0x30EB, 0x30B5, 0x30F3, 0x30C1, 0x30FC, 0x30E0, 0x30B7, 0x30EA, 0x30F3, 0x30B0, 0x30BB, 0x30F3, 0x30C1, 0x30BB, 0x30F3, 0x30C8, 0x30C0, 0x30FC, 0x30B9, 0x30C7, 0x30B7, 0x30C9, 0x30EB, 0x30C8, 0x30F3, 0x30CA, 0x30CE, 0x30CE, 0x30C3, 0x30C8, 0x30CF, 0x30A4, 0x30C4, 0x30D1, 0x30FC, 0x30BB, 0x30F3, 0x30C8, 0x30D1, 0x30FC, 0x30C4, 0x30D0, 0x30FC, 0x30EC, 0x30EB, 0x30D4, 0x30A2, 0x30B9, 0x30C8, 0x30EB, 0x30D4, 0x30AF, 0x30EB, 0x30D4, 0x30B3, 0x30D3, 0x30EB, 0x30D5, 0x30A1, 0x30E9, 0x30C3, 0x30C9, 0x30D5, 0x30A3, 0x30FC, 0x30C8, 0x30D6, 0x30C3, 0x30B7, 0x30A7, 0x30EB, 0x30D5, 0x30E9, 0x30F3, 0x30D8, 0x30AF, 0x30BF, 0x30FC, 0x30EB, 0x30DA, 0x30BD, 0x30DA, 0x30CB, 0x30D2, 0x30D8, 0x30EB, 0x30C4, 0x30DA, 0x30F3, 0x30B9, 0x30DA, 0x30FC, 0x30B8, 0x30D9, 0x30FC, 0x30BF, 0x30DD, 0x30A4, 0x30F3, 0x30C8, 0x30DC, 0x30EB, 0x30C8, 0x30DB, 0x30F3, 0x30DD, 0x30F3, 0x30C9, 0x30DB, 0x30FC, 0x30EB, 0x30DB, 0x30FC, 0x30F3, 0x30DE, 0x30A4, 0x30AF, 0x30ED, 0x30DE, 0x30A4, 0x30EB, 0x30DE, 0x30C3, 0x30CF, 0x30DE, 0x30EB, 0x30AF, 0x30DE, 0x30F3, 0x30B7, 0x30E7, 0x30F3, 0x30DF, 0x30AF, 0x30ED, 0x30F3, 0x30DF, 0x30EA, 0x30DF, 0x30EA, 0x30D0, 0x30FC, 0x30EB, 0x30E1, 0x30AC, 0x30E1, 0x30AC, 0x30C8, 0x30F3, 0x30E1, 0x30FC, 0x30C8, 0x30EB, 0x30E4, 0x30FC, 0x30C9, 0x30E4, 0x30FC, 0x30EB, 0x30E6, 0x30A2, 0x30F3, 0x30EA, 0x30C3, 0x30C8, 0x30EB, 0x30EA, 0x30E9, 0x30EB, 0x30D4, 0x30FC, 0x30EB, 0x30FC, 0x30D6, 0x30EB, 0x30EC, 0x30E0, 0x30EC, 0x30F3, 0x30C8, 0x30B2, 0x30F3, 0x30EF, 0x30C3, 0x30C8, 0x30, 0x70B9, 0x31, 0x70B9, 0x32, 0x70B9, 0x33, 0x70B9, 0x34, 0x70B9, 0x35, 0x70B9, 0x36, 0x70B9, 0x37, 0x70B9, 0x38, 0x70B9, 0x39, 0x70B9, 0x31, 0x30, 0x70B9, 0x31, 0x31, 0x70B9, 0x31, 0x32, 0x70B9, 0x31, 0x33, 0x70B9, 0x31, 0x34, 0x70B9, 0x31, 0x35, 0x70B9, 0x31, 0x36, 0x70B9, 0x31, 0x37, 0x70B9, 0x31, 0x38, 0x70B9, 0x31, 0x39, 0x70B9, 0x32, 0x30, 0x70B9, 0x32, 0x31, 0x70B9, 0x32, 0x32, 0x70B9, 0x32, 0x33, 0x70B9, 0x32, 0x34, 0x70B9, 0x68, 0x50, 0x61, 0x64, 0x61, 0x41, 0x55, 0x62, 0x61, 0x72, 0x6F, 0x56, 0x70, 0x63, 0x64, 0x6D, 0x64, 0x6D, 0xB2, 0x64, 0x6D, 0xB3, 0x49, 0x55, 0x5E73, 0x6210, 0x662D, 0x548C, 0x5927, 0x6B63, 0x660E, 0x6CBB, 0x682A, 0x5F0F, 0x4F1A, 0x793E, 0x70, 0x41, 0x6E, 0x41, 0x3BC, 0x41, 0x6D, 0x41, 0x6B, 0x41, 0x4B, 0x42, 0x4D, 0x42, 0x47, 0x42, 0x63, 0x61, 0x6C, 0x6B, 0x63, 0x61, 0x6C, 0x70, 0x46, 0x6E, 0x46, 0x3BC, 0x46, 0x3BC, 0x67, 0x6D, 0x67, 0x6B, 0x67, 0x48, 0x7A, 0x6B, 0x48, 0x7A, 0x4D, 0x48, 0x7A, 0x47, 0x48, 0x7A, 0x54, 0x48, 0x7A, 0x3BC, 0x2113, 0x6D, 0x2113, 0x64, 0x2113, 0x6B, 0x2113, 0x66, 0x6D, 0x6E, 0x6D, 0x3BC, 0x6D, 0x6D, 0x6D, 0x63, 0x6D, 0x6B, 0x6D, 0x6D, 0x6D, 0xB2, 0x63, 0x6D, 0xB2, 0x6D, 0xB2, 0x6B, 0x6D, 0xB2, 0x6D, 0x6D, 0xB3, 0x63, 0x6D, 0xB3, 0x6D, 0xB3, 0x6B, 0x6D, 0xB3, 0x6D, 0x2215, 0x73, 0x6D, 0x2215, 0x73, 0xB2, 0x50, 0x61, 0x6B, 0x50, 0x61, 0x4D, 0x50, 0x61, 0x47, 0x50, 0x61, 0x72, 0x61, 0x64, 0x72, 0x61, 0x64, 0x2215, 0x73, 0x72, 0x61, 0x64, 0x2215, 0x73, 0xB2, 0x70, 0x73, 0x6E, 0x73, 0x3BC, 0x73, 0x6D, 0x73, 0x70, 0x56, 0x6E, 0x56, 0x3BC, 0x56, 0x6D, 0x56, 0x6B, 0x56, 0x4D, 0x56, 0x70, 0x57, 0x6E, 0x57, 0x3BC, 0x57, 0x6D, 0x57, 0x6B, 0x57, 0x4D, 0x57, 0x6B, 0x3A9, 0x4D, 0x3A9, 0x61, 0x2E, 0x6D, 0x2E, 0x42, 0x71, 0x63, 0x63, 0x63, 0x64, 0x43, 0x2215, 0x6B, 0x67, 0x43, 0x6F, 0x2E, 0x64, 0x42, 0x47, 0x79, 0x68, 0x61, 0x48, 0x50, 0x69, 0x6E, 0x4B, 0x4B, 0x4B, 0x4D, 0x6B, 0x74, 0x6C, 0x6D, 0x6C, 0x6E, 0x6C, 0x6F, 0x67, 0x6C, 0x78, 0x6D, 0x62, 0x6D, 0x69, 0x6C, 0x6D, 0x6F, 0x6C, 0x50, 0x48, 0x70, 0x2E, 0x6D, 0x2E, 0x50, 0x50, 0x4D, 0x50, 0x52, 0x73, 0x72, 0x53, 0x76, 0x57, 0x62, 0x56, 0x2215, 0x6D, 0x41, 0x2215, 0x6D, 0x31, 0x65E5, 0x32, 0x65E5, 0x33, 0x65E5, 0x34, 0x65E5, 0x35, 0x65E5, 0x36, 0x65E5, 0x37, 0x65E5, 0x38, 0x65E5, 0x39, 0x65E5, 0x31, 0x30, 0x65E5, 0x31, 0x31, 0x65E5, 0x31, 0x32, 0x65E5, 0x31, 0x33, 0x65E5, 0x31, 0x34, 0x65E5, 0x31, 0x35, 0x65E5, 0x31, 0x36, 0x65E5, 0x31, 0x37, 0x65E5, 0x31, 0x38, 0x65E5, 0x31, 0x39, 0x65E5, 0x32, 0x30, 0x65E5, 0x32, 0x31, 0x65E5, 0x32, 0x32, 0x65E5, 0x32, 0x33, 0x65E5, 0x32, 0x34, 0x65E5, 0x32, 0x35, 0x65E5, 0x32, 0x36, 0x65E5, 0x32, 0x37, 0x65E5, 0x32, 0x38, 0x65E5, 0x32, 0x39, 0x65E5, 0x33, 0x30, 0x65E5, 0x33, 0x31, 0x65E5, 0x67, 0x61, 0x6C, 0x44A, 0x44C, 0xA76F, 0x126, 0x153, 0xA727, 0xAB37, 0x26B, 0xAB52, 0x28D, 0x8C48, 0x66F4, 0x8CC8, 0x6ED1, 0x4E32, 0x53E5, 0x5951, 0x5587, 0x5948, 0x61F6, 0x7669, 0x7F85, 0x863F, 0x87BA, 0x88F8, 0x908F, 0x6A02, 0x6D1B, 0x70D9, 0x73DE, 0x843D, 0x916A, 0x99F1, 0x4E82, 0x5375, 0x6B04, 0x721B, 0x862D, 0x9E1E, 0x5D50, 0x6FEB, 0x85CD, 0x8964, 0x62C9, 0x81D8, 0x881F, 0x5ECA, 0x6717, 0x6D6A, 0x72FC, 0x90CE, 0x4F86, 0x51B7, 0x52DE, 0x64C4, 0x6AD3, 0x7210, 0x76E7, 0x8606, 0x865C, 0x8DEF, 0x9732, 0x9B6F, 0x9DFA, 0x788C, 0x797F, 0x7DA0, 0x83C9, 0x9304, 0x8AD6, 0x58DF, 0x5F04, 0x7C60, 0x807E, 0x7262, 0x78CA, 0x8CC2, 0x96F7, 0x58D8, 0x5C62, 0x6A13, 0x6DDA, 0x6F0F, 0x7D2F, 0x7E37, 0x964B, 0x52D2, 0x808B, 0x51DC, 0x51CC, 0x7A1C, 0x7DBE, 0x83F1, 0x9675, 0x8B80, 0x62CF, 0x8AFE, 0x4E39, 0x5BE7, 0x6012, 0x7387, 0x7570, 0x5317, 0x78FB, 0x4FBF, 0x5FA9, 0x4E0D, 0x6CCC, 0x6578, 0x7D22, 0x53C3, 0x585E, 0x7701, 0x8449, 0x8AAA, 0x6BBA, 0x6C88, 0x62FE, 0x82E5, 0x63A0, 0x7565, 0x4EAE, 0x5169, 0x51C9, 0x6881, 0x7CE7, 0x826F, 0x8AD2, 0x91CF, 0x52F5, 0x5442, 0x5EEC, 0x65C5, 0x6FFE, 0x792A, 0x95AD, 0x9A6A, 0x9E97, 0x9ECE, 0x66C6, 0x6B77, 0x8F62, 0x5E74, 0x6190, 0x6200, 0x649A, 0x6F23, 0x7149, 0x7489, 0x79CA, 0x7DF4, 0x806F, 0x8F26, 0x84EE, 0x9023, 0x934A, 0x5217, 0x52A3, 0x54BD, 0x70C8, 0x88C2, 0x5EC9, 0x5FF5, 0x637B, 0x6BAE, 0x7C3E, 0x7375, 0x4EE4, 0x56F9, 0x5DBA, 0x601C, 0x73B2, 0x7469, 0x7F9A, 0x8046, 0x9234, 0x96F6, 0x9748, 0x9818, 0x4F8B, 0x79AE, 0x91B4, 0x96B8, 0x60E1, 0x4E86, 0x50DA, 0x5BEE, 0x5C3F, 0x6599, 0x71CE, 0x7642, 0x84FC, 0x907C, 0x6688, 0x962E, 0x5289, 0x677B, 0x67F3, 0x6D41, 0x6E9C, 0x7409, 0x7559, 0x786B, 0x7D10, 0x985E, 0x622E, 0x9678, 0x502B, 0x5D19, 0x6DEA, 0x8F2A, 0x5F8B, 0x6144, 0x6817, 0x9686, 0x5229, 0x540F, 0x5C65, 0x6613, 0x674E, 0x68A8, 0x6CE5, 0x7406, 0x75E2, 0x7F79, 0x88CF, 0x88E1, 0x96E2, 0x533F, 0x6EBA, 0x541D, 0x71D0, 0x7498, 0x85FA, 0x96A3, 0x9C57, 0x9E9F, 0x6797, 0x6DCB, 0x81E8, 0x7B20, 0x7C92, 0x72C0, 0x7099, 0x8B58, 0x4EC0, 0x8336, 0x523A, 0x5207, 0x5EA6, 0x62D3, 0x7CD6, 0x5B85, 0x6D1E, 0x66B4, 0x8F3B, 0x964D, 0x5ED3, 0x5140, 0x55C0, 0x585A, 0x6674, 0x51DE, 0x732A, 0x76CA, 0x793C, 0x795E, 0x7965, 0x798F, 0x9756, 0x7CBE, 0x8612, 0x8AF8, 0x9038, 0x90FD, 0x98EF, 0x98FC, 0x9928, 0x9DB4, 0x90DE, 0x96B7, 0x4FAE, 0x50E7, 0x514D, 0x52C9, 0x52E4, 0x5351, 0x559D, 0x5606, 0x5668, 0x5840, 0x58A8, 0x5C64, 0x6094, 0x6168, 0x618E, 0x61F2, 0x654F, 0x65E2, 0x6691, 0x6885, 0x6D77, 0x6E1A, 0x6F22, 0x716E, 0x722B, 0x7422, 0x7891, 0x7949, 0x7948, 0x7950, 0x7956, 0x798D, 0x798E, 0x7A40, 0x7A81, 0x7BC0, 0x7E09, 0x7E41, 0x7F72, 0x8005, 0x81ED, 0x8279, 0x8457, 0x8910, 0x8996, 0x8B01, 0x8B39, 0x8CD3, 0x8D08, 0x8FB6, 0x96E3, 0x97FF, 0x983B, 0x6075, 0x242EE, 0x8218, 0x4E26, 0x51B5, 0x5168, 0x4F80, 0x5145, 0x5180, 0x52C7, 0x52FA, 0x5555, 0x5599, 0x55E2, 0x58B3, 0x5944, 0x5954, 0x5A62, 0x5B28, 0x5ED2, 0x5ED9, 0x5F69, 0x5FAD, 0x60D8, 0x614E, 0x6108, 0x6160, 0x6234, 0x63C4, 0x641C, 0x6452, 0x6556, 0x671B, 0x6756, 0x6EDB, 0x6ECB, 0x701E, 0x77A7, 0x7235, 0x72AF, 0x7471, 0x7506, 0x753B, 0x761D, 0x761F, 0x76DB, 0x76F4, 0x774A, 0x7740, 0x78CC, 0x7AB1, 0x7C7B, 0x7D5B, 0x7F3E, 0x8352, 0x83EF, 0x8779, 0x8941, 0x8986, 0x8ABF, 0x8ACB, 0x8AED, 0x8B8A, 0x8F38, 0x9072, 0x9199, 0x9276, 0x967C, 0x97DB, 0x980B, 0x9B12, 0x2284A, 0x22844, 0x233D5, 0x3B9D, 0x4018, 0x4039, 0x25249, 0x25CD0, 0x27ED3, 0x9F43, 0x9F8E, 0x66, 0x66, 0x66, 0x69, 0x66, 0x6C, 0x66, 0x66, 0x69, 0x66, 0x66, 0x6C, 0x17F, 0x74, 0x73, 0x74, 0x574, 0x576, 0x574, 0x565, 0x574, 0x56B, 0x57E, 0x576, 0x574, 0x56D, 0x5D9, 0x5B4, 0x5F2, 0x5B7, 0x5E2, 0x5D4, 0x5DB, 0x5DC, 0x5DD, 0x5E8, 0x5EA, 0x5E9, 0x5C1, 0x5E9, 0x5C2, 0xFB49, 0x5C1, 0xFB49, 0x5C2, 0x5D0, 0x5B7, 0x5D0, 0x5B8, 0x5D0, 0x5BC, 0x5D1, 0x5BC, 0x5D2, 0x5BC, 0x5D3, 0x5BC, 0x5D4, 0x5BC, 0x5D5, 0x5BC, 0x5D6, 0x5BC, 0x5D8, 0x5BC, 0x5D9, 0x5BC, 0x5DA, 0x5BC, 0x5DB, 0x5BC, 0x5DC, 0x5BC, 0x5DE, 0x5BC, 0x5E0, 0x5BC, 0x5E1, 0x5BC, 0x5E3, 0x5BC, 0x5E4, 0x5BC, 0x5E6, 0x5BC, 0x5E7, 0x5BC, 0x5E8, 0x5BC, 0x5E9, 0x5BC, 0x5EA, 0x5BC, 0x5D5, 0x5B9, 0x5D1, 0x5BF, 0x5DB, 0x5BF, 0x5E4, 0x5BF, 0x5D0, 0x5DC, 0x671, 0x67B, 0x67E, 0x680, 0x67A, 0x67F, 0x679, 0x6A4, 0x6A6, 0x684, 0x683, 0x686, 0x687, 0x68D, 0x68C, 0x68E, 0x688, 0x698, 0x691, 0x6A9, 0x6AF, 0x6B3, 0x6B1, 0x6BA, 0x6BB, 0x6C0, 0x6C1, 0x6BE, 0x6D2, 0x6D3, 0x6AD, 0x6C7, 0x6C6, 0x6C8, 0x677, 0x6CB, 0x6C5, 0x6C9, 0x6D0, 0x649, 0x626, 0x627, 0x626, 0x6D5, 0x626, 0x648, 0x626, 0x6C7, 0x626, 0x6C6, 0x626, 0x6C8, 0x626, 0x6D0, 0x626, 0x649, 0x6CC, 0x626, 0x62C, 0x626, 0x62D, 0x626, 0x645, 0x626, 0x64A, 0x628, 0x62C, 0x628, 0x62D, 0x628, 0x62E, 0x628, 0x645, 0x628, 0x649, 0x628, 0x64A, 0x62A, 0x62C, 0x62A, 0x62D, 0x62A, 0x62E, 0x62A, 0x645, 0x62A, 0x649, 0x62A, 0x64A, 0x62B, 0x62C, 0x62B, 0x645, 0x62B, 0x649, 0x62B, 0x64A, 0x62C, 0x62D, 0x62C, 0x645, 0x62D, 0x62C, 0x62D, 0x645, 0x62E, 0x62C, 0x62E, 0x62D, 0x62E, 0x645, 0x633, 0x62C, 0x633, 0x62D, 0x633, 0x62E, 0x633, 0x645, 0x635, 0x62D, 0x635, 0x645, 0x636, 0x62C, 0x636, 0x62D, 0x636, 0x62E, 0x636, 0x645, 0x637, 0x62D, 0x637, 0x645, 0x638, 0x645, 0x639, 0x62C, 0x639, 0x645, 0x63A, 0x62C, 0x63A, 0x645, 0x641, 0x62C, 0x641, 0x62D, 0x641, 0x62E, 0x641, 0x645, 0x641, 0x649, 0x641, 0x64A, 0x642, 0x62D, 0x642, 0x645, 0x642, 0x649, 0x642, 0x64A, 0x643, 0x627, 0x643, 0x62C, 0x643, 0x62D, 0x643, 0x62E, 0x643, 0x644, 0x643, 0x645, 0x643, 0x649, 0x643, 0x64A, 0x644, 0x62C, 0x644, 0x62D, 0x644, 0x62E, 0x644, 0x645, 0x644, 0x649, 0x644, 0x64A, 0x645, 0x62C, 0x645, 0x62D, 0x645, 0x62E, 0x645, 0x645, 0x645, 0x649, 0x645, 0x64A, 0x646, 0x62C, 0x646, 0x62D, 0x646, 0x62E, 0x646, 0x645, 0x646, 0x649, 0x646, 0x64A, 0x647, 0x62C, 0x647, 0x645, 0x647, 0x649, 0x647, 0x64A, 0x64A, 0x62C, 0x64A, 0x62D, 0x64A, 0x62E, 0x64A, 0x645, 0x64A, 0x649, 0x64A, 0x64A, 0x630, 0x670, 0x631, 0x670, 0x649, 0x670, 0x20, 0x64C, 0x651, 0x20, 0x64D, 0x651, 0x20, 0x64E, 0x651, 0x20, 0x64F, 0x651, 0x20, 0x650, 0x651, 0x20, 0x651, 0x670, 0x626, 0x631, 0x626, 0x632, 0x626, 0x646, 0x628, 0x631, 0x628, 0x632, 0x628, 0x646, 0x62A, 0x631, 0x62A, 0x632, 0x62A, 0x646, 0x62B, 0x631, 0x62B, 0x632, 0x62B, 0x646, 0x645, 0x627, 0x646, 0x631, 0x646, 0x632, 0x646, 0x646, 0x64A, 0x631, 0x64A, 0x632, 0x64A, 0x646, 0x626, 0x62E, 0x626, 0x647, 0x628, 0x647, 0x62A, 0x647, 0x635, 0x62E, 0x644, 0x647, 0x646, 0x647, 0x647, 0x670, 0x64A, 0x647, 0x62B, 0x647, 0x633, 0x647, 0x634, 0x645, 0x634, 0x647, 0x640, 0x64E, 0x651, 0x640, 0x64F, 0x651, 0x640, 0x650, 0x651, 0x637, 0x649, 0x637, 0x64A, 0x639, 0x649, 0x639, 0x64A, 0x63A, 0x649, 0x63A, 0x64A, 0x633, 0x649, 0x633, 0x64A, 0x634, 0x649, 0x634, 0x64A, 0x62D, 0x649, 0x62D, 0x64A, 0x62C, 0x649, 0x62C, 0x64A, 0x62E, 0x649, 0x62E, 0x64A, 0x635, 0x649, 0x635, 0x64A, 0x636, 0x649, 0x636, 0x64A, 0x634, 0x62C, 0x634, 0x62D, 0x634, 0x62E, 0x634, 0x631, 0x633, 0x631, 0x635, 0x631, 0x636, 0x631, 0x627, 0x64B, 0x62A, 0x62C, 0x645, 0x62A, 0x62D, 0x62C, 0x62A, 0x62D, 0x645, 0x62A, 0x62E, 0x645, 0x62A, 0x645, 0x62C, 0x62A, 0x645, 0x62D, 0x62A, 0x645, 0x62E, 0x62C, 0x645, 0x62D, 0x62D, 0x645, 0x64A, 0x62D, 0x645, 0x649, 0x633, 0x62D, 0x62C, 0x633, 0x62C, 0x62D, 0x633, 0x62C, 0x649, 0x633, 0x645, 0x62D, 0x633, 0x645, 0x62C, 0x633, 0x645, 0x645, 0x635, 0x62D, 0x62D, 0x635, 0x645, 0x645, 0x634, 0x62D, 0x645, 0x634, 0x62C, 0x64A, 0x634, 0x645, 0x62E, 0x634, 0x645, 0x645, 0x636, 0x62D, 0x649, 0x636, 0x62E, 0x645, 0x637, 0x645, 0x62D, 0x637, 0x645, 0x645, 0x637, 0x645, 0x64A, 0x639, 0x62C, 0x645, 0x639, 0x645, 0x645, 0x639, 0x645, 0x649, 0x63A, 0x645, 0x645, 0x63A, 0x645, 0x64A, 0x63A, 0x645, 0x649, 0x641, 0x62E, 0x645, 0x642, 0x645, 0x62D, 0x642, 0x645, 0x645, 0x644, 0x62D, 0x645, 0x644, 0x62D, 0x64A, 0x644, 0x62D, 0x649, 0x644, 0x62C, 0x62C, 0x644, 0x62E, 0x645, 0x644, 0x645, 0x62D, 0x645, 0x62D, 0x62C, 0x645, 0x62D, 0x645, 0x645, 0x62D, 0x64A, 0x645, 0x62C, 0x62D, 0x645, 0x62C, 0x645, 0x645, 0x62E, 0x62C, 0x645, 0x62E, 0x645, 0x645, 0x62C, 0x62E, 0x647, 0x645, 0x62C, 0x647, 0x645, 0x645, 0x646, 0x62D, 0x645, 0x646, 0x62D, 0x649, 0x646, 0x62C, 0x645, 0x646, 0x62C, 0x649, 0x646, 0x645, 0x64A, 0x646, 0x645, 0x649, 0x64A, 0x645, 0x645, 0x628, 0x62E, 0x64A, 0x62A, 0x62C, 0x64A, 0x62A, 0x62C, 0x649, 0x62A, 0x62E, 0x64A, 0x62A, 0x62E, 0x649, 0x62A, 0x645, 0x64A, 0x62A, 0x645, 0x649, 0x62C, 0x645, 0x64A, 0x62C, 0x62D, 0x649, 0x62C, 0x645, 0x649, 0x633, 0x62E, 0x649, 0x635, 0x62D, 0x64A, 0x634, 0x62D, 0x64A, 0x636, 0x62D, 0x64A, 0x644, 0x62C, 0x64A, 0x644, 0x645, 0x64A, 0x64A, 0x62D, 0x64A, 0x64A, 0x62C, 0x64A, 0x64A, 0x645, 0x64A, 0x645, 0x645, 0x64A, 0x642, 0x645, 0x64A, 0x646, 0x62D, 0x64A, 0x639, 0x645, 0x64A, 0x643, 0x645, 0x64A, 0x646, 0x62C, 0x62D, 0x645, 0x62E, 0x64A, 0x644, 0x62C, 0x645, 0x643, 0x645, 0x645, 0x62C, 0x62D, 0x64A, 0x62D, 0x62C, 0x64A, 0x645, 0x62C, 0x64A, 0x641, 0x645, 0x64A, 0x628, 0x62D, 0x64A, 0x633, 0x62E, 0x64A, 0x646, 0x62C, 0x64A, 0x635, 0x644, 0x6D2, 0x642, 0x644, 0x6D2, 0x627, 0x644, 0x644, 0x647, 0x627, 0x643, 0x628, 0x631, 0x645, 0x62D, 0x645, 0x62F, 0x635, 0x644, 0x639, 0x645, 0x631, 0x633, 0x648, 0x644, 0x639, 0x644, 0x64A, 0x647, 0x648, 0x633, 0x644, 0x645, 0x635, 0x644, 0x649, 0x635, 0x644, 0x649, 0x20, 0x627, 0x644, 0x644, 0x647, 0x20, 0x639, 0x644, 0x64A, 0x647, 0x20, 0x648, 0x633, 0x644, 0x645, 0x62C, 0x644, 0x20, 0x62C, 0x644, 0x627, 0x644, 0x647, 0x631, 0x6CC, 0x627, 0x644, 0x2C, 0x3001, 0x3002, 0x3A, 0x21, 0x3F, 0x3016, 0x3017, 0x2026, 0x2025, 0x2014, 0x2013, 0x5F, 0x7B, 0x7D, 0x3014, 0x3015, 0x3010, 0x3011, 0x300A, 0x300B, 0x300C, 0x300D, 0x300E, 0x300F, 0x5B, 0x5D, 0x203E, 0x23, 0x26, 0x2A, 0x2D, 0x3C, 0x3E, 0x5C, 0x24, 0x25, 0x40, 0x20, 0x64B, 0x640, 0x64B, 0x20, 0x64C, 0x20, 0x64D, 0x20, 0x64E, 0x640, 0x64E, 0x20, 0x64F, 0x640, 0x64F, 0x20, 0x650, 0x640, 0x650, 0x20, 0x651, 0x640, 0x651, 0x20, 0x652, 0x640, 0x652, 0x621, 0x622, 0x623, 0x624, 0x625, 0x626, 0x627, 0x628, 0x629, 0x62A, 0x62B, 0x62C, 0x62D, 0x62E, 0x62F, 0x630, 0x631, 0x632, 0x633, 0x634, 0x635, 0x636, 0x637, 0x638, 0x639, 0x63A, 0x641, 0x642, 0x643, 0x644, 0x645, 0x646, 0x647, 0x648, 0x64A, 0x644, 0x622, 0x644, 0x623, 0x644, 0x625, 0x644, 0x627, 0x22, 0x27, 0x2F, 0x5E, 0x7C, 0x7E, 0x2985, 0x2986, 0x30FB, 0x30A1, 0x30A3, 0x30A5, 0x30A7, 0x30A9, 0x30E3, 0x30E5, 0x30E7, 0x30C3, 0x30FC, 0x30F3, 0x3099, 0x309A, 0x3164, 0x3131, 0x3132, 0x3133, 0x3134, 0x3135, 0x3136, 0x3137, 0x3138, 0x3139, 0x313A, 0x313B, 0x313C, 0x313D, 0x313E, 0x313F, 0x3140, 0x3141, 0x3142, 0x3143, 0x3144, 0x3145, 0x3146, 0x3147, 0x3148, 0x3149, 0x314A, 0x314B, 0x314C, 0x314D, 0x314E, 0x314F, 0x3150, 0x3151, 0x3152, 0x3153, 0x3154, 0x3155, 0x3156, 0x3157, 0x3158, 0x3159, 0x315A, 0x315B, 0x315C, 0x315D, 0x315E, 0x315F, 0x3160, 0x3161, 0x3162, 0x3163, 0xA2, 0xA3, 0xAC, 0xAF, 0xA6, 0xA5, 0x20A9, 0x2502, 0x2190, 0x2191, 0x2192, 0x2193, 0x25A0, 0x25CB, 0x2D0, 0x2D1, 0xE6, 0x299, 0x253, 0x2A3, 0xAB66, 0x2A5, 0x2A4, 0x256, 0x257, 0x1D91, 0x258, 0x25E, 0x2A9, 0x264, 0x262, 0x260, 0x29B, 0x29C, 0x267, 0x284, 0x2AA, 0x2AB, 0x26C, 0x1DF04, 0xA78E, 0x26E, 0x1DF05, 0x28E, 0x1DF06, 0xF8, 0x276, 0x277, 0x27A, 0x1DF08, 0x27D, 0x27E, 0x280, 0x2A8, 0x2A6, 0xAB67, 0x2A7, 0x288, 0x2C71, 0x28F, 0x2A1, 0x2A2, 0x298, 0x1C0, 0x1C1, 0x1C2, 0x1DF0A, 0x1DF1E, 0x11099, 0x110BA, 0x1109B, 0x110BA, 0x110A5, 0x110BA, 0x11131, 0x11127, 0x11132, 0x11127, 0x11347, 0x1133E, 0x11347, 0x11357, 0x114B9, 0x114BA, 0x114B9, 0x114B0, 0x114B9, 0x114BD, 0x115B8, 0x115AF, 0x115B9, 0x115AF, 0x11935, 0x11930, 0x1D157, 0x1D165, 0x1D158, 0x1D165, 0x1D15F, 0x1D16E, 0x1D15F, 0x1D16F, 0x1D15F, 0x1D170, 0x1D15F, 0x1D171, 0x1D15F, 0x1D172, 0x1D1B9, 0x1D165, 0x1D1BA, 0x1D165, 0x1D1BB, 0x1D16E, 0x1D1BC, 0x1D16E, 0x1D1BB, 0x1D16F, 0x1D1BC, 0x1D16F, 0x131, 0x237, 0x391, 0x392, 0x394, 0x395, 0x396, 0x397, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A1, 0x3F4, 0x3A4, 0x3A6, 0x3A7, 0x3A8, 0x2207, 0x3B1, 0x3B6, 0x3B7, 0x3BB, 0x3BD, 0x3BE, 0x3BF, 0x3C3, 0x3C4, 0x3C5, 0x3C8, 0x3C9, 0x2202, 0x3F5, 0x3D1, 0x3F0, 0x3D5, 0x3F1, 0x3D6, 0x3DC, 0x3DD, 0x66E, 0x6A1, 0x66F, 0x30, 0x2E, 0x30, 0x2C, 0x31, 0x2C, 0x32, 0x2C, 0x33, 0x2C, 0x34, 0x2C, 0x35, 0x2C, 0x36, 0x2C, 0x37, 0x2C, 0x38, 0x2C, 0x39, 0x2C, 0x28, 0x41, 0x29, 0x28, 0x42, 0x29, 0x28, 0x43, 0x29, 0x28, 0x44, 0x29, 0x28, 0x45, 0x29, 0x28, 0x46, 0x29, 0x28, 0x47, 0x29, 0x28, 0x48, 0x29, 0x28, 0x49, 0x29, 0x28, 0x4A, 0x29, 0x28, 0x4B, 0x29, 0x28, 0x4C, 0x29, 0x28, 0x4D, 0x29, 0x28, 0x4E, 0x29, 0x28, 0x4F, 0x29, 0x28, 0x50, 0x29, 0x28, 0x51, 0x29, 0x28, 0x52, 0x29, 0x28, 0x53, 0x29, 0x28, 0x54, 0x29, 0x28, 0x55, 0x29, 0x28, 0x56, 0x29, 0x28, 0x57, 0x29, 0x28, 0x58, 0x29, 0x28, 0x59, 0x29, 0x28, 0x5A, 0x29, 0x3014, 0x53, 0x3015, 0x43, 0x44, 0x57, 0x5A, 0x48, 0x56, 0x53, 0x44, 0x53, 0x53, 0x50, 0x50, 0x56, 0x57, 0x43, 0x4D, 0x43, 0x4D, 0x44, 0x4D, 0x52, 0x44, 0x4A, 0x307B, 0x304B, 0x30B3, 0x30B3, 0x5B57, 0x53CC, 0x30C7, 0x591A, 0x89E3, 0x4EA4, 0x6620, 0x7121, 0x524D, 0x5F8C, 0x518D, 0x65B0, 0x521D, 0x7D42, 0x8CA9, 0x58F0, 0x5439, 0x6F14, 0x6295, 0x6355, 0x904A, 0x6307, 0x6253, 0x7981, 0x7A7A, 0x5408, 0x6E80, 0x7533, 0x5272, 0x55B6, 0x914D, 0x3014, 0x672C, 0x3015, 0x3014, 0x4E09, 0x3015, 0x3014, 0x4E8C, 0x3015, 0x3014, 0x5B89, 0x3015, 0x3014, 0x70B9, 0x3015, 0x3014, 0x6253, 0x3015, 0x3014, 0x76D7, 0x3015, 0x3014, 0x52DD, 0x3015, 0x3014, 0x6557, 0x3015, 0x5F97, 0x53EF, 0x4E3D, 0x4E38, 0x4E41, 0x20122, 0x4F60, 0x4FBB, 0x5002, 0x507A, 0x5099, 0x50CF, 0x349E, 0x2063A, 0x5154, 0x5164, 0x5177, 0x2051C, 0x34B9, 0x5167, 0x2054B, 0x5197, 0x51A4, 0x4ECC, 0x51AC, 0x291DF, 0x5203, 0x34DF, 0x523B, 0x5246, 0x5277, 0x3515, 0x5305, 0x5306, 0x5349, 0x535A, 0x5373, 0x537D, 0x537F, 0x20A2C, 0x7070, 0x53CA, 0x53DF, 0x20B63, 0x53EB, 0x53F1, 0x5406, 0x549E, 0x5438, 0x5448, 0x5468, 0x54A2, 0x54F6, 0x5510, 0x5553, 0x5563, 0x5584, 0x55AB, 0x55B3, 0x55C2, 0x5716, 0x5717, 0x5651, 0x5674, 0x58EE, 0x57CE, 0x57F4, 0x580D, 0x578B, 0x5832, 0x5831, 0x58AC, 0x214E4, 0x58F2, 0x58F7, 0x5906, 0x5922, 0x5962, 0x216A8, 0x216EA, 0x59EC, 0x5A1B, 0x5A27, 0x59D8, 0x5A66, 0x36EE, 0x36FC, 0x5B08, 0x5B3E, 0x219C8, 0x5BC3, 0x5BD8, 0x5BF3, 0x21B18, 0x5BFF, 0x5C06, 0x5F53, 0x3781, 0x5C60, 0x5CC0, 0x5C8D, 0x21DE4, 0x5D43, 0x21DE6, 0x5D6E, 0x5D6B, 0x5D7C, 0x5DE1, 0x5DE2, 0x382F, 0x5DFD, 0x5E28, 0x5E3D, 0x5E69, 0x3862, 0x22183, 0x387C, 0x5EB0, 0x5EB3, 0x5EB6, 0x2A392, 0x22331, 0x8201, 0x5F22, 0x38C7, 0x232B8, 0x261DA, 0x5F62, 0x5F6B, 0x38E3, 0x5F9A, 0x5FCD, 0x5FD7, 0x5FF9, 0x6081, 0x393A, 0x391C, 0x226D4, 0x60C7, 0x6148, 0x614C, 0x617A, 0x61B2, 0x61A4, 0x61AF, 0x61DE, 0x6210, 0x621B, 0x625D, 0x62B1, 0x62D4, 0x6350, 0x22B0C, 0x633D, 0x62FC, 0x6368, 0x6383, 0x63E4, 0x22BF1, 0x6422, 0x63C5, 0x63A9, 0x3A2E, 0x6469, 0x647E, 0x649D, 0x6477, 0x3A6C, 0x656C, 0x2300A, 0x65E3, 0x66F8, 0x6649, 0x3B19, 0x3B08, 0x3AE4, 0x5192, 0x5195, 0x6700, 0x669C, 0x80AD, 0x43D9, 0x6721, 0x675E, 0x6753, 0x233C3, 0x3B49, 0x67FA, 0x6785, 0x6852, 0x2346D, 0x688E, 0x681F, 0x6914, 0x6942, 0x69A3, 0x69EA, 0x6AA8, 0x236A3, 0x6ADB, 0x3C18, 0x6B21, 0x238A7, 0x6B54, 0x3C4E, 0x6B72, 0x6B9F, 0x6BBB, 0x23A8D, 0x21D0B, 0x23AFA, 0x6C4E, 0x23CBC, 0x6CBF, 0x6CCD, 0x6C67, 0x6D16, 0x6D3E, 0x6D69, 0x6D78, 0x6D85, 0x23D1E, 0x6D34, 0x6E2F, 0x6E6E, 0x3D33, 0x6EC7, 0x23ED1, 0x6DF9, 0x6F6E, 0x23F5E, 0x23F8E, 0x6FC6, 0x7039, 0x701B, 0x3D96, 0x704A, 0x707D, 0x7077, 0x70AD, 0x20525, 0x7145, 0x24263, 0x719C, 0x243AB, 0x7228, 0x7250, 0x24608, 0x7280, 0x7295, 0x24735, 0x24814, 0x737A, 0x738B, 0x3EAC, 0x73A5, 0x3EB8, 0x7447, 0x745C, 0x7485, 0x74CA, 0x3F1B, 0x7524, 0x24C36, 0x753E, 0x24C92, 0x2219F, 0x7610, 0x24FA1, 0x24FB8, 0x25044, 0x3FFC, 0x4008, 0x250F3, 0x250F2, 0x25119, 0x25133, 0x771E, 0x771F, 0x778B, 0x4046, 0x4096, 0x2541D, 0x784E, 0x40E3, 0x25626, 0x2569A, 0x256C5, 0x79EB, 0x412F, 0x7A4A, 0x7A4F, 0x2597C, 0x25AA7, 0x7AEE, 0x4202, 0x25BAB, 0x7BC6, 0x7BC9, 0x4227, 0x25C80, 0x7CD2, 0x42A0, 0x7CE8, 0x7CE3, 0x7D00, 0x25F86, 0x7D63, 0x4301, 0x7DC7, 0x7E02, 0x7E45, 0x4334, 0x26228, 0x26247, 0x4359, 0x262D9, 0x7F7A, 0x2633E, 0x7F95, 0x7FFA, 0x264DA, 0x26523, 0x8060, 0x265A8, 0x8070, 0x2335F, 0x43D5, 0x80B2, 0x8103, 0x440B, 0x813E, 0x5AB5, 0x267A7, 0x267B5, 0x23393, 0x2339C, 0x8204, 0x8F9E, 0x446B, 0x8291, 0x828B, 0x829D, 0x52B3, 0x82B1, 0x82B3, 0x82BD, 0x82E6, 0x26B3C, 0x831D, 0x8363, 0x83AD, 0x8323, 0x83BD, 0x83E7, 0x8353, 0x83CA, 0x83CC, 0x83DC, 0x26C36, 0x26D6B, 0x26CD5, 0x452B, 0x84F1, 0x84F3, 0x8516, 0x273CA, 0x8564, 0x26F2C, 0x455D, 0x4561, 0x26FB1, 0x270D2, 0x456B, 0x8650, 0x8667, 0x8669, 0x86A9, 0x8688, 0x870E, 0x86E2, 0x8728, 0x876B, 0x8786, 0x45D7, 0x87E1, 0x8801, 0x45F9, 0x8860, 0x27667, 0x88D7, 0x88DE, 0x4635, 0x88FA, 0x34BB, 0x278AE, 0x27966, 0x46BE, 0x46C7, 0x8AA0, 0x27CA8, 0x8CAB, 0x8CC1, 0x8D1B, 0x8D77, 0x27F2F, 0x20804, 0x8DCB, 0x8DBC, 0x8DF0, 0x208DE, 0x8ED4, 0x285D2, 0x285ED, 0x9094, 0x90F1, 0x9111, 0x2872E, 0x911B, 0x9238, 0x92D7, 0x92D8, 0x927C, 0x93F9, 0x9415, 0x28BFA, 0x958B, 0x4995, 0x95B7, 0x28D77, 0x49E6, 0x96C3, 0x5DB2, 0x9723, 0x29145, 0x2921A, 0x4A6E, 0x4A76, 0x97E0, 0x2940A, 0x4AB2, 0x29496, 0x9829, 0x295B6, 0x98E2, 0x4B33, 0x9929, 0x99A7, 0x99C2, 0x99FE, 0x4BCE, 0x29B30, 0x9C40, 0x9CFD, 0x4CCE, 0x4CED, 0x9D67, 0x2A0CE, 0x4CF8, 0x2A105, 0x2A20E, 0x2A291, 0x4D56, 0x9EFE, 0x9F05, 0x9F0F, 0x9F16, 0x2A600];

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingNone(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xC0 && input <= 0xFB4E) {
        if (input <= 0x30FE) {
            if (input <= 0x233)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(0 + (input - 0xC0))];
            else if (input >= 0x340 && input <= 0x477)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(372 + (input - 0x340))];
            else if (input >= 0x4C1 && input <= 0x4F9)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(684 + (input - 0x4C1))];
            else if (input >= 0x622 && input <= 0x626)
                return cast(ubyte)2;
            else if (input >= 0x6C0 && input <= 0x6D3)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(741 + (input - 0x6C0))];
            else if (input >= 0x929 && input <= 0x95F)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(761 + (input - 0x929))];
            else if (input >= 0x9CB && input <= 0x9DF)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(816 + (input - 0x9CB))];
            else if (input >= 0xA33 && input <= 0xA5E)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(837 + (input - 0xA33))];
            else if (input >= 0xB48 && input <= 0xBCC)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(881 + (input - 0xB48))];
            else if (input == 0xC48)
                return cast(ubyte)2;
            else if (input >= 0xCC0 && input <= 0xCCB)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(1014 + (input - 0xCC0))];
            else if (input >= 0xD4A && input <= 0xD4C)
                return cast(ubyte)2;
            else if (input >= 0xDDA && input <= 0xDDE)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(1026 + (input - 0xDDA))];
            else if (input >= 0xF43 && input <= 0xFB9)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(1031 + (input - 0xF43))];
            else if (input == 0x1026)
                return cast(ubyte)2;
            else if (input >= 0x1B06 && input <= 0x1B43)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(1150 + (input - 0x1B06))];
            else if (input >= 0x1E00 && input <= 0x2001)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(1212 + (input - 0x1E00))];
            else if (input >= 0x2126 && input <= 0x212B)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(1726 + (input - 0x2126))];
            else if (input >= 0x219A && input <= 0x232A)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(1732 + (input - 0x219A))];
            else if (input == 0x2ADC)
                return cast(ubyte)2;
            else if (input >= 0x304C)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(2133 + (input - 0x304C))];
        } else if (input >= 0xF900) {
            if (input <= 0xFAD9)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(2312 + (input - 0xF900))];
            else if (input >= 0xFB1D)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(2786 + (input - 0xFB1D))];
        }
    } else if (input >= 0x1109A && input <= 0x1D1C0) {
        if (input == 0xFFFF) {
            if (input <= 0x110AB)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(2836 + (input - 0x1109A))];
            else if (input >= 0x1112E && input <= 0x1112F)
                return cast(ubyte)2;
            else if (input >= 0x1134B && input <= 0x1134C)
                return cast(ubyte)2;
            else if (input >= 0x114BB && input <= 0x114BE)
                return cast(ubyte)LUT_7CD5AE3F[cast(size_t)(2854 + (input - 0x114BB))];
            else if (input >= 0x115BA && input <= 0x115BB)
                return cast(ubyte)2;
            else if (input == 0x11938)
                return cast(ubyte)2;
        } else if (input >= 0x1D15E) {
            if (input <= 0x1D164)
                return cast(ubyte)2;
            else if (input >= 0x1D1BB)
                return cast(ubyte)2;
        }
    } else if (input >= 0x2F800 && input <= 0x2FA1D) {
        return cast(ubyte)1;
    }
    return typeof(return).init;
}
private {
    static immutable LUT_7CD5AE3F = [2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 2, 2, 1, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 0, 1, 0, 0, 2, 2, 2, 2, 0, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 0, 0, 2, 2, 2, 2, 2, 1, 0, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 1, 0, 0, 2, 2, 2, 0, 2, 2, 2, 1, 2, 1, 2, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingFont(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x2102 && input <= 0xFB29) {
        if (input <= 0x2149) {
            return cast(ubyte)LUT_2482A4D7[cast(size_t)(0 + (input - 0x2102))];
        } else if (input >= 0xFB20) {
            return cast(ubyte)1;
        }
    } else if (input >= 0x1D400 && input <= 0x1FBF9) {
        if (input <= 0x1D7FF)
            return cast(ubyte)LUT_2482A4D7[cast(size_t)(72 + (input - 0x1D400))];
        else if (input >= 0x1EE00 && input <= 0x1EEBB)
            return cast(ubyte)LUT_2482A4D7[cast(size_t)(1096 + (input - 0x1EE00))];
        else if (input >= 0x1FBF0)
            return cast(ubyte)1;
    }
    return typeof(return).init;
}
private {
    static immutable LUT_2482A4D7 = [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingNoBreak(dchar input) @trusted nothrow @nogc pure {
    if (input == 0xA0)
        return cast(ubyte)1;
    else if (input == 0xF0C)
        return cast(ubyte)1;
    else if (input >= 0x2007 && input <= 0x202F)
        return cast(ubyte)LUT_8A84359[cast(size_t)(0 + (input - 0x2007))];
    return typeof(return).init;
}
private {
    static immutable LUT_8A84359 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingInitial(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFB54 && input <= 0xFBFE)
        return cast(ubyte)LUT_B63829A[cast(size_t)(0 + (input - 0xFB54))];
    else if (input >= 0xFC97 && input <= 0xFCDE)
        return cast(ubyte)2;
    else if (input >= 0xFD2D && input <= 0xFDC5)
        return cast(ubyte)LUT_B63829A[cast(size_t)(171 + (input - 0xFD2D))];
    else if (input >= 0xFE8B && input <= 0xFEF3)
        return cast(ubyte)LUT_B63829A[cast(size_t)(324 + (input - 0xFE8B))];
    return typeof(return).init;
}
private {
    static immutable LUT_B63829A = [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 3, 0, 0, 3, 3, 0, 0, 3, 3, 0, 3, 0, 3, 0, 0, 3, 0, 0, 3, 0, 3, 0, 0, 3, 0, 3, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 3, 0, 3, 3, 3, 0, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingMedial(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFB55 && input <= 0xFBFF)
        return cast(ubyte)LUT_4FDF5E86[cast(size_t)(0 + (input - 0xFB55))];
    else if (input >= 0xFCDF && input <= 0xFD3B)
        return cast(ubyte)LUT_4FDF5E86[cast(size_t)(171 + (input - 0xFCDF))];
    else if (input >= 0xFE71 && input <= 0xFEF4)
        return cast(ubyte)LUT_4FDF5E86[cast(size_t)(264 + (input - 0xFE71))];
    return typeof(return).init;
}
private {
    static immutable LUT_4FDF5E86 = [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingFinal(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFB51 && input <= 0xFBFD)
        return cast(ubyte)LUT_4543B2C1[cast(size_t)(0 + (input - 0xFB51))];
    else if (input >= 0xFC64 && input <= 0xFC96)
        return cast(ubyte)2;
    else if (input >= 0xFD11 && input <= 0xFDC7)
        return cast(ubyte)LUT_4543B2C1[cast(size_t)(173 + (input - 0xFD11))];
    else if (input >= 0xFE82 && input <= 0xFEFC)
        return cast(ubyte)LUT_4543B2C1[cast(size_t)(356 + (input - 0xFE82))];
    return typeof(return).init;
}
private {
    static immutable LUT_4543B2C1 = [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 0, 0, 3, 3, 0, 0, 3, 0, 3, 0, 3, 3, 0, 3, 3, 0, 3, 0, 3, 3, 0, 3, 0, 0, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 0, 3, 3, 0, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 3, 3, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingIsolated(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFB50 && input <= 0xFC63)
        return cast(ubyte)LUT_BECBA0DE[cast(size_t)(0 + (input - 0xFB50))];
    else if (input >= 0xFCF5 && input <= 0xFD3D)
        return cast(ubyte)LUT_BECBA0DE[cast(size_t)(276 + (input - 0xFCF5))];
    else if (input >= 0xFDF0 && input <= 0xFDFC)
        return cast(ubyte)LUT_BECBA0DE[cast(size_t)(349 + (input - 0xFDF0))];
    else if (input >= 0xFE70 && input <= 0xFEFB)
        return cast(ubyte)LUT_BECBA0DE[cast(size_t)(362 + (input - 0xFE70))];
    return typeof(return).init;
}
private {
    static immutable LUT_BECBA0DE = [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 2, 0, 0, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 18, 8, 4, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingCircle(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x2460 && input <= 0x32FE) {
        if (input <= 0x2473)
            return cast(ubyte)LUT_4A6762B9[cast(size_t)(0 + (input - 0x2460))];
        else if (input >= 0x24B6 && input <= 0x24EA)
            return cast(ubyte)1;
        else if (input >= 0x3244)
            return cast(ubyte)LUT_4A6762B9[cast(size_t)(20 + (input - 0x3244))];
    } else if (input >= 0x1F12B && input <= 0x1F251) {
        if (input <= 0x1F12E)
            return cast(ubyte)LUT_4A6762B9[cast(size_t)(207 + (input - 0x1F12B))];
        else if (input >= 0x1F250)
            return cast(ubyte)1;
    }
    return typeof(return).init;
}
private {
    static immutable LUT_4A6762B9 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 4, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingSuper(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xAA && input <= 0xAB69) {
        if (input <= 0x319F) {
            if (input <= 0xBA)
                return cast(ubyte)LUT_73EB4674[cast(size_t)(0 + (input - 0xAA))];
            else if (input >= 0x2B0 && input <= 0x2E4)
                return cast(ubyte)LUT_73EB4674[cast(size_t)(17 + (input - 0x2B0))];
            else if (input == 0x10FC)
                return cast(ubyte)1;
            else if (input >= 0x1D2C && input <= 0x1DBF)
                return cast(ubyte)LUT_73EB4674[cast(size_t)(70 + (input - 0x1D2C))];
            else if (input >= 0x2070 && input <= 0x207F)
                return cast(ubyte)LUT_73EB4674[cast(size_t)(218 + (input - 0x2070))];
            else if (input >= 0x2120 && input <= 0x2122)
                return cast(ubyte)LUT_73EB4674[cast(size_t)(234 + (input - 0x2120))];
            else if (input == 0x2C7D)
                return cast(ubyte)1;
            else if (input == 0x2D6F)
                return cast(ubyte)1;
            else if (input >= 0x3192)
                return cast(ubyte)1;
        } else if (input >= 0xA69C) {
            if (input <= 0xA69D)
                return cast(ubyte)1;
            else if (input == 0xA770)
                return cast(ubyte)1;
            else if (input >= 0xA7F2 && input <= 0xA7F9)
                return cast(ubyte)LUT_73EB4674[cast(size_t)(237 + (input - 0xA7F2))];
            else if (input >= 0xAB5C)
                return cast(ubyte)LUT_73EB4674[cast(size_t)(245 + (input - 0xAB5C))];
        }
    } else if (input >= 0x10781 && input <= 0x1F16C) {
        if (input <= 0x107BA) {
            return cast(ubyte)LUT_73EB4674[cast(size_t)(259 + (input - 0x10781))];
        } else if (input >= 0x1F16A) {
            return cast(ubyte)2;
        }
    }
    return typeof(return).init;
}
private {
    static immutable LUT_73EB4674 = [1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingSub(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x1D62 && input <= 0x1D6A)
        return cast(ubyte)1;
    else if (input >= 0x2080 && input <= 0x209C)
        return cast(ubyte)LUT_4E7A922B[cast(size_t)(0 + (input - 0x2080))];
    else if (input == 0x2C7C)
        return cast(ubyte)1;
    return typeof(return).init;
}
private {
    static immutable LUT_4E7A922B = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingVertical(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x309F && input <= 0x30FF) {
        if (input == 0x309F)
            return cast(ubyte)2;
        else if (input == 0x30FF)
            return cast(ubyte)2;
    } else if (input >= 0xFE10 && input <= 0xFE48) {
        return cast(ubyte)LUT_16AA7AC[cast(size_t)(0 + (input - 0xFE10))];
    }
    return typeof(return).init;
}
private {
    static immutable LUT_16AA7AC = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingWide(dchar input) @trusted nothrow @nogc pure {
    if (input == 0x3000) {
        return cast(ubyte)1;
    } else if (input >= 0xFF01 && input <= 0xFFE6) {
        if (input <= 0xFF60)
            return cast(ubyte)1;
        else if (input >= 0xFFE0)
            return cast(ubyte)1;
    }
    return typeof(return).init;
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingNarrow(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFF61 && input <= 0xFFEE)
        return cast(ubyte)LUT_B873D39[cast(size_t)(0 + (input - 0xFF61))];
    return typeof(return).init;
}
private {
    static immutable LUT_B873D39 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingSmall(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xFE50 && input <= 0xFE6B)
        return cast(ubyte)LUT_34CF56C9[cast(size_t)(0 + (input - 0xFE50))];
    return typeof(return).init;
}
private {
    static immutable LUT_34CF56C9 = [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingSquare(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0x3250 && input <= 0x33FF) {
        if (input == 0x3250)
            return cast(ubyte)3;
        else if (input >= 0x32CC)
            return cast(ubyte)LUT_5FF86CA8[cast(size_t)(0 + (input - 0x32CC))];
    } else if (input >= 0x1F130 && input <= 0x1F23B) {
        if (input <= 0x1F14F)
            return cast(ubyte)LUT_5FF86CA8[cast(size_t)(308 + (input - 0x1F130))];
        else if (input == 0x1F190)
            return cast(ubyte)2;
        else if (input >= 0x1F200)
            return cast(ubyte)LUT_5FF86CA8[cast(size_t)(340 + (input - 0x1F200))];
    }
    return typeof(return).init;
}
private {
    static immutable LUT_5FF86CA8 = [2, 3, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 4, 4, 3, 4, 3, 3, 5, 4, 3, 3, 3, 4, 4, 3, 3, 2, 3, 4, 4, 2, 5, 6, 5, 3, 5, 5, 4, 3, 3, 3, 4, 5, 4, 3, 3, 3, 2, 2, 2, 2, 3, 3, 5, 3, 4, 5, 3, 2, 2, 5, 4, 5, 3, 5, 2, 3, 3, 3, 3, 3, 4, 3, 2, 3, 3, 3, 4, 3, 3, 3, 5, 4, 2, 5, 2, 4, 4, 3, 3, 3, 4, 2, 3, 4, 2, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 4, 2, 3, 3, 3, 3, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 2, 4, 3, 2, 2, 2, 2, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingFraction(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xBC && input <= 0xBE)
        return cast(ubyte)3;
    else if (input >= 0x2150 && input <= 0x2189)
        return cast(ubyte)LUT_AC0D650B[cast(size_t)(0 + (input - 0x2150))];
    return typeof(return).init;
}
private {
    static immutable LUT_AC0D650B = [3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingCompat(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xA8 && input <= 0xFE4F) {
        if (input <= 0x33FE) {
            if (input <= 0xB8)
                return cast(ubyte)LUT_C4135288[cast(size_t)(0 + (input - 0xA8))];
            else if (input >= 0x132 && input <= 0x17F)
                return cast(ubyte)LUT_C4135288[cast(size_t)(17 + (input - 0x132))];
            else if (input >= 0x1C4 && input <= 0x1F3)
                return cast(ubyte)LUT_C4135288[cast(size_t)(95 + (input - 0x1C4))];
            else if (input >= 0x2D8 && input <= 0x2DD)
                return cast(ubyte)2;
            else if (input >= 0x37A && input <= 0x384)
                return cast(ubyte)LUT_C4135288[cast(size_t)(143 + (input - 0x37A))];
            else if (input >= 0x3D0 && input <= 0x3F9)
                return cast(ubyte)LUT_C4135288[cast(size_t)(154 + (input - 0x3D0))];
            else if (input == 0x587)
                return cast(ubyte)2;
            else if (input >= 0x675 && input <= 0x678)
                return cast(ubyte)2;
            else if (input == 0xE33)
                return cast(ubyte)2;
            else if (input >= 0xEB3 && input <= 0xEDD)
                return cast(ubyte)LUT_C4135288[cast(size_t)(196 + (input - 0xEB3))];
            else if (input >= 0xF77 && input <= 0xF79)
                return cast(ubyte)LUT_C4135288[cast(size_t)(239 + (input - 0xF77))];
            else if (input == 0x1E9A)
                return cast(ubyte)2;
            else if (input >= 0x1FBD && input <= 0x205F)
                return cast(ubyte)LUT_C4135288[cast(size_t)(242 + (input - 0x1FBD))];
            else if (input == 0x20A8)
                return cast(ubyte)2;
            else if (input >= 0x2100 && input <= 0x217F)
                return cast(ubyte)LUT_C4135288[cast(size_t)(405 + (input - 0x2100))];
            else if (input >= 0x222C && input <= 0x2230)
                return cast(ubyte)LUT_C4135288[cast(size_t)(533 + (input - 0x222C))];
            else if (input >= 0x2474 && input <= 0x24B5)
                return cast(ubyte)LUT_C4135288[cast(size_t)(538 + (input - 0x2474))];
            else if (input == 0x2A0C)
                return cast(ubyte)4;
            else if (input >= 0x2A74 && input <= 0x2A76)
                return cast(ubyte)LUT_C4135288[cast(size_t)(604 + (input - 0x2A74))];
            else if (input == 0x2E9F)
                return cast(ubyte)1;
            else if (input >= 0x2EF3 && input <= 0x2FD5)
                return cast(ubyte)LUT_C4135288[cast(size_t)(607 + (input - 0x2EF3))];
            else if (input >= 0x3036 && input <= 0x303A)
                return cast(ubyte)LUT_C4135288[cast(size_t)(834 + (input - 0x3036))];
            else if (input >= 0x309B && input <= 0x309C)
                return cast(ubyte)2;
            else if (input >= 0x3131 && input <= 0x318E)
                return cast(ubyte)1;
            else if (input >= 0x3200 && input <= 0x3243)
                return cast(ubyte)LUT_C4135288[cast(size_t)(839 + (input - 0x3200))];
            else if (input >= 0x32C0 && input <= 0x32CB)
                return cast(ubyte)LUT_C4135288[cast(size_t)(907 + (input - 0x32C0))];
            else if (input >= 0x3358 && input <= 0x3370)
                return cast(ubyte)LUT_C4135288[cast(size_t)(919 + (input - 0x3358))];
            else if (input >= 0x33E0)
                return cast(ubyte)LUT_C4135288[cast(size_t)(944 + (input - 0x33E0))];
        } else if (input >= 0xFB00) {
            if (input <= 0xFB4F)
                return cast(ubyte)LUT_C4135288[cast(size_t)(975 + (input - 0xFB00))];
            else if (input >= 0xFE49)
                return cast(ubyte)1;
        }
    } else if (input >= 0x1F100 && input <= 0x1F248) {
        if (input <= 0x1F12A)
            return cast(ubyte)LUT_C4135288[cast(size_t)(1055 + (input - 0x1F100))];
        else if (input >= 0x1F240)
            return cast(ubyte)3;
    }
    return typeof(return).init;
}
private {
    static immutable LUT_C4135288 = [2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 2, 3, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 2, 0, 3, 3, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 2, 1, 2, 3, 4, 2, 1, 2, 3, 1, 1, 1, 1, 1, 2, 3, 2, 1, 2, 3, 4, 2, 1, 2, 3, 1, 1, 1, 1, 2, 3, 0, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 6, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, ];
}

export extern(C) immutable(ubyte) sidero_utf_lut_lengthOfDecompositionMappingCompatibility(dchar input) @trusted nothrow @nogc pure {
    if (input >= 0xA0 && input <= 0xFFEE) {
        if (input <= 0x33FF) {
            if (input <= 0xBE)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(0 + (input - 0xA0))];
            else if (input >= 0x132 && input <= 0x17F)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(31 + (input - 0x132))];
            else if (input >= 0x1C4 && input <= 0x1F3)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(109 + (input - 0x1C4))];
            else if (input >= 0x2B0 && input <= 0x2E4)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(157 + (input - 0x2B0))];
            else if (input >= 0x37A && input <= 0x384)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(210 + (input - 0x37A))];
            else if (input >= 0x3D0 && input <= 0x3F9)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(221 + (input - 0x3D0))];
            else if (input == 0x587)
                return cast(ubyte)2;
            else if (input >= 0x675 && input <= 0x678)
                return cast(ubyte)2;
            else if (input == 0xE33)
                return cast(ubyte)2;
            else if (input >= 0xEB3 && input <= 0xF0C)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(263 + (input - 0xEB3))];
            else if (input >= 0xF77 && input <= 0xF79)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(353 + (input - 0xF77))];
            else if (input == 0x10FC)
                return cast(ubyte)1;
            else if (input >= 0x1D2C && input <= 0x1DBF)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(356 + (input - 0x1D2C))];
            else if (input == 0x1E9A)
                return cast(ubyte)2;
            else if (input >= 0x1FBD && input <= 0x20A8)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(504 + (input - 0x1FBD))];
            else if (input >= 0x2100 && input <= 0x2189)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(740 + (input - 0x2100))];
            else if (input >= 0x222C && input <= 0x2230)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(878 + (input - 0x222C))];
            else if (input >= 0x2460 && input <= 0x24EA)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(883 + (input - 0x2460))];
            else if (input == 0x2A0C)
                return cast(ubyte)4;
            else if (input >= 0x2A74 && input <= 0x2A76)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(1022 + (input - 0x2A74))];
            else if (input >= 0x2C7C && input <= 0x2C7D)
                return cast(ubyte)1;
            else if (input == 0x2D6F)
                return cast(ubyte)1;
            else if (input == 0x2E9F)
                return cast(ubyte)1;
            else if (input >= 0x2EF3 && input <= 0x303A)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(1025 + (input - 0x2EF3))];
            else if (input >= 0x309B && input <= 0x309F)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(1353 + (input - 0x309B))];
            else if (input >= 0x30FF && input <= 0x319F)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(1358 + (input - 0x30FF))];
            else if (input >= 0x3200)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(1519 + (input - 0x3200))];
        } else if (input >= 0xA69C) {
            if (input <= 0xA69D)
                return cast(ubyte)1;
            else if (input == 0xA770)
                return cast(ubyte)1;
            else if (input >= 0xA7F2 && input <= 0xA7F9)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(2031 + (input - 0xA7F2))];
            else if (input >= 0xAB5C && input <= 0xAB69)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(2039 + (input - 0xAB5C))];
            else if (input >= 0xFB00)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(2053 + (input - 0xFB00))];
        }
    } else if (input >= 0x10781 && input <= 0x1FBF9) {
        if (input <= 0x107BA) {
            return cast(ubyte)LUT_6B5BE55A[cast(size_t)(3316 + (input - 0x10781))];
        } else if (input >= 0x1D400) {
            if (input <= 0x1D7FF)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(3374 + (input - 0x1D400))];
            else if (input >= 0x1EE00 && input <= 0x1EEBB)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(4398 + (input - 0x1EE00))];
            else if (input >= 0x1F100 && input <= 0x1F190)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(4586 + (input - 0x1F100))];
            else if (input >= 0x1F200 && input <= 0x1F251)
                return cast(ubyte)LUT_6B5BE55A[cast(size_t)(4731 + (input - 0x1F200))];
            else if (input >= 0x1FBF0)
                return cast(ubyte)1;
        }
    }
    return typeof(return).init;
}
private {
    static immutable LUT_6B5BE55A = [1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 1, 0, 0, 2, 1, 1, 0, 3, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 2, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 3, 0, 2, 3, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 3, 1, 2, 0, 3, 3, 1, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 2, 0, 0, 1, 1, 1, 1, 1, 0, 0, 2, 3, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1, 2, 3, 2, 1, 2, 3, 4, 2, 1, 2, 3, 1, 1, 1, 1, 1, 2, 3, 2, 1, 2, 3, 4, 2, 1, 2, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 3, 0, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 7, 6, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 4, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 3, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4, 4, 4, 3, 4, 3, 3, 5, 4, 3, 3, 3, 4, 4, 3, 3, 2, 3, 4, 4, 2, 5, 6, 5, 3, 5, 5, 4, 3, 3, 3, 4, 5, 4, 3, 3, 3, 2, 2, 2, 2, 3, 3, 5, 3, 4, 5, 3, 2, 2, 5, 4, 5, 3, 5, 2, 3, 3, 3, 3, 3, 4, 3, 2, 3, 3, 3, 4, 3, 3, 3, 5, 4, 2, 5, 2, 4, 4, 3, 3, 3, 4, 2, 3, 4, 2, 5, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 2, 3, 3, 3, 2, 3, 3, 4, 2, 3, 3, 3, 3, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 2, 4, 3, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 4, 4, 4, 4, 4, 4, 4, 3, 18, 8, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 1, 1, 2, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 1, 1, ];
}


alias SD = SliceDiced;

struct SliceDiced {
    ushort offset, end;
}
